
PWM_LED_Fade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002338  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024d0  080024d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024d0  080024d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024d8  080024d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024dc  080024dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000081e0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000149d  00000000  00000000  0002825f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000950  00000000  00000000  00029700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000072f  00000000  00000000  0002a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fb09  00000000  00000000  0002a77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a21a  00000000  00000000  0004a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4be2  00000000  00000000  000544a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026d0  00000000  00000000  00119084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0011b754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024a8 	.word	0x080024a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080024a8 	.word	0x080024a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fa17 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f829 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f8fb 	bl	80006cc <MX_GPIO_Init>
  MX_TIM4_Init();
 80004d6:	f000 f883 	bl	80005e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004da:	2100      	movs	r1, #0
 80004dc:	4810      	ldr	r0, [pc, #64]	; (8000520 <main+0x5c>)
 80004de:	f001 f9cd 	bl	800187c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	 for (int i=0;i<10000;i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e006      	b.n	80004f6 <main+0x32>
	  	 {
	  		 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,i);
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <main+0x5c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	635a      	str	r2, [r3, #52]	; 0x34
	  	 for (int i=0;i<10000;i++)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80004fc:	4293      	cmp	r3, r2
 80004fe:	ddf3      	ble.n	80004e8 <main+0x24>

	  	 }
	  	for (int i=10000;i>0;i++)
 8000500:	f242 7310 	movw	r3, #10000	; 0x2710
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	e006      	b.n	8000516 <main+0x52>
		 {
			 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,i);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <main+0x5c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
	  	for (int i=10000;i>0;i++)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	dcf5      	bgt.n	8000508 <main+0x44>
	  	 for (int i=0;i<10000;i++)
 800051c:	e7e1      	b.n	80004e2 <main+0x1e>
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 ff8c 	bl	8002450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xb4>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xb4>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xb4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <SystemClock_Config+0xb8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <SystemClock_Config+0xb8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <SystemClock_Config+0xb8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058c:	2300      	movs	r3, #0
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fca5 	bl	8000ee4 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a0:	f000 f8bc 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 ff08 	bl	80013d4 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ca:	f000 f8a7 	bl	800071c <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000612:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <MX_TIM4_Init+0xe8>)
 8000614:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000618:	220f      	movs	r2, #15
 800061a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_TIM4_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000624:	f242 720f 	movw	r2, #9999	; 0x270f
 8000628:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_TIM4_Init+0xe4>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000636:	4823      	ldr	r0, [pc, #140]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000638:	f001 f878 	bl	800172c <HAL_TIM_Base_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000642:	f000 f86b 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800064c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000650:	4619      	mov	r1, r3
 8000652:	481c      	ldr	r0, [pc, #112]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000654:	f001 fa9c 	bl	8001b90 <HAL_TIM_ConfigClockSource>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800065e:	f000 f85d 	bl	800071c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000662:	4818      	ldr	r0, [pc, #96]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000664:	f001 f8b1 	bl	80017ca <HAL_TIM_PWM_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800066e:	f000 f855 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4619      	mov	r1, r3
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <MX_TIM4_Init+0xe4>)
 8000682:	f001 fe69 	bl	8002358 <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800068c:	f000 f846 	bl	800071c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000690:	2360      	movs	r3, #96	; 0x60
 8000692:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	220c      	movs	r2, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_TIM4_Init+0xe4>)
 80006a8:	f001 f9b0 	bl	8001a0c <HAL_TIM_PWM_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80006b2:	f000 f833 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_TIM4_Init+0xe4>)
 80006b8:	f000 f880 	bl	80007bc <HAL_TIM_MspPostInit>

}
 80006bc:	bf00      	nop
 80006be:	3738      	adds	r7, #56	; 0x38
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40000800 	.word	0x40000800

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_MspInit+0x4c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x4c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <HAL_TIM_Base_MspInit+0x3c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d10d      	bne.n	80007a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_TIM_Base_MspInit+0x40>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <HAL_TIM_Base_MspInit+0x40>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_TIM_Base_MspInit+0x40>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40000800 	.word	0x40000800
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <HAL_TIM_MspPostInit+0x68>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d11e      	bne.n	800081c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_TIM_MspPostInit+0x6c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_TIM_MspPostInit+0x6c>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_TIM_MspPostInit+0x6c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_TIM_MspPostInit+0x70>)
 8000818:	f000 f9c8 	bl	8000bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40000800 	.word	0x40000800
 8000828:	40023800 	.word	0x40023800
 800082c:	40020c00 	.word	0x40020c00

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f890 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008ac:	f7ff ffea 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f001 fdc3 	bl	8002460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008da:	f7ff fdf3 	bl	80004c4 <main>
  bx  lr    
 80008de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ec:	080024e0 	.word	0x080024e0
  ldr r2, =_sbss
 80008f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f4:	20000074 	.word	0x20000074

080008f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC_IRQHandler>
	...

080008fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_Init+0x40>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_Init+0x40>)
 8000912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_Init+0x40>)
 800091e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f90d 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	200f      	movs	r0, #15
 800092c:	f000 f808 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff fefa 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023c00 	.word	0x40023c00

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f917 	bl	8000b92 <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 f8ed 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000070 	.word	0x20000070

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000070 	.word	0x20000070

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff47 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff5c 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff8e 	bl	8000a98 <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5d 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffb0 	bl	8000b00 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e16b      	b.n	8000ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 815a 	bne.w	8000e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d005      	beq.n	8000bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d130      	bne.n	8000c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0201 	and.w	r2, r3, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d017      	beq.n	8000c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0203 	and.w	r2, r3, #3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80b4 	beq.w	8000e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a5f      	ldr	r2, [pc, #380]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4e:	4a5b      	ldr	r2, [pc, #364]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x314>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x226>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a51      	ldr	r2, [pc, #324]	; (8000ec4 <HAL_GPIO_Init+0x318>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x222>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a50      	ldr	r2, [pc, #320]	; (8000ec8 <HAL_GPIO_Init+0x31c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x21e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ecc <HAL_GPIO_Init+0x320>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <HAL_GPIO_Init+0x324>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <HAL_GPIO_Init+0x328>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x212>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x32c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x20e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x20a>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00e      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00c      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00a      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e16:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f ae90 	bls.w	8000bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40021c00 	.word	0x40021c00
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e267      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d075      	beq.n	8000fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f02:	4b88      	ldr	r3, [pc, #544]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d00c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b85      	ldr	r3, [pc, #532]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d112      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b82      	ldr	r3, [pc, #520]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f26:	d10b      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4b7e      	ldr	r3, [pc, #504]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d05b      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d157      	bne.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e242      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x74>
 8000f4a:	4b76      	ldr	r3, [pc, #472]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a75      	ldr	r2, [pc, #468]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b70      	ldr	r3, [pc, #448]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6f      	ldr	r2, [pc, #444]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6d      	ldr	r3, [pc, #436]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6c      	ldr	r2, [pc, #432]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	4b69      	ldr	r3, [pc, #420]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a68      	ldr	r2, [pc, #416]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a65      	ldr	r2, [pc, #404]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd14 	bl	80009c8 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fd10 	bl	80009c8 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e207      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fd00 	bl	80009c8 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fcfc 	bl	80009c8 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1f3      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b51      	ldr	r3, [pc, #324]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b47      	ldr	r3, [pc, #284]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b44      	ldr	r3, [pc, #272]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1c7      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4937      	ldr	r1, [pc, #220]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <HAL_RCC_OscConfig+0x244>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fcb5 	bl	80009c8 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fcb1 	bl	80009c8 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1a8      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4925      	ldr	r1, [pc, #148]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <HAL_RCC_OscConfig+0x244>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fc94 	bl	80009c8 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc90 	bl	80009c8 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e187      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d036      	beq.n	800113c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_RCC_OscConfig+0x248>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc74 	bl	80009c8 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc70 	bl	80009c8 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e167      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 80010f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x200>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_RCC_OscConfig+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc5d 	bl	80009c8 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	e00e      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc59 	bl	80009c8 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d907      	bls.n	8001130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e150      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
 800112c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b88      	ldr	r3, [pc, #544]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ea      	bne.n	8001112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8097 	beq.w	8001278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b81      	ldr	r3, [pc, #516]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b7d      	ldr	r3, [pc, #500]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a7c      	ldr	r2, [pc, #496]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b7a      	ldr	r3, [pc, #488]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b77      	ldr	r3, [pc, #476]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b74      	ldr	r3, [pc, #464]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a73      	ldr	r2, [pc, #460]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc19 	bl	80009c8 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fc15 	bl	80009c8 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e10c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b6a      	ldr	r3, [pc, #424]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x2ea>
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c4:	4a63      	ldr	r2, [pc, #396]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	; 0x70
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x30c>
 80011d6:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	; 0x70
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e6:	4a5b      	ldr	r2, [pc, #364]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6713      	str	r3, [r2, #112]	; 0x70
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	4a57      	ldr	r2, [pc, #348]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	; 0x70
 80011fc:	4b55      	ldr	r3, [pc, #340]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	4a54      	ldr	r2, [pc, #336]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fbda 	bl	80009c8 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fbd6 	bl	80009c8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0cb      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	4b49      	ldr	r3, [pc, #292]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ee      	beq.n	8001218 <HAL_RCC_OscConfig+0x334>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fbc4 	bl	80009c8 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fbc0 	bl	80009c8 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0b5      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ee      	bne.n	8001244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a38      	ldr	r2, [pc, #224]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a1 	beq.w	80013c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d05c      	beq.n	8001348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d141      	bne.n	800131a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_RCC_OscConfig+0x478>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb94 	bl	80009c8 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb90 	bl	80009c8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e087      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	3b01      	subs	r3, #1
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	491b      	ldr	r1, [pc, #108]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x478>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb69 	bl	80009c8 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb65 	bl	80009c8 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e05c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x416>
 8001318:	e054      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb52 	bl	80009c8 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb4e 	bl	80009c8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e045      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e038      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000
 800135c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x4ec>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d028      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d121      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001398:	4293      	cmp	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fa80 	bl	80009c8 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fa7c 	bl	80009c8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9e0 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	080024c0 	.word	0x080024c0
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b090      	sub	sp, #64	; 0x40
 80015a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b8:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d00d      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f200 80a1 	bhi.w	800170c <HAL_RCC_GetSysClockFreq+0x16c>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x3a>
 80015d2:	e09b      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80015d8:	e09b      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015de:	e098      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d028      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	623b      	str	r3, [r7, #32]
 8001600:	627a      	str	r2, [r7, #36]	; 0x24
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001608:	2100      	movs	r1, #0
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800160c:	fb03 f201 	mul.w	r2, r3, r1
 8001610:	2300      	movs	r3, #0
 8001612:	fb00 f303 	mul.w	r3, r0, r3
 8001616:	4413      	add	r3, r2
 8001618:	4a43      	ldr	r2, [pc, #268]	; (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800161a:	fba0 1202 	umull	r1, r2, r0, r2
 800161e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001620:	460a      	mov	r2, r1
 8001622:	62ba      	str	r2, [r7, #40]	; 0x28
 8001624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001626:	4413      	add	r3, r2
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162c:	2200      	movs	r2, #0
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	61fa      	str	r2, [r7, #28]
 8001632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800163a:	f7fe fdc5 	bl	80001c8 <__aeabi_uldivmod>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4613      	mov	r3, r2
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001646:	e053      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	2200      	movs	r2, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	617a      	str	r2, [r7, #20]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800165a:	f04f 0b00 	mov.w	fp, #0
 800165e:	4652      	mov	r2, sl
 8001660:	465b      	mov	r3, fp
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0159      	lsls	r1, r3, #5
 800166c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001670:	0150      	lsls	r0, r2, #5
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ebb2 080a 	subs.w	r8, r2, sl
 800167a:	eb63 090b 	sbc.w	r9, r3, fp
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800168a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800168e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001692:	ebb2 0408 	subs.w	r4, r2, r8
 8001696:	eb63 0509 	sbc.w	r5, r3, r9
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	00eb      	lsls	r3, r5, #3
 80016a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a8:	00e2      	lsls	r2, r4, #3
 80016aa:	4614      	mov	r4, r2
 80016ac:	461d      	mov	r5, r3
 80016ae:	eb14 030a 	adds.w	r3, r4, sl
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	eb45 030b 	adc.w	r3, r5, fp
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016c6:	4629      	mov	r1, r5
 80016c8:	028b      	lsls	r3, r1, #10
 80016ca:	4621      	mov	r1, r4
 80016cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016d0:	4621      	mov	r1, r4
 80016d2:	028a      	lsls	r2, r1, #10
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	2200      	movs	r2, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e4:	f7fe fd70 	bl	80001c8 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	3301      	adds	r3, #1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800170a:	e002      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001714:	4618      	mov	r0, r3
 8001716:	3740      	adds	r7, #64	; 0x40
 8001718:	46bd      	mov	sp, r7
 800171a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	00f42400 	.word	0x00f42400
 8001728:	017d7840 	.word	0x017d7840

0800172c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e041      	b.n	80017c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff f810 	bl	8000778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3304      	adds	r3, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f000 fad8 	bl	8001d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e041      	b.n	8001860 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d106      	bne.n	80017f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f839 	bl	8001868 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3304      	adds	r3, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f000 fa89 	bl	8001d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_TIM_PWM_Start+0x24>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e022      	b.n	80018e6 <HAL_TIM_PWM_Start+0x6a>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d109      	bne.n	80018ba <HAL_TIM_PWM_Start+0x3e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	e015      	b.n	80018e6 <HAL_TIM_PWM_Start+0x6a>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d109      	bne.n	80018d4 <HAL_TIM_PWM_Start+0x58>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e008      	b.n	80018e6 <HAL_TIM_PWM_Start+0x6a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07c      	b.n	80019e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d104      	bne.n	80018fe <HAL_TIM_PWM_Start+0x82>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018fc:	e013      	b.n	8001926 <HAL_TIM_PWM_Start+0xaa>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d104      	bne.n	800190e <HAL_TIM_PWM_Start+0x92>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800190c:	e00b      	b.n	8001926 <HAL_TIM_PWM_Start+0xaa>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d104      	bne.n	800191e <HAL_TIM_PWM_Start+0xa2>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800191c:	e003      	b.n	8001926 <HAL_TIM_PWM_Start+0xaa>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fcec 	bl	800230c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <HAL_TIM_PWM_Start+0x174>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d004      	beq.n	8001948 <HAL_TIM_PWM_Start+0xcc>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <HAL_TIM_PWM_Start+0x178>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_TIM_PWM_Start+0xd0>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_TIM_PWM_Start+0xd2>
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_TIM_PWM_Start+0x174>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d022      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x136>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d01d      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x136>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <HAL_TIM_PWM_Start+0x17c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d018      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x136>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_TIM_PWM_Start+0x180>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x136>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_TIM_PWM_Start+0x184>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00e      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x136>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <HAL_TIM_PWM_Start+0x178>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d009      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x136>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_TIM_PWM_Start+0x188>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d004      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x136>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <HAL_TIM_PWM_Start+0x18c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d111      	bne.n	80019d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b06      	cmp	r3, #6
 80019c2:	d010      	beq.n	80019e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d4:	e007      	b.n	80019e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40010400 	.word	0x40010400
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800
 8001a00:	40000c00 	.word	0x40000c00
 8001a04:	40014000 	.word	0x40014000
 8001a08:	40001800 	.word	0x40001800

08001a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e0ae      	b.n	8001b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	f200 809f 	bhi.w	8001b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a75 	.word	0x08001a75
 8001a44:	08001b79 	.word	0x08001b79
 8001a48:	08001b79 	.word	0x08001b79
 8001a4c:	08001b79 	.word	0x08001b79
 8001a50:	08001ab5 	.word	0x08001ab5
 8001a54:	08001b79 	.word	0x08001b79
 8001a58:	08001b79 	.word	0x08001b79
 8001a5c:	08001b79 	.word	0x08001b79
 8001a60:	08001af7 	.word	0x08001af7
 8001a64:	08001b79 	.word	0x08001b79
 8001a68:	08001b79 	.word	0x08001b79
 8001a6c:	08001b79 	.word	0x08001b79
 8001a70:	08001b37 	.word	0x08001b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f9fc 	bl	8001e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0208 	orr.w	r2, r2, #8
 8001a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0204 	bic.w	r2, r2, #4
 8001a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6999      	ldr	r1, [r3, #24]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	619a      	str	r2, [r3, #24]
      break;
 8001ab2:	e064      	b.n	8001b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fa4c 	bl	8001f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699a      	ldr	r2, [r3, #24]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6999      	ldr	r1, [r3, #24]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	021a      	lsls	r2, r3, #8
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	619a      	str	r2, [r3, #24]
      break;
 8001af4:	e043      	b.n	8001b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 faa1 	bl	8002044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0208 	orr.w	r2, r2, #8
 8001b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0204 	bic.w	r2, r2, #4
 8001b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69d9      	ldr	r1, [r3, #28]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
      break;
 8001b34:	e023      	b.n	8001b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 faf5 	bl	800212c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69da      	ldr	r2, [r3, #28]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69d9      	ldr	r1, [r3, #28]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	021a      	lsls	r2, r3, #8
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	61da      	str	r2, [r3, #28]
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_TIM_ConfigClockSource+0x1c>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e0b4      	b.n	8001d16 <HAL_TIM_ConfigClockSource+0x186>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be4:	d03e      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0xd4>
 8001be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bea:	f200 8087 	bhi.w	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf2:	f000 8086 	beq.w	8001d02 <HAL_TIM_ConfigClockSource+0x172>
 8001bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bfa:	d87f      	bhi.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001bfc:	2b70      	cmp	r3, #112	; 0x70
 8001bfe:	d01a      	beq.n	8001c36 <HAL_TIM_ConfigClockSource+0xa6>
 8001c00:	2b70      	cmp	r3, #112	; 0x70
 8001c02:	d87b      	bhi.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001c04:	2b60      	cmp	r3, #96	; 0x60
 8001c06:	d050      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0x11a>
 8001c08:	2b60      	cmp	r3, #96	; 0x60
 8001c0a:	d877      	bhi.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001c0c:	2b50      	cmp	r3, #80	; 0x50
 8001c0e:	d03c      	beq.n	8001c8a <HAL_TIM_ConfigClockSource+0xfa>
 8001c10:	2b50      	cmp	r3, #80	; 0x50
 8001c12:	d873      	bhi.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001c14:	2b40      	cmp	r3, #64	; 0x40
 8001c16:	d058      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0x13a>
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d86f      	bhi.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001c1c:	2b30      	cmp	r3, #48	; 0x30
 8001c1e:	d064      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0x15a>
 8001c20:	2b30      	cmp	r3, #48	; 0x30
 8001c22:	d86b      	bhi.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d060      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0x15a>
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d867      	bhi.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05c      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0x15a>
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d05a      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0x15a>
 8001c34:	e062      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c46:	f000 fb41 	bl	80022cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	609a      	str	r2, [r3, #8]
      break;
 8001c62:	e04f      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c74:	f000 fb2a 	bl	80022cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c86:	609a      	str	r2, [r3, #8]
      break;
 8001c88:	e03c      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c96:	461a      	mov	r2, r3
 8001c98:	f000 fa9e 	bl	80021d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2150      	movs	r1, #80	; 0x50
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 faf7 	bl	8002296 <TIM_ITRx_SetConfig>
      break;
 8001ca8:	e02c      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f000 fabd 	bl	8002236 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2160      	movs	r1, #96	; 0x60
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fae7 	bl	8002296 <TIM_ITRx_SetConfig>
      break;
 8001cc8:	e01c      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f000 fa7e 	bl	80021d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2140      	movs	r1, #64	; 0x40
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fad7 	bl	8002296 <TIM_ITRx_SetConfig>
      break;
 8001ce8:	e00c      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f000 face 	bl	8002296 <TIM_ITRx_SetConfig>
      break;
 8001cfa:	e003      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001d00:	e000      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <TIM_Base_SetConfig+0x12c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3e:	d00f      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a43      	ldr	r2, [pc, #268]	; (8001e50 <TIM_Base_SetConfig+0x130>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00b      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a42      	ldr	r2, [pc, #264]	; (8001e54 <TIM_Base_SetConfig+0x134>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a41      	ldr	r2, [pc, #260]	; (8001e58 <TIM_Base_SetConfig+0x138>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d003      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a40      	ldr	r2, [pc, #256]	; (8001e5c <TIM_Base_SetConfig+0x13c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d108      	bne.n	8001d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <TIM_Base_SetConfig+0x12c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d80:	d027      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <TIM_Base_SetConfig+0x130>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d023      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <TIM_Base_SetConfig+0x134>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <TIM_Base_SetConfig+0x138>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <TIM_Base_SetConfig+0x13c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d017      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <TIM_Base_SetConfig+0x140>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <TIM_Base_SetConfig+0x144>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00f      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <TIM_Base_SetConfig+0x148>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a2b      	ldr	r2, [pc, #172]	; (8001e6c <TIM_Base_SetConfig+0x14c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <TIM_Base_SetConfig+0x150>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <TIM_Base_SetConfig+0x154>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <TIM_Base_SetConfig+0x12c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0xf8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <TIM_Base_SetConfig+0x13c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d103      	bne.n	8001e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f023 0201 	bic.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40000800 	.word	0x40000800
 8001e58:	40000c00 	.word	0x40000c00
 8001e5c:	40010400 	.word	0x40010400
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40014400 	.word	0x40014400
 8001e68:	40014800 	.word	0x40014800
 8001e6c:	40001800 	.word	0x40001800
 8001e70:	40001c00 	.word	0x40001c00
 8001e74:	40002000 	.word	0x40002000

08001e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f023 0201 	bic.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f023 0302 	bic.w	r3, r3, #2
 8001ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <TIM_OC1_SetConfig+0xd8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_OC1_SetConfig+0x64>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <TIM_OC1_SetConfig+0xdc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d10c      	bne.n	8001ef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f023 0308 	bic.w	r3, r3, #8
 8001ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <TIM_OC1_SetConfig+0xd8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d003      	beq.n	8001f06 <TIM_OC1_SetConfig+0x8e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <TIM_OC1_SetConfig+0xdc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	621a      	str	r2, [r3, #32]
}
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40010400 	.word	0x40010400

08001f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f023 0210 	bic.w	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 0320 	bic.w	r3, r3, #32
 8001fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a22      	ldr	r2, [pc, #136]	; (800203c <TIM_OC2_SetConfig+0xe4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_OC2_SetConfig+0x68>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a21      	ldr	r2, [pc, #132]	; (8002040 <TIM_OC2_SetConfig+0xe8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10d      	bne.n	8001fdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <TIM_OC2_SetConfig+0xe4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_OC2_SetConfig+0x94>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <TIM_OC2_SetConfig+0xe8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d113      	bne.n	8002014 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	621a      	str	r2, [r3, #32]
}
 800202e:	bf00      	nop
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40010400 	.word	0x40010400

08002044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800208c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a21      	ldr	r2, [pc, #132]	; (8002124 <TIM_OC3_SetConfig+0xe0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <TIM_OC3_SetConfig+0x66>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a20      	ldr	r2, [pc, #128]	; (8002128 <TIM_OC3_SetConfig+0xe4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10d      	bne.n	80020c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a16      	ldr	r2, [pc, #88]	; (8002124 <TIM_OC3_SetConfig+0xe0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_OC3_SetConfig+0x92>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <TIM_OC3_SetConfig+0xe4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d113      	bne.n	80020fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	621a      	str	r2, [r3, #32]
}
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40010000 	.word	0x40010000
 8002128:	40010400 	.word	0x40010400

0800212c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	031b      	lsls	r3, r3, #12
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <TIM_OC4_SetConfig+0xa4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_OC4_SetConfig+0x68>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <TIM_OC4_SetConfig+0xa8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d109      	bne.n	80021a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800219a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	019b      	lsls	r3, r3, #6
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	621a      	str	r2, [r3, #32]
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40010400 	.word	0x40010400

080021d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	f023 0201 	bic.w	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f023 030a 	bic.w	r3, r3, #10
 8002214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	621a      	str	r2, [r3, #32]
}
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002236:	b480      	push	{r7}
 8002238:	b087      	sub	sp, #28
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f023 0210 	bic.w	r2, r3, #16
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	031b      	lsls	r3, r3, #12
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002272:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	621a      	str	r2, [r3, #32]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f043 0307 	orr.w	r3, r3, #7
 80022b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	021a      	lsls	r2, r3, #8
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	609a      	str	r2, [r3, #8]
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2201      	movs	r2, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	431a      	orrs	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	621a      	str	r2, [r3, #32]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800236c:	2302      	movs	r3, #2
 800236e:	e05a      	b.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a21      	ldr	r2, [pc, #132]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d01d      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d018      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10c      	bne.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	4313      	orrs	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40010000 	.word	0x40010000
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800
 8002440:	40000c00 	.word	0x40000c00
 8002444:	40010400 	.word	0x40010400
 8002448:	40014000 	.word	0x40014000
 800244c:	40001800 	.word	0x40001800

08002450 <memset>:
 8002450:	4402      	add	r2, r0
 8002452:	4603      	mov	r3, r0
 8002454:	4293      	cmp	r3, r2
 8002456:	d100      	bne.n	800245a <memset+0xa>
 8002458:	4770      	bx	lr
 800245a:	f803 1b01 	strb.w	r1, [r3], #1
 800245e:	e7f9      	b.n	8002454 <memset+0x4>

08002460 <__libc_init_array>:
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	4d0d      	ldr	r5, [pc, #52]	; (8002498 <__libc_init_array+0x38>)
 8002464:	4c0d      	ldr	r4, [pc, #52]	; (800249c <__libc_init_array+0x3c>)
 8002466:	1b64      	subs	r4, r4, r5
 8002468:	10a4      	asrs	r4, r4, #2
 800246a:	2600      	movs	r6, #0
 800246c:	42a6      	cmp	r6, r4
 800246e:	d109      	bne.n	8002484 <__libc_init_array+0x24>
 8002470:	4d0b      	ldr	r5, [pc, #44]	; (80024a0 <__libc_init_array+0x40>)
 8002472:	4c0c      	ldr	r4, [pc, #48]	; (80024a4 <__libc_init_array+0x44>)
 8002474:	f000 f818 	bl	80024a8 <_init>
 8002478:	1b64      	subs	r4, r4, r5
 800247a:	10a4      	asrs	r4, r4, #2
 800247c:	2600      	movs	r6, #0
 800247e:	42a6      	cmp	r6, r4
 8002480:	d105      	bne.n	800248e <__libc_init_array+0x2e>
 8002482:	bd70      	pop	{r4, r5, r6, pc}
 8002484:	f855 3b04 	ldr.w	r3, [r5], #4
 8002488:	4798      	blx	r3
 800248a:	3601      	adds	r6, #1
 800248c:	e7ee      	b.n	800246c <__libc_init_array+0xc>
 800248e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002492:	4798      	blx	r3
 8002494:	3601      	adds	r6, #1
 8002496:	e7f2      	b.n	800247e <__libc_init_array+0x1e>
 8002498:	080024d8 	.word	0x080024d8
 800249c:	080024d8 	.word	0x080024d8
 80024a0:	080024d8 	.word	0x080024d8
 80024a4:	080024dc 	.word	0x080024dc

080024a8 <_init>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr

080024b4 <_fini>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr
