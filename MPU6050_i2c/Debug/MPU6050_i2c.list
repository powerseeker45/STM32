
MPU6050_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d4  080022d4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080022d4  080022d4  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d4  080022d4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080022dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000058  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003362  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000938  00000000  00000000  00023471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002e8  00000000  00000000  00023db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000228  00000000  00000000  00024098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000011c6  00000000  00000000  000242c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003ed4  00000000  00000000  00025486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00057646  00000000  00000000  0002935a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a80  00000000  00000000  000809a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00081420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800225c 	.word	0x0800225c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	0800225c 	.word	0x0800225c

080001c8 <CPAL_I2C_EV_IRQHandler>:
  *         and for transfer phase in case of using Interrupt Programming Model.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_EV_IRQHandler( CPAL_InitTypeDef* pDevInitStruct)
{     
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint16_t I2CFlagStatus = 0x0000;
 80001d0:	2300      	movs	r3, #0
 80001d2:	81fb      	strh	r3, [r7, #14]
  
  /* Read I2C1 Status Registers 1 and 2 */
  I2CFlagStatus = __CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev); 
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	461a      	mov	r2, r3
 80001da:	4b41      	ldr	r3, [pc, #260]	; (80002e0 <CPAL_I2C_EV_IRQHandler+0x118>)
 80001dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001e0:	8a9b      	ldrh	r3, [r3, #20]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	81fb      	strh	r3, [r7, #14]
 
#ifdef CPAL_I2C_MASTER_MODE
  /*----------------------------------------------------------------------------------------------*/
  /*---------------------------------- If Master Mode selected ----------------------------------*/
  if (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	789b      	ldrb	r3, [r3, #2]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d140      	bne.n	8000276 <CPAL_I2C_EV_IRQHandler+0xae>
  { 
    /*----------------------------------------*/  
    /*------------- If SB event --------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_SB ) != 0)
 80001f4:	89fb      	ldrh	r3, [r7, #14]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d004      	beq.n	800020a <CPAL_I2C_EV_IRQHandler+0x42>
    {       
      return I2C_MASTER_START_Handle(pDevInitStruct);        
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 fdd5 	bl	8000db0 <I2C_MASTER_START_Handle>
 8000206:	4603      	mov	r3, r0
 8000208:	e066      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
    } 
    
    /*----------------------------------------*/
    /*------------- If ADDR event ------------*/
    if((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_ADDR ) != 0)
 800020a:	89fb      	ldrh	r3, [r7, #14]
 800020c:	b29b      	uxth	r3, r3
 800020e:	f003 0302 	and.w	r3, r3, #2
 8000212:	2b00      	cmp	r3, #0
 8000214:	d004      	beq.n	8000220 <CPAL_I2C_EV_IRQHandler+0x58>
    {  
      return I2C_MASTER_ADDR_Handle(pDevInitStruct);              
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 fe4c 	bl	8000eb4 <I2C_MASTER_ADDR_Handle>
 800021c:	4603      	mov	r3, r0
 800021e:	e05b      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
    }
    
 #ifdef CPAL_I2C_10BIT_ADDR_MODE
    /*----------------------------------------*/
    /*------------- If ADD10 event *----------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_ADD10) != 0)
 8000220:	89fb      	ldrh	r3, [r7, #14]
 8000222:	b29b      	uxth	r3, r3
 8000224:	f003 0308 	and.w	r3, r3, #8
 8000228:	2b00      	cmp	r3, #0
 800022a:	d004      	beq.n	8000236 <CPAL_I2C_EV_IRQHandler+0x6e>
    { 
      return I2C_MASTER_ADD10_Handle(pDevInitStruct);  
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f001 f82d 	bl	800128c <I2C_MASTER_ADD10_Handle>
 8000232:	4603      	mov	r3, r0
 8000234:	e050      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
 #endif /* CPAL_I2C_10BIT_ADDR_MODE */
    
 #ifdef CPAL_I2C_IT_PROGMODEL   
    /*----------------------------------------*/
    /*------------- If TXE event -------------*/
    if (((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_TXE) != 0) && (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX))
 8000236:	89fb      	ldrh	r3, [r7, #14]
 8000238:	b29b      	uxth	r3, r3
 800023a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800023e:	2b00      	cmp	r3, #0
 8000240:	d009      	beq.n	8000256 <CPAL_I2C_EV_IRQHandler+0x8e>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	7b1b      	ldrb	r3, [r3, #12]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	2b06      	cmp	r3, #6
 800024a:	d104      	bne.n	8000256 <CPAL_I2C_EV_IRQHandler+0x8e>
    {  
      return I2C_MASTER_TXE_Handle(pDevInitStruct); 
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f001 f855 	bl	80012fc <I2C_MASTER_TXE_Handle>
 8000252:	4603      	mov	r3, r0
 8000254:	e040      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
 #endif /* CPAL_I2C_IT_PROGMODEL */
    
 #if defined (CPAL_I2C_IT_PROGMODEL) || defined (CPAL_I2C_DMA_1BYTE_CASE)    
    /*----------------------------------------*/
    /*------------- If RXNE event ------------*/
    if (((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_RXNE) != 0) && (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX))
 8000256:	89fb      	ldrh	r3, [r7, #14]
 8000258:	b29b      	uxth	r3, r3
 800025a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800025e:	2b00      	cmp	r3, #0
 8000260:	d009      	beq.n	8000276 <CPAL_I2C_EV_IRQHandler+0xae>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	7b1b      	ldrb	r3, [r3, #12]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2b0a      	cmp	r3, #10
 800026a:	d104      	bne.n	8000276 <CPAL_I2C_EV_IRQHandler+0xae>
    { 
      return I2C_MASTER_RXNE_Handle(pDevInitStruct); 
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f001 f911 	bl	8001494 <I2C_MASTER_RXNE_Handle>
 8000272:	4603      	mov	r3, r0
 8000274:	e030      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
#endif /* CPAL_I2C_MASTER_MODE */
 
#ifdef CPAL_I2C_SLAVE_MODE  
  /*----------------------------------------------------------------------------------------------*/
  /*---------------------------------- If Slave Mode selected ------------------------------------*/
  if (pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	789b      	ldrb	r3, [r3, #2]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d12b      	bne.n	80002d6 <CPAL_I2C_EV_IRQHandler+0x10e>
  {  
    /*----------------------------------------*/        
    /*------------- If ADDR event ------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_ADDR ) != 0)
 800027e:	89fb      	ldrh	r3, [r7, #14]
 8000280:	b29b      	uxth	r3, r3
 8000282:	f003 0302 	and.w	r3, r3, #2
 8000286:	2b00      	cmp	r3, #0
 8000288:	d004      	beq.n	8000294 <CPAL_I2C_EV_IRQHandler+0xcc>
    { 
      return I2C_SLAVE_ADDR_Handle(pDevInitStruct); 
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	f001 fb2e 	bl	80018ec <I2C_SLAVE_ADDR_Handle>
 8000290:	4603      	mov	r3, r0
 8000292:	e021      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
    }    

 #ifdef CPAL_I2C_IT_PROGMODEL    
    /*----------------------------------------*/
    /*------------- If TXE event -------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_TXE) != 0)
 8000294:	89fb      	ldrh	r3, [r7, #14]
 8000296:	b29b      	uxth	r3, r3
 8000298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800029c:	2b00      	cmp	r3, #0
 800029e:	d004      	beq.n	80002aa <CPAL_I2C_EV_IRQHandler+0xe2>
    { 
      return I2C_SLAVE_TXE_Handle(pDevInitStruct); 
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f001 fc2b 	bl	8001afc <I2C_SLAVE_TXE_Handle>
 80002a6:	4603      	mov	r3, r0
 80002a8:	e016      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
    }  
    
    /*----------------------------------------*/
    /*------------- If RXNE event ------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_RXNE) != 0)
 80002aa:	89fb      	ldrh	r3, [r7, #14]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d004      	beq.n	80002c0 <CPAL_I2C_EV_IRQHandler+0xf8>
    { 
      return I2C_SLAVE_RXNE_Handle(pDevInitStruct); 
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f001 fc52 	bl	8001b60 <I2C_SLAVE_RXNE_Handle>
 80002bc:	4603      	mov	r3, r0
 80002be:	e00b      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
    }    
 #endif /* CPAL_I2C_IT_PROGMODEL */
    
    /*----------------------------------------*/
    /*------------- If STOPF event ------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_STOPF) != 0)
 80002c0:	89fb      	ldrh	r3, [r7, #14]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d004      	beq.n	80002d6 <CPAL_I2C_EV_IRQHandler+0x10e>
    { 
      return I2C_SLAVE_STOP_Handle(pDevInitStruct); 
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f001 fb39 	bl	8001944 <I2C_SLAVE_STOP_Handle>
 80002d2:	4603      	mov	r3, r0
 80002d4:	e000      	b.n	80002d8 <CPAL_I2C_EV_IRQHandler+0x110>
    }
  }
#endif /* CPAL_I2C_SLAVE_MODE */
  
  return CPAL_PASS;
 80002d6:	2300      	movs	r3, #0
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	2000006c 	.word	0x2000006c

080002e4 <CPAL_I2C_ER_IRQHandler>:
  *         user functions.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_ER_IRQHandler(CPAL_InitTypeDef* pDevInitStruct)
{  
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  /* If AF detected in Slave mode transmitter */
  if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && (pDevInitStruct->pCPAL_TransferTx->wNumData == 0) &&
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	789b      	ldrb	r3, [r3, #2]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d16e      	bne.n	80003d2 <CPAL_I2C_ER_IRQHandler+0xee>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d169      	bne.n	80003d2 <CPAL_I2C_ER_IRQHandler+0xee>
      ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) || (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)))
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	7b1b      	ldrb	r3, [r3, #12]
 8000302:	b2db      	uxtb	r3, r3
  if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && (pDevInitStruct->pCPAL_TransferTx->wNumData == 0) &&
 8000304:	2b01      	cmp	r3, #1
 8000306:	d004      	beq.n	8000312 <CPAL_I2C_ER_IRQHandler+0x2e>
      ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) || (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)))
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	7b1b      	ldrb	r3, [r3, #12]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b06      	cmp	r3, #6
 8000310:	d15f      	bne.n	80003d2 <CPAL_I2C_ER_IRQHandler+0xee>
  {      
    /* Clear error flags that can be cleared by writing to SR register */
    __CPAL_I2C_HAL_CLEAR_ERROR((pDevInitStruct->CPAL_Dev));  
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b6b      	ldr	r3, [pc, #428]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800031a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800031e:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8000322:	829a      	strh	r2, [r3, #20]
    
    /* If Interrupt Programming Model */
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	78db      	ldrb	r3, [r3, #3]
 8000328:	2b01      	cmp	r3, #1
 800032a:	f040 80c8 	bne.w	80004be <CPAL_I2C_ER_IRQHandler+0x1da>
    {  
#ifdef CPAL_I2C_IT_PROGMODEL  
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	461a      	mov	r2, r3
 8000334:	4b64      	ldr	r3, [pc, #400]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800033a:	889b      	ldrh	r3, [r3, #4]
 800033c:	b29a      	uxth	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	4619      	mov	r1, r3
 8000344:	4b60      	ldr	r3, [pc, #384]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800034a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800034e:	b292      	uxth	r2, r2
 8000350:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	4b5b      	ldr	r3, [pc, #364]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800035a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800035e:	889b      	ldrh	r3, [r3, #4]
 8000360:	b29a      	uxth	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4619      	mov	r1, r3
 8000368:	4b57      	ldr	r3, [pc, #348]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800036a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800036e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000372:	b292      	uxth	r2, r2
 8000374:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device BUFF IT Disabled"); 
      
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2206      	movs	r2, #6
 800037a:	619a      	str	r2, [r3, #24]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b51      	ldr	r3, [pc, #324]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000388:	8b1b      	ldrh	r3, [r3, #24]
 800038a:	b29b      	uxth	r3, r3
 800038c:	f003 0302 	and.w	r3, r3, #2
 8000390:	2b00      	cmp	r3, #0
 8000392:	d008      	beq.n	80003a6 <CPAL_I2C_ER_IRQHandler+0xc2>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d004      	beq.n	80003a6 <CPAL_I2C_ER_IRQHandler+0xc2>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003a4:	d1ea      	bne.n	800037c <CPAL_I2C_ER_IRQHandler+0x98>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d004      	beq.n	80003b8 <CPAL_I2C_ER_IRQHandler+0xd4>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003b6:	d104      	bne.n	80003c2 <CPAL_I2C_ER_IRQHandler+0xde>
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 fce3 	bl	8000d84 <CPAL_I2C_Timeout>
 80003be:	4603      	mov	r3, r0
 80003c0:	e07e      	b.n	80004c0 <CPAL_I2C_ER_IRQHandler+0x1dc>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f04f 32ff 	mov.w	r2, #4294967295
 80003c8:	619a      	str	r2, [r3, #24]
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY;  
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2201      	movs	r2, #1
 80003ce:	731a      	strb	r2, [r3, #12]
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 80003d0:	e075      	b.n	80004be <CPAL_I2C_ER_IRQHandler+0x1da>
    }   
  }  
  else
  {
    /* Read Error Register and affect to wCPAL_DevError */
    pDevInitStruct->wCPAL_DevError = __CPAL_I2C_HAL_GET_ERROR(pDevInitStruct->CPAL_Dev);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	461a      	mov	r2, r3
 80003d8:	4b3b      	ldr	r3, [pc, #236]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 80003da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003de:	8a9b      	ldrh	r3, [r3, #20]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
    
    /* Set Device state to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2210      	movs	r2, #16
 80003ee:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\r\n\rERROR <CPAL_I2C_ErrorHandler> : I2C Device Error"); 
    
    /* Clear error flags that can be cleared by writing to SR register */
    __CPAL_I2C_HAL_CLEAR_ERROR((pDevInitStruct->CPAL_Dev)); 
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 80003f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fc:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8000400:	829a      	strh	r2, [r3, #20]
    
    /* If Bus error occurred ---------------------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_BERR) != 0)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800040a:	2b00      	cmp	r3, #0
 800040c:	d025      	beq.n	800045a <CPAL_I2C_ER_IRQHandler+0x176>
    {      
      CPAL_LOG("\n\rERROR : I2C Device BERR"); 
      
      /* Generate I2C software reset in order to release SDA and SCL lines */
      __CPAL_I2C_HAL_SWRST(pDevInitStruct->CPAL_Dev);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	461a      	mov	r2, r3
 8000414:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7812      	ldrb	r2, [r2, #0]
 8000422:	4611      	mov	r1, r2
 8000424:	4a28      	ldr	r2, [pc, #160]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000426:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800042a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800042e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000432:	b29b      	uxth	r3, r3
 8000434:	8013      	strh	r3, [r2, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	461a      	mov	r2, r3
 800043c:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800043e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	b29a      	uxth	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800044e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000452:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000456:	b292      	uxth	r2, r2
 8000458:	801a      	strh	r2, [r3, #0]
      CPAL_I2C_BERR_UserCallback(pDevInitStruct->CPAL_Dev);    
#endif /* USE_MULTIPLE_ERROR_CALLBACK */
    }
    
    /* If Arbitration Loss error occurred --------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_ARLO) != 0)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	691b      	ldr	r3, [r3, #16]
 800045e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000462:	2b00      	cmp	r3, #0
 8000464:	d025      	beq.n	80004b2 <CPAL_I2C_ER_IRQHandler+0x1ce>
    {
      CPAL_LOG("\n\rERROR : I2C Device ARLO"); 
      
      /* Generate I2C software reset in order to release SDA and SCL lines */    
      __CPAL_I2C_HAL_SWRST(pDevInitStruct->CPAL_Dev);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800046e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	b29b      	uxth	r3, r3
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	7812      	ldrb	r2, [r2, #0]
 800047a:	4611      	mov	r1, r2
 800047c:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800047e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800048a:	b29b      	uxth	r3, r3
 800048c:	8013      	strh	r3, [r2, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29a      	uxth	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	4619      	mov	r1, r3
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 80004a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80004aa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80004ae:	b292      	uxth	r2, r2
 80004b0:	801a      	strh	r2, [r3, #0]
      CPAL_I2C_ARLO_UserCallback(pDevInitStruct->CPAL_Dev);  
#endif /* USE_MULTIPLE_ERROR_CALLBACK */    
    }
    
    /* If Overrun error occurred -----------------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_OVR) != 0)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	691b      	ldr	r3, [r3, #16]
      CPAL_I2C_OVR_UserCallback(pDevInitStruct->CPAL_Dev);
#endif /* USE_MULTIPLE_ERROR_CALLBACK */    
    }
        
    /* If Acknowledge Failure error occurred -----------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_AF) != 0)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	691b      	ldr	r3, [r3, #16]
    }   
        
    /* USE_SINGLE_ERROR_CALLBACK is defined in cpal_conf.h file */
#if defined(USE_SINGLE_ERROR_CALLBACK)  
    /* Call Error UserCallback */  
    CPAL_I2C_ERR_UserCallback(pDevInitStruct->CPAL_Dev, pDevInitStruct->wCPAL_DevError);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	691b      	ldr	r3, [r3, #16]
#endif /* USE_SINGLE_ERROR_CALLBACK */
  }
  
  return CPAL_PASS;
 80004be:	2300      	movs	r3, #0
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000006c 	.word	0x2000006c

080004cc <CPAL_I2C_DMA_TX_IRQHandler>:
  *         used for data transmission. 
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_DMA_TX_IRQHandler(CPAL_InitTypeDef* pDevInitStruct)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value to default (no timeout initiated) */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT; 
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f04f 32ff 	mov.w	r2, #4294967295
 80004da:	619a      	str	r2, [r3, #24]
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_DMA_TX_IRQHandler> : I2C Device TX DMA ");
  
  /*------------- If TC interrupt ------------*/
  if((__CPAL_I2C_HAL_GET_DMATX_TCIT(pDevInitStruct->CPAL_Dev)) != 0)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b72      	ldr	r3, [pc, #456]	; (80006ac <CPAL_I2C_DMA_TX_IRQHandler+0x1e0>)
 80004e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d013      	beq.n	8000518 <CPAL_I2C_DMA_TX_IRQHandler+0x4c>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b6e      	ldr	r3, [pc, #440]	; (80006b0 <CPAL_I2C_DMA_TX_IRQHandler+0x1e4>)
 80004f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004fc:	685a      	ldr	r2, [r3, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4619      	mov	r1, r3
 8000504:	4b69      	ldr	r3, [pc, #420]	; (80006ac <CPAL_I2C_DMA_TX_IRQHandler+0x1e0>)
 8000506:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2db      	uxtb	r3, r3
 8000516:	e012      	b.n	800053e <CPAL_I2C_DMA_TX_IRQHandler+0x72>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b64      	ldr	r3, [pc, #400]	; (80006b0 <CPAL_I2C_DMA_TX_IRQHandler+0x1e4>)
 8000520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	4b5f      	ldr	r3, [pc, #380]	; (80006ac <CPAL_I2C_DMA_TX_IRQHandler+0x1e0>)
 800052e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000532:	4013      	ands	r3, r2
 8000534:	2b00      	cmp	r3, #0
 8000536:	bf14      	ite	ne
 8000538:	2301      	movne	r3, #1
 800053a:	2300      	moveq	r3, #0
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	f000 811e 	beq.w	8000780 <CPAL_I2C_DMA_TX_IRQHandler+0x2b4>
  {  
    CPAL_LOG("\n\rLOG : I2C Device TX Complete");
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferTx->wNumData = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
    
    /* Call DMA TX TC UserCallback */
    CPAL_I2C_DMATXTC_UserCallback(pDevInitStruct);
    
    /* If DMA Normal mode */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_DMATX_CIRCULAR) == 0)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	2b00      	cmp	r3, #0
 8000556:	f040 8186 	bne.w	8000866 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
    {           
      /* If Master Mode selected */
      if (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER) 
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	2b00      	cmp	r3, #0
 8000560:	f040 80ac 	bne.w	80006bc <CPAL_I2C_DMA_TX_IRQHandler+0x1f0>
      {
 #ifdef CPAL_I2C_MASTER_MODE         
        /* Disable DMA Request */
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev); 
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b52      	ldr	r3, [pc, #328]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 800056c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000570:	889b      	ldrh	r3, [r3, #4]
 8000572:	b29a      	uxth	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	4b4e      	ldr	r3, [pc, #312]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 800057c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000584:	b292      	uxth	r2, r2
 8000586:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2205      	movs	r2, #5
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	4b47      	ldr	r3, [pc, #284]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800059a:	8a9b      	ldrh	r3, [r3, #20]
 800059c:	b29b      	uxth	r3, r3
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d108      	bne.n	80005b8 <CPAL_I2C_DMA_TX_IRQHandler+0xec>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d004      	beq.n	80005b8 <CPAL_I2C_DMA_TX_IRQHandler+0xec>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b6:	d1ea      	bne.n	800058e <CPAL_I2C_DMA_TX_IRQHandler+0xc2>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d004      	beq.n	80005ca <CPAL_I2C_DMA_TX_IRQHandler+0xfe>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c8:	d104      	bne.n	80005d4 <CPAL_I2C_DMA_TX_IRQHandler+0x108>
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 fbda 	bl	8000d84 <CPAL_I2C_Timeout>
 80005d0:	4603      	mov	r3, r0
 80005d2:	e18c      	b.n	80008ee <CPAL_I2C_DMA_TX_IRQHandler+0x422>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f04f 32ff 	mov.w	r2, #4294967295
 80005da:	619a      	str	r2, [r3, #24]
        
        /* No Stop Condition Generation option bit not selected */   
        if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d13b      	bne.n	8000660 <CPAL_I2C_DMA_TX_IRQHandler+0x194>
        {          
          /* Generate Stop Condition */
          __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 80005f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000608:	b292      	uxth	r2, r2
 800060a:	801a      	strh	r2, [r3, #0]
          
          /* Wait until Busy flag is reset */         
          __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2206      	movs	r2, #6
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 800061a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800061e:	8b1b      	ldrh	r3, [r3, #24]
 8000620:	b29b      	uxth	r3, r3
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b00      	cmp	r3, #0
 8000628:	d008      	beq.n	800063c <CPAL_I2C_DMA_TX_IRQHandler+0x170>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d004      	beq.n	800063c <CPAL_I2C_DMA_TX_IRQHandler+0x170>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063a:	d1ea      	bne.n	8000612 <CPAL_I2C_DMA_TX_IRQHandler+0x146>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d004      	beq.n	800064e <CPAL_I2C_DMA_TX_IRQHandler+0x182>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800064c:	d104      	bne.n	8000658 <CPAL_I2C_DMA_TX_IRQHandler+0x18c>
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fb98 	bl	8000d84 <CPAL_I2C_Timeout>
 8000654:	4603      	mov	r3, r0
 8000656:	e14a      	b.n	80008ee <CPAL_I2C_DMA_TX_IRQHandler+0x422>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f04f 32ff 	mov.w	r2, #4294967295
 800065e:	619a      	str	r2, [r3, #24]
        }
        
        /* Disable DMA Channel */                 
        __CPAL_I2C_HAL_DISABLE_DMATX(pDevInitStruct->CPAL_Dev);        
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <CPAL_I2C_DMA_TX_IRQHandler+0x1ec>)
 8000668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <CPAL_I2C_DMA_TX_IRQHandler+0x1ec>)
 8000676:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800067a:	f022 0201 	bic.w	r2, r2, #1
 800067e:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);   
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000698:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800069c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006a0:	b292      	uxth	r2, r2
 80006a2:	809a      	strh	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device Master TX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	731a      	strb	r2, [r3, #12]
 80006aa:	e0dc      	b.n	8000866 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
 80006ac:	0800228c 	.word	0x0800228c
 80006b0:	20000090 	.word	0x20000090
 80006b4:	2000006c 	.word	0x2000006c
 80006b8:	20000078 	.word	0x20000078
 #endif /* CPAL_I2C_MASTER_MODE */  
      else
      {
 #ifdef CPAL_I2C_SLAVE_MODE    	      
        /* Disable DMA Request and Channel */
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);      
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b8d      	ldr	r3, [pc, #564]	; (80008f8 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 80006c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4b89      	ldr	r3, [pc, #548]	; (80008f8 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 80006d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006dc:	b292      	uxth	r2, r2
 80006de:	809a      	strh	r2, [r3, #4]
        __CPAL_I2C_HAL_DISABLE_DMATX(pDevInitStruct->CPAL_Dev);      
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b85      	ldr	r3, [pc, #532]	; (80008fc <CPAL_I2C_DMA_TX_IRQHandler+0x430>)
 80006e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4b81      	ldr	r3, [pc, #516]	; (80008fc <CPAL_I2C_DMA_TX_IRQHandler+0x430>)
 80006f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006fa:	f022 0201 	bic.w	r2, r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	b29a      	uxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	4b78      	ldr	r3, [pc, #480]	; (80008f8 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800071c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000720:	b292      	uxth	r2, r2
 8000722:	809a      	strh	r2, [r3, #4]
        
        /* Wait until Busy flag is reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2206      	movs	r2, #6
 8000728:	619a      	str	r2, [r3, #24]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000736:	8b1b      	ldrh	r3, [r3, #24]
 8000738:	b29b      	uxth	r3, r3
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <CPAL_I2C_DMA_TX_IRQHandler+0x288>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d004      	beq.n	8000754 <CPAL_I2C_DMA_TX_IRQHandler+0x288>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000752:	d1ea      	bne.n	800072a <CPAL_I2C_DMA_TX_IRQHandler+0x25e>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d004      	beq.n	8000766 <CPAL_I2C_DMA_TX_IRQHandler+0x29a>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d104      	bne.n	8000770 <CPAL_I2C_DMA_TX_IRQHandler+0x2a4>
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 fb0c 	bl	8000d84 <CPAL_I2C_Timeout>
 800076c:	4603      	mov	r3, r0
 800076e:	e0be      	b.n	80008ee <CPAL_I2C_DMA_TX_IRQHandler+0x422>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f04f 32ff 	mov.w	r2, #4294967295
 8000776:	619a      	str	r2, [r3, #24]
        
        CPAL_LOG("\n\rLOG : I2C Device Slave TX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	731a      	strb	r2, [r3, #12]
 800077e:	e072      	b.n	8000866 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
    } 
    /* Call TX TC UserCallback */
    CPAL_I2C_TXTC_UserCallback(pDevInitStruct);
  }
  /*------------- If HT interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMATX_HTIT(pDevInitStruct->CPAL_Dev)) != 0)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b5e      	ldr	r3, [pc, #376]	; (8000900 <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 8000788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800078c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d013      	beq.n	80007bc <CPAL_I2C_DMA_TX_IRQHandler+0x2f0>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 800079c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b55      	ldr	r3, [pc, #340]	; (8000900 <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 80007aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007ae:	4013      	ands	r3, r2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	bf14      	ite	ne
 80007b4:	2301      	movne	r3, #1
 80007b6:	2300      	moveq	r3, #0
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	e012      	b.n	80007e2 <CPAL_I2C_DMA_TX_IRQHandler+0x316>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b50      	ldr	r3, [pc, #320]	; (8000904 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 80007c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 80007d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007d6:	4013      	ands	r3, r2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d13f      	bne.n	8000866 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
    
    /* Call DMA TX HT UserCallback */
    CPAL_I2C_DMATXHT_UserCallback(pDevInitStruct);
  }  
  /*------------- If TE interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMATX_TEIT(pDevInitStruct->CPAL_Dev)) != 0)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b46      	ldr	r3, [pc, #280]	; (8000908 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 80007ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d013      	beq.n	8000822 <CPAL_I2C_DMA_TX_IRQHandler+0x356>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b40      	ldr	r3, [pc, #256]	; (8000904 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 8000802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 8000810:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000814:	4013      	ands	r3, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	bf14      	ite	ne
 800081a:	2301      	movne	r3, #1
 800081c:	2300      	moveq	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	e012      	b.n	8000848 <CPAL_I2C_DMA_TX_IRQHandler+0x37c>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 800082a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	4b34      	ldr	r3, [pc, #208]	; (8000908 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 8000838:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800083c:	4013      	ands	r3, r2
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf14      	ite	ne
 8000842:	2301      	movne	r3, #1
 8000844:	2300      	moveq	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00c      	beq.n	8000866 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
  { 
    CPAL_LOG("\n\rERROR : I2C Device TX DMA Transfer Error ");
    
    /* Update CPAL_State to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR; 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2210      	movs	r2, #16
 8000850:	731a      	strb	r2, [r3, #12]
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferTx->wNumData = __CPAL_I2C_HAL_DMATX_GET_CNDT(pDevInitStruct->CPAL_Dev);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <CPAL_I2C_DMA_TX_IRQHandler+0x430>)
 800085a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	6852      	ldr	r2, [r2, #4]
 8000864:	605a      	str	r2, [r3, #4]
    /* Call DMA TX TE UserCallback */
    CPAL_I2C_DMATXTE_UserCallback(pDevInitStruct); 
  }  
  
   /* Clear DMA Interrupt Flag */
    __CPAL_I2C_HAL_CLEAR_DMATX_IT(pDevInitStruct->CPAL_Dev);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <CPAL_I2C_DMA_TX_IRQHandler+0x440>)
 800086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000876:	2b00      	cmp	r3, #0
 8000878:	d01c      	beq.n	80008b4 <CPAL_I2C_DMA_TX_IRQHandler+0x3e8>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <CPAL_I2C_DMA_TX_IRQHandler+0x440>)
 8000882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 800088e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000892:	ea42 0103 	orr.w	r1, r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 800089e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 80008aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	e01b      	b.n	80008ec <CPAL_I2C_DMA_TX_IRQHandler+0x420>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <CPAL_I2C_DMA_TX_IRQHandler+0x440>)
 80008bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 80008c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008cc:	ea42 0103 	orr.w	r1, r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 80008d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 80008e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	609a      	str	r2, [r3, #8]
  
  return CPAL_PASS;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000006c 	.word	0x2000006c
 80008fc:	20000078 	.word	0x20000078
 8000900:	08002298 	.word	0x08002298
 8000904:	20000090 	.word	0x20000090
 8000908:	080022a4 	.word	0x080022a4
 800090c:	0800228c 	.word	0x0800228c

08000910 <CPAL_I2C_DMA_RX_IRQHandler>:
  *         used for data reception.  
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_DMA_RX_IRQHandler(CPAL_InitTypeDef* pDevInitStruct)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value to default (no timeout initiated) */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT; 
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f04f 32ff 	mov.w	r2, #4294967295
 800091e:	619a      	str	r2, [r3, #24]
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_DMA_RX_IRQHandler> : I2C Device RX DMA ");
  
  /*------------- If TC interrupt ------------*/
  if ((__CPAL_I2C_HAL_GET_DMARX_TCIT(pDevInitStruct->CPAL_Dev)) != 0)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b94      	ldr	r3, [pc, #592]	; (8000b78 <CPAL_I2C_DMA_RX_IRQHandler+0x268>)
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d013      	beq.n	800095c <CPAL_I2C_DMA_RX_IRQHandler+0x4c>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b90      	ldr	r3, [pc, #576]	; (8000b7c <CPAL_I2C_DMA_RX_IRQHandler+0x26c>)
 800093c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	4b8b      	ldr	r3, [pc, #556]	; (8000b78 <CPAL_I2C_DMA_RX_IRQHandler+0x268>)
 800094a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800094e:	4013      	ands	r3, r2
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	e012      	b.n	8000982 <CPAL_I2C_DMA_RX_IRQHandler+0x72>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b86      	ldr	r3, [pc, #536]	; (8000b7c <CPAL_I2C_DMA_RX_IRQHandler+0x26c>)
 8000964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4b81      	ldr	r3, [pc, #516]	; (8000b78 <CPAL_I2C_DMA_RX_IRQHandler+0x268>)
 8000972:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000976:	4013      	ands	r3, r2
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	f000 80da 	beq.w	8000b3c <CPAL_I2C_DMA_RX_IRQHandler+0x22c>
  {   
    CPAL_LOG("\n\rLOG : I2C Device RX Complete");
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferRx->wNumData = 0;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
       
    /* Call DMA RX TC UserCallback */
    CPAL_I2C_DMARXTC_UserCallback(pDevInitStruct);
    
    /* If DMA Normal model */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_DMARX_CIRCULAR) == 0)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f040 814c 	bne.w	8000c36 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
    {      
      /* If Master Mode selected */
      if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	789b      	ldrb	r3, [r3, #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f040 8086 	bne.w	8000ab4 <CPAL_I2C_DMA_RX_IRQHandler+0x1a4>
      {         
 #ifdef CPAL_I2C_MASTER_MODE 
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b74      	ldr	r3, [pc, #464]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80009b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	4b70      	ldr	r3, [pc, #448]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80009c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009c8:	b292      	uxth	r2, r2
 80009ca:	801a      	strh	r2, [r3, #0]
        
        /* Disable DMA Request and Channel */          
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b6b      	ldr	r3, [pc, #428]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80009d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d8:	889b      	ldrh	r3, [r3, #4]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4b67      	ldr	r3, [pc, #412]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80009e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ec:	b292      	uxth	r2, r2
 80009ee:	809a      	strh	r2, [r3, #4]
        
        /* Wait until Busy flag is reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2206      	movs	r2, #6
 80009f4:	619a      	str	r2, [r3, #24]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b60      	ldr	r3, [pc, #384]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	8b1b      	ldrh	r3, [r3, #24]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <CPAL_I2C_DMA_RX_IRQHandler+0x110>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d004      	beq.n	8000a20 <CPAL_I2C_DMA_RX_IRQHandler+0x110>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1e:	d1ea      	bne.n	80009f6 <CPAL_I2C_DMA_RX_IRQHandler+0xe6>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d004      	beq.n	8000a32 <CPAL_I2C_DMA_RX_IRQHandler+0x122>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a30:	d104      	bne.n	8000a3c <CPAL_I2C_DMA_RX_IRQHandler+0x12c>
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f9a6 	bl	8000d84 <CPAL_I2C_Timeout>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	e140      	b.n	8000cbe <CPAL_I2C_DMA_RX_IRQHandler+0x3ae>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a42:	619a      	str	r2, [r3, #24]
        
        /* Disable DMA Channel */
        __CPAL_I2C_HAL_DISABLE_DMARX(pDevInitStruct->CPAL_Dev);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b4e      	ldr	r3, [pc, #312]	; (8000b84 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 8000a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 8000a5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a5e:	f022 0201 	bic.w	r2, r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b45      	ldr	r3, [pc, #276]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a70:	889b      	ldrh	r3, [r3, #4]
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000a7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a84:	b292      	uxth	r2, r2
 8000a86:	809a      	strh	r2, [r3, #4]
        
        /* Disable DMA automatic NACK generation */
        __CPAL_I2C_HAL_DISABLE_LAST(pDevInitStruct->CPAL_Dev);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a94:	889b      	ldrh	r3, [r3, #4]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000aa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000aa8:	b292      	uxth	r2, r2
 8000aaa:	809a      	strh	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device Master RX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	731a      	strb	r2, [r3, #12]
 8000ab2:	e0c0      	b.n	8000c36 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
        /* Call RX TC UserCallback */
        CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
      
 #endif /* CPAL_I2C_MASTER_MODE */        
      }      
      else if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) != 0))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	f040 80bc 	bne.w	8000c36 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80b5 	beq.w	8000c36 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
      {     
 #ifdef CPAL_I2C_SLAVE_MODE     
        /* Disable DMA Request */          
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);          
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000ae4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aec:	b292      	uxth	r2, r2
 8000aee:	809a      	strh	r2, [r3, #4]
        
        /* Disable DMA Channel */
        __CPAL_I2C_HAL_DISABLE_DMARX(pDevInitStruct->CPAL_Dev);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 8000af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 8000b06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b0a:	f022 0201 	bic.w	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1c:	889b      	ldrh	r3, [r3, #4]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8000b28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b30:	b292      	uxth	r2, r2
 8000b32:	809a      	strh	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device Slave RX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	731a      	strb	r2, [r3, #12]
 8000b3a:	e07c      	b.n	8000c36 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
      /* Call RX TC UserCallback */
      CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
    }
  }  
  /*------------- If HT interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMARX_HTIT(pDevInitStruct->CPAL_Dev)) != 0)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <CPAL_I2C_DMA_RX_IRQHandler+0x278>)
 8000b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d01d      	beq.n	8000b8c <CPAL_I2C_DMA_RX_IRQHandler+0x27c>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <CPAL_I2C_DMA_RX_IRQHandler+0x26c>)
 8000b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <CPAL_I2C_DMA_RX_IRQHandler+0x278>)
 8000b66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	e01c      	b.n	8000bb2 <CPAL_I2C_DMA_RX_IRQHandler+0x2a2>
 8000b78:	080022b0 	.word	0x080022b0
 8000b7c:	20000090 	.word	0x20000090
 8000b80:	2000006c 	.word	0x2000006c
 8000b84:	20000084 	.word	0x20000084
 8000b88:	080022bc 	.word	0x080022bc
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8000b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <CPAL_I2C_DMA_RX_IRQHandler+0x3bc>)
 8000ba2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d13f      	bne.n	8000c36 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
    
    /* Call DMA RX HT UserCallback */
    CPAL_I2C_DMARXHT_UserCallback(pDevInitStruct);
  }  
  /*------------- If TE interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMARX_TEIT(pDevInitStruct->CPAL_Dev)) != 0)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d013      	beq.n	8000bf2 <CPAL_I2C_DMA_RX_IRQHandler+0x2e2>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8000bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 8000be0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	e012      	b.n	8000c18 <CPAL_I2C_DMA_RX_IRQHandler+0x308>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8000bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 8000c08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00c      	beq.n	8000c36 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
  {   
    CPAL_LOG("\n\rERROR : I2C Device RX DMA Transfer Error ");
    
    /* Update CPAL_State to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR; 
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2210      	movs	r2, #16
 8000c20:	731a      	strb	r2, [r3, #12]
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferRx->wNumData = __CPAL_I2C_HAL_DMARX_GET_CNDT(pDevInitStruct->CPAL_Dev);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <CPAL_I2C_DMA_RX_IRQHandler+0x3c4>)
 8000c2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	6852      	ldr	r2, [r2, #4]
 8000c34:	605a      	str	r2, [r3, #4]
    /* Call DMA RX TE UserCallback */
    CPAL_I2C_DMARXTE_UserCallback(pDevInitStruct); 
  }
  
  /* Clear DMA Interrupt Flag */
  __CPAL_I2C_HAL_CLEAR_DMARX_IT(pDevInitStruct->CPAL_Dev);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <CPAL_I2C_DMA_RX_IRQHandler+0x3c8>)
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d01c      	beq.n	8000c84 <CPAL_I2C_DMA_RX_IRQHandler+0x374>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <CPAL_I2C_DMA_RX_IRQHandler+0x3c8>)
 8000c52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <CPAL_I2C_DMA_RX_IRQHandler+0x3bc>)
 8000c5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c62:	ea42 0103 	orr.w	r1, r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 8000c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8000c7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	e01b      	b.n	8000cbc <CPAL_I2C_DMA_RX_IRQHandler+0x3ac>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <CPAL_I2C_DMA_RX_IRQHandler+0x3c8>)
 8000c8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <CPAL_I2C_DMA_RX_IRQHandler+0x3bc>)
 8000c98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c9c:	ea42 0103 	orr.w	r1, r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 8000ca8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8000cb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	609a      	str	r2, [r3, #8]
  
  return CPAL_PASS;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000090 	.word	0x20000090
 8000ccc:	080022bc 	.word	0x080022bc
 8000cd0:	080022c8 	.word	0x080022c8
 8000cd4:	20000084 	.word	0x20000084
 8000cd8:	080022b0 	.word	0x080022b0

08000cdc <SysTick_Handler>:
  * @brief  This function Manages I2C Timeouts when waiting for specific events.
  * @param  None
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
void CPAL_I2C_TIMEOUT_Manager(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  uint32_t index = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
  
  /* Manage I2C timeouts conditions */
  for (index = 0; index < CPAL_I2C_DEV_NUM; index ++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e040      	b.n	8000d6e <SysTick_Handler+0x92>
  {
    if (I2C_DevStructures[index] != pNULL)
 8000cec:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <SysTick_Handler+0xa4>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d037      	beq.n	8000d68 <SysTick_Handler+0x8c>
    {
      /* If Timeout occurred  */
      if (I2C_DevStructures[index]->wCPAL_Timeout == CPAL_I2C_TIMEOUT_DETECTED)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <SysTick_Handler+0xa4>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d121      	bne.n	8000d4a <SysTick_Handler+0x6e>
      {
        /* Reinitialize Timeout Value */
        I2C_DevStructures[index]->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8000d06:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <SysTick_Handler+0xa4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d12:	619a      	str	r2, [r3, #24]
        
        /* update CPAL_State to CPAL_STATE_ERROR */
        I2C_DevStructures[index]->CPAL_State = CPAL_STATE_ERROR;
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <SysTick_Handler+0xa4>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	731a      	strb	r2, [r3, #12]
        
        /* In case of Device Error Timeout_Callback should not be called */
        if (I2C_DevStructures[index]->wCPAL_DevError == CPAL_I2C_ERR_NONE)
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <SysTick_Handler+0xa4>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d11c      	bne.n	8000d68 <SysTick_Handler+0x8c>
        {        
          /* update wCPAL_DevError to CPAL_I2C_ERR_TIMEOUT */
          I2C_DevStructures[index]->wCPAL_DevError = CPAL_I2C_ERR_TIMEOUT;
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <SysTick_Handler+0xa4>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	611a      	str	r2, [r3, #16]
          
          CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_TIMEOUT_Manager> : I2C Device Timeout Error");
          
          /* Call CPAL_TIMEOUT_UserCallback */
          CPAL_TIMEOUT_UserCallback(I2C_DevStructures[index]);
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <SysTick_Handler+0xa4>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f924 	bl	8001f90 <CPAL_TIMEOUT_UserCallback>
 8000d48:	e00e      	b.n	8000d68 <SysTick_Handler+0x8c>
        }              
      }     
       /* If Timeout is triggered (wCPAL_Timeout != CPAL_I2C_TIMEOUT_DEFAULT)*/
      else if (I2C_DevStructures[index]->wCPAL_Timeout != CPAL_I2C_TIMEOUT_DEFAULT)
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <SysTick_Handler+0xa4>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d006      	beq.n	8000d68 <SysTick_Handler+0x8c>
      {
        /* Decrement the timeout value */
        I2C_DevStructures[index]->wCPAL_Timeout--;
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <SysTick_Handler+0xa4>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	3a01      	subs	r2, #1
 8000d66:	619a      	str	r2, [r3, #24]
  for (index = 0; index < CPAL_I2C_DEV_NUM; index ++)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d9bb      	bls.n	8000cec <SysTick_Handler+0x10>
      } 
    }
  }  
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000

08000d84 <CPAL_I2C_Timeout>:
  * @brief  This function Manages I2C Timeouts when Timeout occurred.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Timeout (CPAL_InitTypeDef* pDevInitStruct)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d92:	619a      	str	r2, [r3, #24]
  
  /* update CPAL_State to CPAL_STATE_ERROR */
  pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2210      	movs	r2, #16
 8000d98:	731a      	strb	r2, [r3, #12]
  
  /* update wCPAL_DevError to CPAL_I2C_ERR_TIMEOUT */
  pDevInitStruct->wCPAL_DevError = CPAL_I2C_ERR_TIMEOUT;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	22ff      	movs	r2, #255	; 0xff
 8000d9e:	611a      	str	r2, [r3, #16]
  
  /* Call Timeout Callback and quit current function */
  return (CPAL_TIMEOUT_UserCallback(pDevInitStruct));
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f001 f8f5 	bl	8001f90 <CPAL_TIMEOUT_UserCallback>
 8000da6:	4603      	mov	r3, r0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <I2C_MASTER_START_Handle>:
  * @brief  Handles Master Start condition (SB) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_START_Handle(CPAL_InitTypeDef* pDevInitStruct)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  #ifdef CPAL_I2C_10BIT_ADDR_MODE  
  /* Declare local variable that contains Address Header */
  uint8_t I2CHeaderAddress = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
  #endif /* CPAL_I2C_10BIT_ADDR_MODE */

  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc2:	619a      	str	r2, [r3, #24]
  CPAL_LOG("\n\r\n\rLOG <I2C_EV_IRQHandler> : I2C Device Master IT"); 
  
  CPAL_LOG("\n\rLOG : I2C Device Start Acknowledged"); 
  
  /* If 7 bit Addressing Mode selected */
  if (pDevInitStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress == I2C_AcknowledgedAddress_7bit)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	899b      	ldrh	r3, [r3, #12]
 8000dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dce:	d12d      	bne.n	8000e2c <I2C_MASTER_START_Handle+0x7c>
  {        
    CPAL_LOG("\n\rLOG : I2C Device 7bit Address");
    
    /* Send Address */
    /* If Master run as receiver */
    if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7b1b      	ldrb	r3, [r3, #12]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d112      	bne.n	8000e00 <I2C_MASTER_START_Handle+0x50>
    {
      /* Send Slave address with bit0 set for read */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr1) | I2C_OAR1_ADD0));  
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <I2C_MASTER_START_Handle+0x100>)
 8000df0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000df4:	b292      	uxth	r2, r2
 8000df6:	821a      	strh	r2, [r3, #16]
      
      /* Update CPAL_State to CPAL_STATE_BUSY */
      pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_RX; 
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	731a      	strb	r2, [r3, #12]
 8000dfe:	e011      	b.n	8000e24 <I2C_MASTER_START_Handle+0x74>
    }    
    /* If Master run as Transmitter */
    else
    {
      /* Send Slave address with bit0 reset for write */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr1) & (~I2C_OAR1_ADD0)));        
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <I2C_MASTER_START_Handle+0x100>)
 8000e12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	821a      	strh	r2, [r3, #16]
      
      /* Update CPAL_State to CPAL_STATE_BUSY */
      pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_TX; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2206      	movs	r2, #6
 8000e22:	731a      	strb	r2, [r3, #12]
    }
    
    CPAL_LOG("\n\rLOG : I2C Device Target Address Sent");
    
    /* Initialize Timeout value */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_ADDR;             
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2204      	movs	r2, #4
 8000e28:	619a      	str	r2, [r3, #24]
 8000e2a:	e03a      	b.n	8000ea2 <I2C_MASTER_START_Handle+0xf2>
  else
  {  
    CPAL_LOG("\n\rLOG : I2C Device 10bit Address");
    								      
    /* If Master run as receiver */
    if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7b1b      	ldrb	r3, [r3, #12]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d10b      	bne.n	8000e4e <I2C_MASTER_START_Handle+0x9e>
    {
      /* Calculate RX Header Address  */ 
      I2CHeaderAddress = ((((pDevInitStruct->pCPAL_TransferRx->wAddr1) & 0xFF00) >>7) | 0xF0);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	09db      	lsrs	r3, r3, #7
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f003 030e 	and.w	r3, r3, #14
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f063 030f 	orn	r3, r3, #15
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e01d      	b.n	8000e8a <I2C_MASTER_START_Handle+0xda>
    }    
    /* If Master run as Transmitter */
    else if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7b1b      	ldrb	r3, [r3, #12]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d10b      	bne.n	8000e70 <I2C_MASTER_START_Handle+0xc0>
    {
      /* Calculate TX Header Address */ 
      I2CHeaderAddress = ((((pDevInitStruct->pCPAL_TransferTx->wAddr1) & 0xFF00) >>7) | 0xF0); 
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	09db      	lsrs	r3, r3, #7
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f003 030e 	and.w	r3, r3, #14
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f063 030f 	orn	r3, r3, #15
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e00c      	b.n	8000e8a <I2C_MASTER_START_Handle+0xda>
    }      
    /* If Master run as Receiver */
    else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7b1b      	ldrb	r3, [r3, #12]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b0a      	cmp	r3, #10
 8000e78:	d107      	bne.n	8000e8a <I2C_MASTER_START_Handle+0xda>
    {
      /* Calculate RX Header Address */ 
      I2CHeaderAddress = ((((pDevInitStruct->pCPAL_TransferRx->wAddr1) & 0xFF00) >>7) | 0xF1);       
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	09db      	lsrs	r3, r3, #7
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f063 030e 	orn	r3, r3, #14
 8000e88:	73fb      	strb	r3, [r7, #15]
    }       
    
     /* Send Header */ 
    __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), I2CHeaderAddress); 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <I2C_MASTER_START_Handle+0x100>)
 8000e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	b292      	uxth	r2, r2
 8000e9a:	821a      	strh	r2, [r3, #16]
    
    CPAL_LOG("\n\rLOG : I2C Device Target Header Sent "); 
    
    /* Initialize Timeout value */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_ADD10;                 
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	619a      	str	r2, [r3, #24]
    /* Activate POS bit */
    __CPAL_I2C_HAL_ENABLE_POS(pDevInitStruct->CPAL_Dev);
  }
 #endif /* CPAL_I2C_CLOSECOM_METHOD2 */
#endif  
  return CPAL_PASS;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	2000006c 	.word	0x2000006c

08000eb4 <I2C_MASTER_ADDR_Handle>:
  * @brief  Handles Master address matched (ADDR) interrupt event. 
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_ADDR_Handle(CPAL_InitTypeDef* pDevInitStruct)
{     
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Initialize Timeout value (1 ms for each data to be sent/received) */
  if (pDevInitStruct->CPAL_ProgModel != CPAL_PROGMODEL_DMA)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	78db      	ldrb	r3, [r3, #3]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d004      	beq.n	8000ece <I2C_MASTER_ADDR_Handle+0x1a>
  {
    /* Reinitialize Timeout Value to default (no timeout initiated) */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;                
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	e01b      	b.n	8000f06 <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7b1b      	ldrb	r3, [r3, #12]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b06      	cmp	r3, #6
 8000ed6:	d106      	bne.n	8000ee6 <I2C_MASTER_ADDR_Handle+0x32>
  {
    /* Set 1ms timeout for each data transfer in case of DMA Tx mode */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + pDevInitStruct->pCPAL_TransferTx->wNumData;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	e00f      	b.n	8000f06 <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7b1b      	ldrb	r3, [r3, #12]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b0a      	cmp	r3, #10
 8000eee:	d106      	bne.n	8000efe <I2C_MASTER_ADDR_Handle+0x4a>
  {
    /* Set 1ms timeout for each data transfer in case of DMA Rx mode */ 
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + pDevInitStruct->pCPAL_TransferRx->wNumData;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	e003      	b.n	8000f06 <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else
  {
    /* Reinitialize Timeout Value to default (no timeout initiated) */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;        
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	619a      	str	r2, [r3, #24]
  }
  
  if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 0))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7b1b      	ldrb	r3, [r3, #12]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b0a      	cmp	r3, #10
 8000f0e:	d12c      	bne.n	8000f6a <I2C_MASTER_ADDR_Handle+0xb6>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	78db      	ldrb	r3, [r3, #3]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d128      	bne.n	8000f6a <I2C_MASTER_ADDR_Handle+0xb6>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d123      	bne.n	8000f6a <I2C_MASTER_ADDR_Handle+0xb6>
  {    
    /* Program STOP bit then clear ADDR flag */
    __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev); 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b9b      	ldr	r3, [pc, #620]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4b97      	ldr	r3, [pc, #604]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000f3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f42:	b292      	uxth	r2, r2
 8000f44:	801a      	strh	r2, [r3, #0]
    __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b92      	ldr	r3, [pc, #584]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f52:	8a9b      	ldrh	r3, [r3, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b8f      	ldr	r3, [pc, #572]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Update CPAL_State to CPAL_STATE_READY */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	731a      	strb	r2, [r3, #12]
 8000f68:	e189      	b.n	800127e <I2C_MASTER_ADDR_Handle+0x3ca>
  }
  else
  {
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7b1b      	ldrb	r3, [r3, #12]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b0a      	cmp	r3, #10
 8000f72:	d107      	bne.n	8000f84 <I2C_MASTER_ADDR_Handle+0xd0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d103      	bne.n	8000f84 <I2C_MASTER_ADDR_Handle+0xd0>
    {       
      /* Switch Programing Mode Enable DMA or IT Buffer */
      CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_RX);
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fe4e 	bl	8001c20 <CPAL_I2C_Enable_DMA_IT>
    }
  
#if defined (STM32L1XX_MD) || defined (STM32L1XX_HD) || defined (STM32F2XX) || defined (STM32F4XX) 
    /* If CPAL_State is CPAL_STATE_BUSY_RX and receiving one byte */  
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 1))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7b1b      	ldrb	r3, [r3, #12]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	d137      	bne.n	8000ffe <I2C_MASTER_ADDR_Handle+0x14a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d132      	bne.n	8000ffe <I2C_MASTER_ADDR_Handle+0x14a>
    { 
      /* Disable Acknowledge */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4b7a      	ldr	r3, [pc, #488]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fb8:	b292      	uxth	r2, r2
 8000fba:	801a      	strh	r2, [r3, #0]
      
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);   
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b75      	ldr	r3, [pc, #468]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	8a9b      	ldrh	r3, [r3, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd6:	8b1b      	ldrh	r3, [r3, #24]
      
      /* Program Generation of Stop Condition */
      __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8000ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff8:	b292      	uxth	r2, r2
 8000ffa:	801a      	strh	r2, [r3, #0]
 8000ffc:	e04e      	b.n	800109c <I2C_MASTER_ADDR_Handle+0x1e8>
    }  
    else if ((pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT) &&(pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 2))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d13c      	bne.n	8001080 <I2C_MASTER_ADDR_Handle+0x1cc>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7b1b      	ldrb	r3, [r3, #12]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b0a      	cmp	r3, #10
 800100e:	d137      	bne.n	8001080 <I2C_MASTER_ADDR_Handle+0x1cc>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d132      	bne.n	8001080 <I2C_MASTER_ADDR_Handle+0x1cc>
    {
      /* Disable Acknowledge */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4b59      	ldr	r3, [pc, #356]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800103a:	b292      	uxth	r2, r2
 800103c:	801a      	strh	r2, [r3, #0]
      
      /* Enable Pos */
      __CPAL_I2C_HAL_ENABLE_POS(pDevInitStruct->CPAL_Dev);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b54      	ldr	r3, [pc, #336]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4b50      	ldr	r3, [pc, #320]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001056:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800105a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800105e:	b292      	uxth	r2, r2
 8001060:	801a      	strh	r2, [r3, #0]
      
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);      
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	8a9b      	ldrh	r3, [r3, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b48      	ldr	r3, [pc, #288]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	8b1b      	ldrh	r3, [r3, #24]
 800107e:	e00d      	b.n	800109c <I2C_MASTER_ADDR_Handle+0x1e8>
    }
    else
    {
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	8a9b      	ldrh	r3, [r3, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109a:	8b1b      	ldrh	r3, [r3, #24]
 #endif /* CPAL_I2C_CLOSECOM_METHOD2 */ 
#endif /* STM32L1XX_MD || STM32L1XX_HD || STM32F2XX || STM32F4XX */
  
#ifdef CPAL_I2C_10BIT_ADDR_MODE
    /* If CPAL_State is not CPAL_STATE_BUSY */
    if (((pDevInitStruct->CPAL_State & (CPAL_STATE_READY_TX | CPAL_STATE_READY_RX)) != 0) 
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7b1b      	ldrb	r3, [r3, #12]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d02c      	beq.n	8001104 <I2C_MASTER_ADDR_Handle+0x250>
        && (pDevInitStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress == I2C_AcknowledgedAddress_10bit))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	899b      	ldrh	r3, [r3, #12]
 80010b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80010b4:	d126      	bne.n	8001104 <I2C_MASTER_ADDR_Handle+0x250>
    {        
      /* If Master run as receiver */
      if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7b1b      	ldrb	r3, [r3, #12]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d117      	bne.n	80010f0 <I2C_MASTER_ADDR_Handle+0x23c>
      {
        /* Update CPAL_State to CPAL_STATE_BUSY_RX */
        pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_RX; 
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	220a      	movs	r2, #10
 80010c4:	731a      	strb	r2, [r3, #12]
        
        CPAL_LOG("\n\rLOG : I2C Device Busy RX");
        
        /* Generate Repeated start bit  */
        __CPAL_I2C_HAL_START(pDevInitStruct->CPAL_Dev);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80010de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010e6:	b292      	uxth	r2, r2
 80010e8:	801a      	strh	r2, [r3, #0]
        
        /* Initialize Timeout value */
        pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_SB;          
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	221f      	movs	r2, #31
 80010ee:	619a      	str	r2, [r3, #24]
      }
      
      /* If Master run as Transmitter */
      if  (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7b1b      	ldrb	r3, [r3, #12]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	f040 80c1 	bne.w	800127e <I2C_MASTER_ADDR_Handle+0x3ca>
      {
        /* Update CPAL_State to CPAL_STATE_BUSY_TX */
        pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_TX; 
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2206      	movs	r2, #6
 8001100:	731a      	strb	r2, [r3, #12]
      if  (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 8001102:	e0bc      	b.n	800127e <I2C_MASTER_ADDR_Handle+0x3ca>
        
        CPAL_LOG("\n\rLOG : I2C Device Busy TX");
      }
    }
    else if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0)      
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 80b6 	bne.w	800127e <I2C_MASTER_ADDR_Handle+0x3ca>
      /* If CPAL_OPT_NO_MEM_ADDR is not enabled */
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0)
#endif  /* CPAL_I2C_10BIT_ADDR_MODE */
      {
        /* If CPAL_State is CPAL_STATE_BUSY_TX */  
        if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7b1b      	ldrb	r3, [r3, #12]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b06      	cmp	r3, #6
 800111a:	f040 80ac 	bne.w	8001276 <I2C_MASTER_ADDR_Handle+0x3c2>
        {         
          /* If 8 Bit register mode */
          if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_16BIT_REG) == 0)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d138      	bne.n	800119c <I2C_MASTER_ADDR_Handle+0x2e8>
          {
            /* Send Register Address */
            __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr2)& 0x00FF)); 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800113a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800113e:	b292      	uxth	r2, r2
 8001140:	821a      	strh	r2, [r3, #16]
            
            /* Wait until TXE flag is set */ 
            __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE);              
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	619a      	str	r2, [r3, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	8a9b      	ldrh	r3, [r3, #20]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115c:	2b00      	cmp	r3, #0
 800115e:	d108      	bne.n	8001172 <I2C_MASTER_ADDR_Handle+0x2be>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d004      	beq.n	8001172 <I2C_MASTER_ADDR_Handle+0x2be>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d1ea      	bne.n	8001148 <I2C_MASTER_ADDR_Handle+0x294>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d004      	beq.n	8001184 <I2C_MASTER_ADDR_Handle+0x2d0>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001182:	d104      	bne.n	800118e <I2C_MASTER_ADDR_Handle+0x2da>
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fdfd 	bl	8000d84 <CPAL_I2C_Timeout>
 800118a:	4603      	mov	r3, r0
 800118c:	e078      	b.n	8001280 <I2C_MASTER_ADDR_Handle+0x3cc>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	619a      	str	r2, [r3, #24]
 8001196:	e06e      	b.n	8001276 <I2C_MASTER_ADDR_Handle+0x3c2>
 8001198:	2000006c 	.word	0x2000006c
#ifdef CPAL_16BIT_REG_OPTION
          /* If 16 Bit register mode */
          else
          {
            /* Send MSB Register Address */
            __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(((pDevInitStruct->pCPAL_TransferTx->wAddr2)& 0xFF00) >>8));  
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	0a1b      	lsrs	r3, r3, #8
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <I2C_MASTER_ADDR_Handle+0x3d4>)
 80011ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011b2:	b292      	uxth	r2, r2
 80011b4:	821a      	strh	r2, [r3, #16]
            
            /* Wait until TXE flag is set */ 
            __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	619a      	str	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <I2C_MASTER_ADDR_Handle+0x3d4>)
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	8a9b      	ldrh	r3, [r3, #20]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d108      	bne.n	80011e6 <I2C_MASTER_ADDR_Handle+0x332>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d004      	beq.n	80011e6 <I2C_MASTER_ADDR_Handle+0x332>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d1ea      	bne.n	80011bc <I2C_MASTER_ADDR_Handle+0x308>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d004      	beq.n	80011f8 <I2C_MASTER_ADDR_Handle+0x344>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f6:	d104      	bne.n	8001202 <I2C_MASTER_ADDR_Handle+0x34e>
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fdc3 	bl	8000d84 <CPAL_I2C_Timeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	e03e      	b.n	8001280 <I2C_MASTER_ADDR_Handle+0x3cc>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	619a      	str	r2, [r3, #24]
            
            /* Send LSB Register Address */
            __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr2)& 0x00FF));  
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <I2C_MASTER_ADDR_Handle+0x3d4>)
 800121a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800121e:	b292      	uxth	r2, r2
 8001220:	821a      	strh	r2, [r3, #16]
            
            /* Wait until TXE flag is set */ 
            __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2203      	movs	r2, #3
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <I2C_MASTER_ADDR_Handle+0x3d4>)
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	8a9b      	ldrh	r3, [r3, #20]
 8001236:	b29b      	uxth	r3, r3
 8001238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123c:	2b00      	cmp	r3, #0
 800123e:	d108      	bne.n	8001252 <I2C_MASTER_ADDR_Handle+0x39e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d004      	beq.n	8001252 <I2C_MASTER_ADDR_Handle+0x39e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d1ea      	bne.n	8001228 <I2C_MASTER_ADDR_Handle+0x374>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d004      	beq.n	8001264 <I2C_MASTER_ADDR_Handle+0x3b0>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001262:	d104      	bne.n	800126e <I2C_MASTER_ADDR_Handle+0x3ba>
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fd8d 	bl	8000d84 <CPAL_I2C_Timeout>
 800126a:	4603      	mov	r3, r0
 800126c:	e008      	b.n	8001280 <I2C_MASTER_ADDR_Handle+0x3cc>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	619a      	str	r2, [r3, #24]
          }     
#endif /* CPAL_16BIT_REG_OPTION */
        }  
        
        /* Switch Programing Mode Enable DMA or IT Buffer */
        CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_TXRX);   
 8001276:	2103      	movs	r1, #3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fcd1 	bl	8001c20 <CPAL_I2C_Enable_DMA_IT>
      }      
  }
  return CPAL_PASS;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000006c 	.word	0x2000006c

0800128c <I2C_MASTER_ADD10_Handle>:
  * @brief  Handles Master 10bit address matched (ADD10) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_ADD10_Handle(CPAL_InitTypeDef* pDevInitStruct)
{ 
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 32ff 	mov.w	r2, #4294967295
 800129a:	619a      	str	r2, [r3, #24]
  
  CPAL_LOG("\n\rLOG : I2C Device Header Address Acknowledged");
  
  /* Send Address */
  /* If Master run as receiver */
  if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7b1b      	ldrb	r3, [r3, #12]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d10c      	bne.n	80012c0 <I2C_MASTER_ADD10_Handle+0x34>
  {
    /* Send Slave Address */
    __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(pDevInitStruct->pCPAL_TransferRx->wAddr1));  
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <I2C_MASTER_ADD10_Handle+0x6c>)
 80012b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012ba:	b292      	uxth	r2, r2
 80012bc:	821a      	strh	r2, [r3, #16]
 80012be:	e010      	b.n	80012e2 <I2C_MASTER_ADD10_Handle+0x56>
  }  
  /* If Master run as Transmitter */
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7b1b      	ldrb	r3, [r3, #12]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d10b      	bne.n	80012e2 <I2C_MASTER_ADD10_Handle+0x56>
  {
    /* Send Slave Address */
    __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(pDevInitStruct->pCPAL_TransferTx->wAddr1));        
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <I2C_MASTER_ADD10_Handle+0x6c>)
 80012da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012de:	b292      	uxth	r2, r2
 80012e0:	821a      	strh	r2, [r3, #16]
  }
  
  CPAL_LOG("\n\rLOG : I2C Device Target Address Sent");  
  
  /* Initialize Timeout value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_ADDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	619a      	str	r2, [r3, #24]
  
  return CPAL_PASS;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000006c 	.word	0x2000006c

080012fc <I2C_MASTER_TXE_Handle>:
  * @brief  Handles Master transmission (TXE) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_TXE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	78db      	ldrb	r3, [r3, #3]
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 80bc 	bne.w	8001486 <I2C_MASTER_TXE_Handle+0x18a>
  {                   
    /* If Buffer end */
    if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d01c      	beq.n	8001352 <I2C_MASTER_TXE_Handle+0x56>
    {   
      /* Call TX UserCallback */
      CPAL_I2C_TX_UserCallback(pDevInitStruct);
      
      /* Write Byte */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (*(pDevInitStruct->pCPAL_TransferTx->pbBuffer))); 
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 8001328:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800132c:	b292      	uxth	r2, r2
 800132e:	821a      	strh	r2, [r3, #16]
      
      /* Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferTx->wNumData--;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	3a01      	subs	r2, #1
 8001338:	605a      	str	r2, [r3, #4]
      
      /* If Buffer end */
      if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80a0 	beq.w	8001486 <I2C_MASTER_TXE_Handle+0x18a>
      {  
        /* Point to next data */
        pDevInitStruct->pCPAL_TransferTx->pbBuffer++;      
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	3201      	adds	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e099      	b.n	8001486 <I2C_MASTER_TXE_Handle+0x18a>
      }
    }    
    else 
    {
      /* No Stop Condition Generation option bit not selected */ 
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d111      	bne.n	8001382 <I2C_MASTER_TXE_Handle+0x86>
      {      
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 8001366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	b29a      	uxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 8001376:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800137a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800137e:	b292      	uxth	r2, r2
 8001380:	801a      	strh	r2, [r3, #0]
      }
      
      CPAL_LOG("\n\rLOG : I2C Device TX Complete");
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 800138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	b29a      	uxth	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 800139a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800139e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013a2:	b292      	uxth	r2, r2
 80013a4:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device TX EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b38      	ldr	r3, [pc, #224]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 80013be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c6:	b292      	uxth	r2, r2
 80013c8:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device TX BUFF IT Disabled");
      
      /* No Stop Condition Generation option bit not selected */ 
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d12a      	bne.n	800142c <I2C_MASTER_TXE_Handle+0x130>
      { 
        /* Wait until BTF and TXE flags are reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev) & (I2C_SR1_BTF | I2C_SR1_TXE )), CPAL_I2C_TIMEOUT_BUSY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2206      	movs	r2, #6
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	8a9b      	ldrh	r3, [r3, #20]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f003 0384 	and.w	r3, r3, #132	; 0x84
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <I2C_MASTER_TXE_Handle+0x10a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d004      	beq.n	8001406 <I2C_MASTER_TXE_Handle+0x10a>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d1ea      	bne.n	80013dc <I2C_MASTER_TXE_Handle+0xe0>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d004      	beq.n	8001418 <I2C_MASTER_TXE_Handle+0x11c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001416:	d104      	bne.n	8001422 <I2C_MASTER_TXE_Handle+0x126>
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fcb3 	bl	8000d84 <CPAL_I2C_Timeout>
 800141e:	4603      	mov	r3, r0
 8001420:	e032      	b.n	8001488 <I2C_MASTER_TXE_Handle+0x18c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	619a      	str	r2, [r3, #24]
 800142a:	e029      	b.n	8001480 <I2C_MASTER_TXE_Handle+0x184>
      }
      else
      {
        /* Wait until BTF flags is reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev) & I2C_SR1_TXE ), CPAL_I2C_TIMEOUT_BUSY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2206      	movs	r2, #6
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <I2C_MASTER_TXE_Handle+0x194>)
 800143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143e:	8a9b      	ldrh	r3, [r3, #20]
 8001440:	b29b      	uxth	r3, r3
 8001442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001446:	2b00      	cmp	r3, #0
 8001448:	d008      	beq.n	800145c <I2C_MASTER_TXE_Handle+0x160>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d004      	beq.n	800145c <I2C_MASTER_TXE_Handle+0x160>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145a:	d1ea      	bne.n	8001432 <I2C_MASTER_TXE_Handle+0x136>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d004      	beq.n	800146e <I2C_MASTER_TXE_Handle+0x172>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d104      	bne.n	8001478 <I2C_MASTER_TXE_Handle+0x17c>
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fc88 	bl	8000d84 <CPAL_I2C_Timeout>
 8001474:	4603      	mov	r3, r0
 8001476:	e007      	b.n	8001488 <I2C_MASTER_TXE_Handle+0x18c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f04f 32ff 	mov.w	r2, #4294967295
 800147e:	619a      	str	r2, [r3, #24]
        
      }
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	731a      	strb	r2, [r3, #12]
      /* Call TX Transfer complete Callback */
      CPAL_I2C_TXTC_UserCallback(pDevInitStruct);       
    }        
  }
  
  return CPAL_PASS;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000006c 	.word	0x2000006c

08001494 <I2C_MASTER_RXNE_Handle>:
  * @brief  Handles Master reception (RXNE flag) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_RXNE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{  
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78db      	ldrb	r3, [r3, #3]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f040 821c 	bne.w	80018de <I2C_MASTER_RXNE_Handle+0x44a>
  {  
#if defined (STM32L1XX_MD) || defined (STM32L1XX_HD) || defined (STM32F2XX) || defined (STM32F4XX)
    /* if less than 3 bytes remaining for reception */ 
    if (pDevInitStruct->pCPAL_TransferRx->wNumData <= 3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	f200 8167 	bhi.w	8001780 <I2C_MASTER_RXNE_Handle+0x2ec>
    {  
      /* One byte */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d111      	bne.n	80014e0 <I2C_MASTER_RXNE_Handle+0x4c>
      {              
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b8e      	ldr	r3, [pc, #568]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	8a1b      	ldrh	r3, [r3, #16]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;   
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	3a01      	subs	r2, #1
 80014de:	605a      	str	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Stop Programmed");
      }
      
      /* Two bytes */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d176      	bne.n	80015d8 <I2C_MASTER_RXNE_Handle+0x144>
      {           
        /* Disable Buffer interrupt */
        __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b82      	ldr	r3, [pc, #520]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 80014f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4b7e      	ldr	r3, [pc, #504]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 8001502:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800150a:	b292      	uxth	r2, r2
 800150c:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2205      	movs	r2, #5
 8001512:	619a      	str	r2, [r3, #24]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b78      	ldr	r3, [pc, #480]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	8a9b      	ldrh	r3, [r3, #20]
 8001522:	b29b      	uxth	r3, r3
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d108      	bne.n	800153e <I2C_MASTER_RXNE_Handle+0xaa>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d004      	beq.n	800153e <I2C_MASTER_RXNE_Handle+0xaa>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d1ea      	bne.n	8001514 <I2C_MASTER_RXNE_Handle+0x80>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d004      	beq.n	8001550 <I2C_MASTER_RXNE_Handle+0xbc>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154e:	d104      	bne.n	800155a <I2C_MASTER_RXNE_Handle+0xc6>
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fc17 	bl	8000d84 <CPAL_I2C_Timeout>
 8001556:	4603      	mov	r3, r0
 8001558:	e1c2      	b.n	80018e0 <I2C_MASTER_RXNE_Handle+0x44c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	619a      	str	r2, [r3, #24]
        
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4b64      	ldr	r3, [pc, #400]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	4b60      	ldr	r3, [pc, #384]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 800157a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800157e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001582:	b292      	uxth	r2, r2
 8001584:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 800158e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001592:	8a1b      	ldrh	r3, [r3, #16]
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	3201      	adds	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	3a01      	subs	r2, #1
 80015b2:	605a      	str	r2, [r3, #4]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b50      	ldr	r3, [pc, #320]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	8a1b      	ldrh	r3, [r3, #16]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
        
        /*Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;           
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	3a01      	subs	r2, #1
 80015d6:	605a      	str	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Stop Programmed");
      }
      
      /* 3 Last bytes */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	f040 80e5 	bne.w	80017ae <I2C_MASTER_RXNE_Handle+0x31a>
      {
        /* Disable Buffer interrupt */
        __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	4b40      	ldr	r3, [pc, #256]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 80015fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001604:	b292      	uxth	r2, r2
 8001606:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2205      	movs	r2, #5
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	4b39      	ldr	r3, [pc, #228]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	8a9b      	ldrh	r3, [r3, #20]
 800161c:	b29b      	uxth	r3, r3
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <I2C_MASTER_RXNE_Handle+0x1a4>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d004      	beq.n	8001638 <I2C_MASTER_RXNE_Handle+0x1a4>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001636:	d1ea      	bne.n	800160e <I2C_MASTER_RXNE_Handle+0x17a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d004      	beq.n	800164a <I2C_MASTER_RXNE_Handle+0x1b6>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d104      	bne.n	8001654 <I2C_MASTER_RXNE_Handle+0x1c0>
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fb9a 	bl	8000d84 <CPAL_I2C_Timeout>
 8001650:	4603      	mov	r3, r0
 8001652:	e145      	b.n	80018e0 <I2C_MASTER_RXNE_Handle+0x44c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f04f 32ff 	mov.w	r2, #4294967295
 800165a:	619a      	str	r2, [r3, #24]
        
        /* Program NACK Generation */
        __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 8001674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800167c:	b292      	uxth	r2, r2
 800167e:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	8a1b      	ldrh	r3, [r3, #16]
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	3201      	adds	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	3a01      	subs	r2, #1
 80016ac:	605a      	str	r2, [r3, #4]
        
         /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2205      	movs	r2, #5
 80016b2:	619a      	str	r2, [r3, #24]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <I2C_MASTER_RXNE_Handle+0x268>)
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	8a9b      	ldrh	r3, [r3, #20]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d108      	bne.n	80016de <I2C_MASTER_RXNE_Handle+0x24a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d004      	beq.n	80016de <I2C_MASTER_RXNE_Handle+0x24a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d1ea      	bne.n	80016b4 <I2C_MASTER_RXNE_Handle+0x220>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d004      	beq.n	80016f0 <I2C_MASTER_RXNE_Handle+0x25c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ee:	d107      	bne.n	8001700 <I2C_MASTER_RXNE_Handle+0x26c>
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fb47 	bl	8000d84 <CPAL_I2C_Timeout>
 80016f6:	4603      	mov	r3, r0
 80016f8:	e0f2      	b.n	80018e0 <I2C_MASTER_RXNE_Handle+0x44c>
 80016fa:	bf00      	nop
 80016fc:	2000006c 	.word	0x2000006c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f04f 32ff 	mov.w	r2, #4294967295
 8001706:	619a      	str	r2, [r3, #24]
        
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);        
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 8001710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 8001720:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001728:	b292      	uxth	r2, r2
 800172a:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 8001734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001738:	8a1b      	ldrh	r3, [r3, #16]
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	3201      	adds	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	3a01      	subs	r2, #1
 8001758:	605a      	str	r2, [r3, #4]
          
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	8a1b      	ldrh	r3, [r3, #16]
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]
        
        /* Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;   
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	3a01      	subs	r2, #1
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e016      	b.n	80017ae <I2C_MASTER_RXNE_Handle+0x31a>
    
    /* if bytes remaining for reception */ 
    else
    {
      /* Read Byte */
      *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	8a1b      	ldrh	r3, [r3, #16]
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
      
      /* Point to next data and Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	3201      	adds	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
      
      pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	3a01      	subs	r2, #1
 80017ac:	605a      	str	r2, [r3, #4]
      /* Call RX UserCallback */
      CPAL_I2C_RX_UserCallback(pDevInitStruct);
    }
    
    /* If All data are received */
    if (pDevInitStruct->pCPAL_TransferRx->wNumData == 0)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f040 8092 	bne.w	80018de <I2C_MASTER_RXNE_Handle+0x44a>
      CPAL_LOG("\n\rLOG : I2C Device Nack and Stop Generated ");
      
      CPAL_LOG("\n\rLOG : I2C Device RX Complete"); 
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 80017d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017da:	b292      	uxth	r2, r2
 80017dc:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device RX EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 80017e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ea:	889b      	ldrh	r3, [r3, #4]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 80017f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fe:	b292      	uxth	r2, r2
 8001800:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device RX BUFF IT Disabled");
      
      /* Clear BTF Flag */
      __CPAL_I2C_HAL_CLEAR_BTF(pDevInitStruct->CPAL_Dev);   
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 800180a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180e:	8a9b      	ldrh	r3, [r3, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	8a1b      	ldrh	r3, [r3, #16]
      
      /* If 1Byte DMA option is selected */
      if ((pDevInitStruct->wCPAL_Options & CPAL_DMA_1BYTE_CASE) != 0)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <I2C_MASTER_RXNE_Handle+0x3a8>
      {
        /* Clear 1Byte DMA option from wCPAL_Options */
        pDevInitStruct->wCPAL_Options &= ~CPAL_DMA_1BYTE_CASE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	615a      	str	r2, [r3, #20]
        
        /* Change ProgModel to DMA */
        pDevInitStruct->CPAL_ProgModel = CPAL_PROGMODEL_DMA;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	70da      	strb	r2, [r3, #3]
      }
      
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2206      	movs	r2, #6
 8001840:	619a      	str	r2, [r3, #24]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 800184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184e:	8b1b      	ldrh	r3, [r3, #24]
 8001850:	b29b      	uxth	r3, r3
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <I2C_MASTER_RXNE_Handle+0x3d8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d004      	beq.n	800186c <I2C_MASTER_RXNE_Handle+0x3d8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186a:	d1ea      	bne.n	8001842 <I2C_MASTER_RXNE_Handle+0x3ae>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d004      	beq.n	800187e <I2C_MASTER_RXNE_Handle+0x3ea>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d104      	bne.n	8001888 <I2C_MASTER_RXNE_Handle+0x3f4>
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fa80 	bl	8000d84 <CPAL_I2C_Timeout>
 8001884:	4603      	mov	r3, r0
 8001886:	e02b      	b.n	80018e0 <I2C_MASTER_RXNE_Handle+0x44c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f04f 32ff 	mov.w	r2, #4294967295
 800188e:	619a      	str	r2, [r3, #24]
      
      /* Enable ACK generation and disable POS */
      __CPAL_I2C_HAL_ENABLE_ACK(pDevInitStruct->CPAL_Dev);      
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 80018a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018b0:	b292      	uxth	r2, r2
 80018b2:	801a      	strh	r2, [r3, #0]
      __CPAL_I2C_HAL_DISABLE_POS(pDevInitStruct->CPAL_Dev);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <I2C_MASTER_RXNE_Handle+0x454>)
 80018cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d4:	b292      	uxth	r2, r2
 80018d6:	801a      	strh	r2, [r3, #0]
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	731a      	strb	r2, [r3, #12]
      
      /* Call RX Transfer complete Callback */
      CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
    }
  }  
  return CPAL_PASS;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000006c 	.word	0x2000006c

080018ec <I2C_SLAVE_ADDR_Handle>:
  * @brief  Handles Slave address matched (ADDR) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_ADDR_Handle(CPAL_InitTypeDef* pDevInitStruct)
{       
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    /* Call Slave receive UserCallback */
    CPAL_I2C_SLAVE_READ_UserCallback(pDevInitStruct);
  }    
#else   
  /* If General Call Addressing Mode selected */
  if (__CPAL_I2C_HAL_GET_GENCALL(pDevInitStruct->CPAL_Dev) != 0)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <I2C_SLAVE_ADDR_Handle+0x54>)
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	8b1b      	ldrh	r3, [r3, #24]
    /* Call GENCALL UserCallback */
    CPAL_I2C_GENCALL_UserCallback(pDevInitStruct);
  }
  
  /* If DUAL Addressing Mode is not selected */
  if (__CPAL_I2C_HAL_GET_DUALF(pDevInitStruct->CPAL_Dev) != 0)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <I2C_SLAVE_ADDR_Handle+0x54>)
 800190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190e:	8b1b      	ldrh	r3, [r3, #24]
    /* Call DUALF UserCallback */
    CPAL_I2C_DUALF_UserCallback(pDevInitStruct);
  }    
  
  /* If device is ready for transmission */
  if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7b1b      	ldrb	r3, [r3, #12]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b03      	cmp	r3, #3
 8001918:	d103      	bne.n	8001922 <I2C_SLAVE_ADDR_Handle+0x36>
  {              
    /* Update CPAL_State to CPAL_STATE_BUSY */
    pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_TX;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2206      	movs	r2, #6
 800191e:	731a      	strb	r2, [r3, #12]
 8001920:	e007      	b.n	8001932 <I2C_SLAVE_ADDR_Handle+0x46>
    
    CPAL_LOG("\n\rLOG : I2C Device Busy TX");
  }
  /* If device is ready for reception */
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7b1b      	ldrb	r3, [r3, #12]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b05      	cmp	r3, #5
 800192a:	d102      	bne.n	8001932 <I2C_SLAVE_ADDR_Handle+0x46>
  {              
    /* Update CPAL_State to CPAL_STATE_BUSY_RX */
    pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_RX;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	220a      	movs	r2, #10
 8001930:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rLOG : I2C Device Busy RX");
  }
#endif /* CPAL_I2C_LISTEN_MODE */
 
  return CPAL_PASS;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	2000006c 	.word	0x2000006c

08001944 <I2C_SLAVE_STOP_Handle>:
  * @brief  Handles Slave Stop condiction (STOPF) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_STOP_Handle(CPAL_InitTypeDef* pDevInitStruct)
{   
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Clear STOPF */
  __CPAL_I2C_HAL_CLEAR_STOPF(pDevInitStruct->CPAL_Dev);     
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	8a9b      	ldrh	r3, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b29a      	uxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001972:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	b292      	uxth	r2, r2
 800197c:	801a      	strh	r2, [r3, #0]
  CPAL_LOG("\n\r\n\rLOG <I2C_EV_IRQHandler> : I2C Device Slave IT");
  
  CPAL_LOG("\n\rLOG : I2C Device Stop Detected");  
  
  /* If NACK Slave Own Address option bit selected */
  if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NACK_ADD) != 0)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d011      	beq.n	80019ae <I2C_SLAVE_STOP_Handle+0x6a>
  {
    /* Disable Acknowledgement of own Address */
    __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 80019a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019aa:	b292      	uxth	r2, r2
 80019ac:	801a      	strh	r2, [r3, #0]
  }
  
  /* If Interrupt Programming Model */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	78db      	ldrb	r3, [r3, #3]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d124      	bne.n	8001a00 <I2C_SLAVE_STOP_Handle+0xbc>
  {  
 #ifdef CPAL_I2C_IT_PROGMODEL    
    /* Disable EVENT Interrupt */
    __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 80019be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c2:	889b      	ldrh	r3, [r3, #4]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 80019ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d6:	b292      	uxth	r2, r2
 80019d8:	809a      	strh	r2, [r3, #4]
    
    CPAL_LOG("\n\rLOG : I2C Device EVT IT Disabled");
    
    /* Disable Buffer interrupt */
    __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	889b      	ldrh	r3, [r3, #4]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 80019f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fa:	b292      	uxth	r2, r2
 80019fc:	809a      	strh	r2, [r3, #4]
 80019fe:	e042      	b.n	8001a86 <I2C_SLAVE_STOP_Handle+0x142>
  /* If DMA Programming model */
  else 
  {  
 #ifdef CPAL_I2C_DMA_PROGMODEL
    /* If Slave run as receiver */
    if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7b1b      	ldrb	r3, [r3, #12]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b0a      	cmp	r3, #10
 8001a08:	d13d      	bne.n	8001a86 <I2C_SLAVE_STOP_Handle+0x142>
    {
      /* Disable DMA Request and Channel */
      __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);      
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	889b      	ldrh	r3, [r3, #4]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001a22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	809a      	strh	r2, [r3, #4]
      __CPAL_I2C_HAL_DISABLE_DMARX(pDevInitStruct->CPAL_Dev);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <I2C_SLAVE_STOP_Handle+0x1b4>)
 8001a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <I2C_SLAVE_STOP_Handle+0x1b4>)
 8001a44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5a:	889b      	ldrh	r3, [r3, #4]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001a66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	809a      	strh	r2, [r3, #4]
      
      /* Update remaining number of data */
      pDevInitStruct->pCPAL_TransferRx->wNumData = __CPAL_I2C_HAL_DMARX_GET_CNDT(pDevInitStruct->CPAL_Dev);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <I2C_SLAVE_STOP_Handle+0x1b4>)
 8001a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	6852      	ldr	r2, [r2, #4]
 8001a84:	605a      	str	r2, [r3, #4]
    }        
 #endif /* CPAL_I2C_DMA_PROGMODEL */
  }  
           
  /* Wait until Busy flag is reset */ 
  __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2206      	movs	r2, #6
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	8b1b      	ldrh	r3, [r3, #24]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <I2C_SLAVE_STOP_Handle+0x172>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d004      	beq.n	8001ab6 <I2C_SLAVE_STOP_Handle+0x172>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d1ea      	bne.n	8001a8c <I2C_SLAVE_STOP_Handle+0x148>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d004      	beq.n	8001ac8 <I2C_SLAVE_STOP_Handle+0x184>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d104      	bne.n	8001ad2 <I2C_SLAVE_STOP_Handle+0x18e>
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff f95b 	bl	8000d84 <CPAL_I2C_Timeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	e00c      	b.n	8001aec <I2C_SLAVE_STOP_Handle+0x1a8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	619a      	str	r2, [r3, #24]
  
  /* If Slave run as receiver */
  if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7b1b      	ldrb	r3, [r3, #12]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b0a      	cmp	r3, #10
 8001ae2:	d102      	bne.n	8001aea <I2C_SLAVE_STOP_Handle+0x1a6>
  { 
    /* Update CPAL_State to CPAL_STATE_READY */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	731a      	strb	r2, [r3, #12]
    
    /* Call RX Transfer complete Callback */
    CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
  }    
  
  return CPAL_PASS;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000006c 	.word	0x2000006c
 8001af8:	20000084 	.word	0x20000084

08001afc <I2C_SLAVE_TXE_Handle>:
  * @brief  Handles Slave transmission (TXE) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_TXE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{  
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d11f      	bne.n	8001b4c <I2C_SLAVE_TXE_Handle+0x50>
  {  
    if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01a      	beq.n	8001b4c <I2C_SLAVE_TXE_Handle+0x50>
    {   
      /* Call TX UserCallback */
      CPAL_I2C_TX_UserCallback(pDevInitStruct);
      
      /* Write Byte */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (*(pDevInitStruct->pCPAL_TransferTx->pbBuffer)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <I2C_SLAVE_TXE_Handle+0x60>)
 8001b26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	821a      	strh	r2, [r3, #16]
      
      /* Decrement remaining number of data */      
      pDevInitStruct->pCPAL_TransferTx->wNumData--;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	3a01      	subs	r2, #1
 8001b36:	605a      	str	r2, [r3, #4]
      
      if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <I2C_SLAVE_TXE_Handle+0x50>
      {  
        /* Point to next data */
        pDevInitStruct->pCPAL_TransferTx->pbBuffer++;  
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	3201      	adds	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
        CPAL_LOG("\n\rLOG : I2C Device TX Complete");
      }
    }
  }
  
  return CPAL_PASS;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000006c 	.word	0x2000006c

08001b60 <I2C_SLAVE_RXNE_Handle>:
  * @brief  Handles Slave reception (RXNE) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_RXNE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{  
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	78db      	ldrb	r3, [r3, #3]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d14e      	bne.n	8001c0e <I2C_SLAVE_RXNE_Handle+0xae>
  {   
    /* If data remaining for reception */
    if (pDevInitStruct->pCPAL_TransferRx->wNumData != 0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d049      	beq.n	8001c0e <I2C_SLAVE_RXNE_Handle+0xae>
    {          
      /* Read Byte */
      *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <I2C_SLAVE_RXNE_Handle+0xbc>)
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	8a1b      	ldrh	r3, [r3, #16]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]
      
      /* Call RX UserCallback */
      CPAL_I2C_RX_UserCallback(pDevInitStruct); 
      
      /* Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferRx->wNumData--;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	605a      	str	r2, [r3, #4]
      
      /* If data remaining for reception */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData != 0)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <I2C_SLAVE_RXNE_Handle+0x54>
      {  
        /* Point to next data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	3201      	adds	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e02c      	b.n	8001c0e <I2C_SLAVE_RXNE_Handle+0xae>
      }
      else
      {
        /* No Stop Condition Generation option bit selected */ 
        if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) != 0)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d026      	beq.n	8001c0e <I2C_SLAVE_RXNE_Handle+0xae>
        {   
          /* Disable EVENT Interrupt */
          __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <I2C_SLAVE_RXNE_Handle+0xbc>)
 8001bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <I2C_SLAVE_RXNE_Handle+0xbc>)
 8001bd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be0:	b292      	uxth	r2, r2
 8001be2:	809a      	strh	r2, [r3, #4]
          
          CPAL_LOG("\n\rLOG : I2C Device EVT IT Disabled");
          
          /* Disable Buffer interrupt */
          __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <I2C_SLAVE_RXNE_Handle+0xbc>)
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	889b      	ldrh	r3, [r3, #4]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <I2C_SLAVE_RXNE_Handle+0xbc>)
 8001bfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c04:	b292      	uxth	r2, r2
 8001c06:	809a      	strh	r2, [r3, #4]
          
          CPAL_LOG("\n\rLOG : I2C Device BUFF IT Disabled");
          
          /* Update CPAL_State to CPAL_STATE_READY */
          pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	731a      	strb	r2, [r3, #12]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Complete");  
      }
    }
  }  
  return CPAL_PASS;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	2000006c 	.word	0x2000006c

08001c20 <CPAL_I2C_Enable_DMA_IT>:
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @param  Direction : Transfer direction.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Enable_DMA_IT (CPAL_InitTypeDef* pDevInitStruct, CPAL_DirectionTypeDef Direction)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  /* Switch the value of CPAL_ProgModel */
  switch (pDevInitStruct->CPAL_ProgModel)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	78db      	ldrb	r3, [r3, #3]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d002      	beq.n	8001c3a <CPAL_I2C_Enable_DMA_IT+0x1a>
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d014      	beq.n	8001c62 <CPAL_I2C_Enable_DMA_IT+0x42>
 8001c38:	e0a4      	b.n	8001d84 <CPAL_I2C_Enable_DMA_IT+0x164>
    Interrupt mode : if CPAL_ProgModel = CPAL_PROGMODEL_INTERRUPT
    ---------------------------------------------------------------------------*/            
  case CPAL_PROGMODEL_INTERRUPT:
   
    /* Enable BUFFER Interrupt*/
    __CPAL_I2C_HAL_ENABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b54      	ldr	r3, [pc, #336]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c46:	889b      	ldrh	r3, [r3, #4]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001c52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	809a      	strh	r2, [r3, #4]
    
    CPAL_LOG("\n\rLOG : I2C Device BUFF IT Enabled"); 
    
    return CPAL_PASS;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e094      	b.n	8001d8c <CPAL_I2C_Enable_DMA_IT+0x16c>
    DMA mode : if CPAL_ProgModel = CPAL_PROGMODEL_DMA
    ---------------------------------------------------------------------------*/      
    case CPAL_PROGMODEL_DMA:
    
     /* Disable EVENT Interrupt */
     __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	889b      	ldrh	r3, [r3, #4]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001c7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c82:	b292      	uxth	r2, r2
 8001c84:	809a      	strh	r2, [r3, #4]
    
     /* Enable DMA request */
     __CPAL_I2C_HAL_ENABLE_DMAREQ(pDevInitStruct->CPAL_Dev);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c92:	889b      	ldrh	r3, [r3, #4]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001c9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	809a      	strh	r2, [r3, #4]
    
    /* If a data transmission will be performed */
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX) || (Direction == CPAL_DIRECTION_TX))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7b1b      	ldrb	r3, [r3, #12]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b06      	cmp	r3, #6
 8001cb2:	d002      	beq.n	8001cba <CPAL_I2C_Enable_DMA_IT+0x9a>
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d12b      	bne.n	8001d12 <CPAL_I2C_Enable_DMA_IT+0xf2>
    {
      /* Configure TX DMA Channels */
      CPAL_I2C_HAL_DMATXConfig(pDevInitStruct->CPAL_Dev, pDevInitStruct->pCPAL_TransferTx, pDevInitStruct->wCPAL_Options);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7818      	ldrb	r0, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f000 f86a 	bl	8001da0 <CPAL_I2C_HAL_DMATXConfig>
      
      /* Disable DMA automatic NACK generation */
      __CPAL_I2C_HAL_DISABLE_LAST(pDevInitStruct->CPAL_Dev); 
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	889b      	ldrh	r3, [r3, #4]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001ce4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ce8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cec:	b292      	uxth	r2, r2
 8001cee:	809a      	strh	r2, [r3, #4]
    
      /* Enable TX DMA Channels */
      __CPAL_I2C_HAL_ENABLE_DMATX(pDevInitStruct->CPAL_Dev);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <CPAL_I2C_Enable_DMA_IT+0x178>)
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <CPAL_I2C_Enable_DMA_IT+0x178>)
 8001d06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
      
      CPAL_LOG("\n\rLOG : I2C Device DMA TX Enabled");       
 8001d10:	e036      	b.n	8001d80 <CPAL_I2C_Enable_DMA_IT+0x160>
    }    
     /* If a data reception will be performed */
    else if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) || (Direction == CPAL_DIRECTION_RX))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b1b      	ldrb	r3, [r3, #12]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b0a      	cmp	r3, #10
 8001d1a:	d002      	beq.n	8001d22 <CPAL_I2C_Enable_DMA_IT+0x102>
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d12e      	bne.n	8001d80 <CPAL_I2C_Enable_DMA_IT+0x160>
    {
      /* Configure RX DMA Channels */
      CPAL_I2C_HAL_DMARXConfig(pDevInitStruct->CPAL_Dev, pDevInitStruct->pCPAL_TransferRx, pDevInitStruct->wCPAL_Options);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7818      	ldrb	r0, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f000 f876 	bl	8001e20 <CPAL_I2C_HAL_DMARXConfig>
      
      /* If Master Mode Selected */
      if(pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	789b      	ldrb	r3, [r3, #2]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d111      	bne.n	8001d60 <CPAL_I2C_Enable_DMA_IT+0x140>
      {
        /* Enable DMA automatic NACK generation */
        __CPAL_I2C_HAL_ENABLE_LAST(pDevInitStruct->CPAL_Dev);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8001d54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	809a      	strh	r2, [r3, #4]
      }
    
      /* Enable RX DMA Channels */
      __CPAL_I2C_HAL_ENABLE_DMARX(pDevInitStruct->CPAL_Dev);                  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <CPAL_I2C_Enable_DMA_IT+0x17c>)
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <CPAL_I2C_Enable_DMA_IT+0x17c>)
 8001d76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
    }
    
    return CPAL_PASS; 
 8001d80:	2300      	movs	r3, #0
 8001d82:	e003      	b.n	8001d8c <CPAL_I2C_Enable_DMA_IT+0x16c>
    Default: return error and exit Write Operation
    ---------------------------------------------------------------------------*/      
  default:
    
    /* Update CPAL_State to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2210      	movs	r2, #16
 8001d88:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rERROR : I2C Device Error"); 
    
    /* exit function */
    return CPAL_FAIL;
 8001d8a:	2301      	movs	r3, #1
  }  
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000006c 	.word	0x2000006c
 8001d98:	20000078 	.word	0x20000078
 8001d9c:	20000084 	.word	0x20000084

08001da0 <CPAL_I2C_HAL_DMATXConfig>:
  * @param  TXferStruct : DMA TX Transfer Parameters.
  * @param  Options :  Transfer Options.
  * @retval None. 
  */
void CPAL_I2C_HAL_DMATXConfig(CPAL_DevTypeDef Device, CPAL_TransferTypeDef* TxXferStruct, uint32_t Options )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	73fb      	strb	r3, [r7, #15]
  /* Set Channel */
  CPAL_DMA_InitStructure.DMA_Channel = CPAL_I2C_DMA_CHANNEL[Device];
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <CPAL_I2C_HAL_DMATXConfig+0x70>)
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001db8:	6013      	str	r3, [r2, #0]
  
  /* Set Memory Base Address */
  CPAL_DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(TxXferStruct->pbBuffer);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001dc2:	609a      	str	r2, [r3, #8]
  
  /* Set number of data */
  CPAL_DMA_InitStructure.DMA_BufferSize = TxXferStruct->wNumData;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001dca:	6113      	str	r3, [r2, #16]
  
  /* Select I2Cx DR Address register as DMA PeripheralBaseAddress */
  CPAL_DMA_InitStructure.DMA_PeripheralBaseAddr = CPAL_I2C_DR [Device];
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <CPAL_I2C_HAL_DMATXConfig+0x78>)
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001dd6:	6053      	str	r3, [r2, #4]
  
  /* If TX DMA Circular Mode Option Bit Selected */
  if ((Options & CPAL_OPT_DMATX_CIRCULAR) != 0)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <CPAL_I2C_HAL_DMATXConfig+0x4c>
  {
    /* Select DMA Circular Mode */  
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
 8001dea:	e002      	b.n	8001df2 <CPAL_I2C_HAL_DMATXConfig+0x52>
  
  /* If TX DMA Circular Mode Option Bit not selected */
  else 
  {
    /* Select DMA Normal Mode */
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  } 
  
  /* Select Peripheral to Memory transfer direction */
  CPAL_DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001df4:	2240      	movs	r2, #64	; 0x40
 8001df6:	60da      	str	r2, [r3, #12]
  
  /* Initialize I2Cx DMA Tx Stream */
  DMA_Init((DMA_Stream_TypeDef*)CPAL_I2C_DMA_TX_Stream[Device], &CPAL_DMA_InitStructure);   
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <CPAL_I2C_HAL_DMATXConfig+0x7c>)
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f8d2 	bl	8001fac <DMA_Init>
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	08002280 	.word	0x08002280
 8001e14:	200000b8 	.word	0x200000b8
 8001e18:	08002274 	.word	0x08002274
 8001e1c:	20000078 	.word	0x20000078

08001e20 <CPAL_I2C_HAL_DMARXConfig>:
  * @param  RXferStruct : DMA RX Transfer Parameters.
  * @param  Options :  Transfer Options.
  * @retval None. 
  */
void CPAL_I2C_HAL_DMARXConfig(CPAL_DevTypeDef Device, CPAL_TransferTypeDef* RxXferStruct, uint32_t Options )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	73fb      	strb	r3, [r7, #15]
  /* Set Channel */
  CPAL_DMA_InitStructure.DMA_Channel = CPAL_I2C_DMA_CHANNEL[Device];
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <CPAL_I2C_HAL_DMARXConfig+0x70>)
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e38:	6013      	str	r3, [r2, #0]
  
  /* Set Memory Base Address */
  CPAL_DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(RxXferStruct->pbBuffer);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e42:	609a      	str	r2, [r3, #8]
  
  /* Set number of data */
  CPAL_DMA_InitStructure.DMA_BufferSize = RxXferStruct->wNumData;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e4a:	6113      	str	r3, [r2, #16]
  
  /* Select I2Cx DR Address register as DMA PeripheralBaseAddress */
  CPAL_DMA_InitStructure.DMA_PeripheralBaseAddr = CPAL_I2C_DR [Device];
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <CPAL_I2C_HAL_DMARXConfig+0x78>)
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e56:	6053      	str	r3, [r2, #4]
  
  /* If RX DMA Circular Mode Option Bit Selected */
  if ((Options & CPAL_OPT_DMARX_CIRCULAR) != 0)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <CPAL_I2C_HAL_DMARXConfig+0x4c>
  {
    /* Select DMA Circular Mode */  
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
 8001e6a:	e002      	b.n	8001e72 <CPAL_I2C_HAL_DMARXConfig+0x52>
  }  
  /* If RX DMA Circular Mode Option Bit not selected */
  else 
  {
    /* Select DMA Normal Mode */
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  } 
  
  /* Select Peripheral to Memory transfer direction */
  CPAL_DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  
  /* Initialize I2Cx DMA Rx Stream */
  DMA_Init((DMA_Stream_TypeDef*)CPAL_I2C_DMA_RX_Stream[Device], &CPAL_DMA_InitStructure);   
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <CPAL_I2C_HAL_DMARXConfig+0x7c>)
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	4904      	ldr	r1, [pc, #16]	; (8001e94 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f892 	bl	8001fac <DMA_Init>
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	08002280 	.word	0x08002280
 8001e94:	200000b8 	.word	0x200000b8
 8001e98:	08002274 	.word	0x08002274
 8001e9c:	20000084 	.word	0x20000084

08001ea0 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C1_EV_IRQHandler(void)
{  
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Call the Common Event handler function */
  return CPAL_I2C_EV_IRQHandler(&I2C1_DevStructure);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <I2C1_EV_IRQHandler+0x10>)
 8001ea6:	f7fe f98f 	bl	80001c8 <CPAL_I2C_EV_IRQHandler>
 8001eaa:	4603      	mov	r3, r0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000000c 	.word	0x2000000c

08001eb4 <I2C1_ER_IRQHandler>:
  * @brief  This function handles I2C1 Errors interrupt.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C1_ER_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  CPAL_LOG("\n\r\n\rLOG <I2C1_ER_IRQHandler> : I2C1 Device Error IT ");
  
  /* Call the Common Error handler function */
  CPAL_I2C_ER_IRQHandler(&I2C1_DevStructure);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <I2C1_ER_IRQHandler+0x10>)
 8001eba:	f7fe fa13 	bl	80002e4 <CPAL_I2C_ER_IRQHandler>
  
  return CPAL_PASS;  
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000000c 	.word	0x2000000c

08001ec8 <DMA1_Stream6_IRQHandler>:
  * @brief  This function handles I2C1 TX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C1_DMA_TX_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Call the Common DMA TX handler function */
  return CPAL_I2C_DMA_TX_IRQHandler(&I2C1_DevStructure);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA1_Stream6_IRQHandler+0x10>)
 8001ece:	f7fe fafd 	bl	80004cc <CPAL_I2C_DMA_TX_IRQHandler>
 8001ed2:	4603      	mov	r3, r0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000000c 	.word	0x2000000c

08001edc <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles I2C1 RX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C1_DMA_RX_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Call the Common DMA RX handler function */
  return CPAL_I2C_DMA_RX_IRQHandler(&I2C1_DevStructure);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <DMA1_Stream0_IRQHandler+0x10>)
 8001ee2:	f7fe fd15 	bl	8000910 <CPAL_I2C_DMA_RX_IRQHandler>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2000000c 	.word	0x2000000c

08001ef0 <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C2 interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C2_EV_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Call the Common Event handler function */
  return CPAL_I2C_EV_IRQHandler(&I2C2_DevStructure); 
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <I2C2_EV_IRQHandler+0x10>)
 8001ef6:	f7fe f967 	bl	80001c8 <CPAL_I2C_EV_IRQHandler>
 8001efa:	4603      	mov	r3, r0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000002c 	.word	0x2000002c

08001f04 <I2C2_ER_IRQHandler>:
  * @brief  This function handles I2C2 Errors interrupt.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C2_ER_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  CPAL_LOG("\n\r\n\rLOG <I2C2_ER_IRQHandler> : I2C2 Device Error IT ");
  
  /* Call the Common Error handler function */
  CPAL_I2C_ER_IRQHandler(&I2C2_DevStructure);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <I2C2_ER_IRQHandler+0x10>)
 8001f0a:	f7fe f9eb 	bl	80002e4 <CPAL_I2C_ER_IRQHandler>
  
  return CPAL_PASS;  
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	2000002c 	.word	0x2000002c

08001f18 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles I2C2 TX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C2_DMA_TX_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Call the Common DMA TX handler function */
  return CPAL_I2C_DMA_TX_IRQHandler(&I2C2_DevStructure);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <DMA1_Stream7_IRQHandler+0x10>)
 8001f1e:	f7fe fad5 	bl	80004cc <CPAL_I2C_DMA_TX_IRQHandler>
 8001f22:	4603      	mov	r3, r0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2000002c 	.word	0x2000002c

08001f2c <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2C2 RX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C2_DMA_RX_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Call the Common DMA RX handler function */
  return CPAL_I2C_DMA_RX_IRQHandler(&I2C2_DevStructure);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <DMA1_Stream3_IRQHandler+0x10>)
 8001f32:	f7fe fced 	bl	8000910 <CPAL_I2C_DMA_RX_IRQHandler>
 8001f36:	4603      	mov	r3, r0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2000002c 	.word	0x2000002c

08001f40 <I2C3_EV_IRQHandler>:
  * @brief  This function handles I2C3 interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C3_EV_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Call the Common Event handler function */
  return CPAL_I2C_EV_IRQHandler(&I2C3_DevStructure); 
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <I2C3_EV_IRQHandler+0x10>)
 8001f46:	f7fe f93f 	bl	80001c8 <CPAL_I2C_EV_IRQHandler>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000004c 	.word	0x2000004c

08001f54 <I2C3_ER_IRQHandler>:
  * @brief  This function handles I2C3 Errors interrupt.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C3_ER_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  CPAL_LOG("\n\r\n\rLOG <I2C3_ER_IRQHandler> : I2C3 Device Error IT ");
  
  /* Call the Common Error handler function */
  CPAL_I2C_ER_IRQHandler(&I2C3_DevStructure);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <I2C3_ER_IRQHandler+0x10>)
 8001f5a:	f7fe f9c3 	bl	80002e4 <CPAL_I2C_ER_IRQHandler>
  
  return CPAL_PASS;  
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000004c 	.word	0x2000004c

08001f68 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles I2C3 TX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C3_DMA_TX_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Call the Common DMA TX handler function */
  return CPAL_I2C_DMA_TX_IRQHandler(&I2C3_DevStructure);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <DMA1_Stream4_IRQHandler+0x10>)
 8001f6e:	f7fe faad 	bl	80004cc <CPAL_I2C_DMA_TX_IRQHandler>
 8001f72:	4603      	mov	r3, r0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000004c 	.word	0x2000004c

08001f7c <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles I2C3 RX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C3_DMA_RX_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Call the Common DMA RX handler function */
  return CPAL_I2C_DMA_RX_IRQHandler(&I2C3_DevStructure);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <DMA1_Stream2_IRQHandler+0x10>)
 8001f82:	f7fe fcc5 	bl	8000910 <CPAL_I2C_DMA_RX_IRQHandler>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000004c 	.word	0x2000004c

08001f90 <CPAL_TIMEOUT_UserCallback>:
  * @brief  User callback that manages the Timeout error.
  * @param  pDevInitStruct .
  * @retval None.
  */
uint32_t CPAL_TIMEOUT_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 
  return CPAL_PASS;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 8001faa:	e7fe      	b.n	8001faa <main+0x4>

08001fac <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <DMA_Init+0xac>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001fd6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001fe2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001fee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001ffa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0307 	bic.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4313      	orrs	r3, r2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60da      	str	r2, [r3, #12]
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	f01c803f 	.word	0xf01c803f

0800205c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <SystemInit+0x60>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <SystemInit+0x60>)
 8002068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800206c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <SystemInit+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <SystemInit+0x64>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <SystemInit+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <SystemInit+0x64>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <SystemInit+0x64>)
 8002088:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <SystemInit+0x64>)
 8002094:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <SystemInit+0x68>)
 8002096:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <SystemInit+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <SystemInit+0x64>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <SystemInit+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80020aa:	f000 f80d 	bl	80020c8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020ae:	4b03      	ldr	r3, [pc, #12]	; (80020bc <SystemInit+0x60>)
 80020b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020b4:	609a      	str	r2, [r3, #8]
#endif
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	40023800 	.word	0x40023800
 80020c4:	24003010 	.word	0x24003010

080020c8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80020d6:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <SetSysClock+0xe8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <SetSysClock+0xe8>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80020e2:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <SetSysClock+0xe8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3301      	adds	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <SetSysClock+0x38>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020fe:	d1f0      	bne.n	80020e2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <SetSysClock+0xe8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800210c:	2301      	movs	r3, #1
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	e001      	b.n	8002116 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d142      	bne.n	80021a2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <SetSysClock+0xe8>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a23      	ldr	r2, [pc, #140]	; (80021b0 <SetSysClock+0xe8>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <SetSysClock+0xec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <SetSysClock+0xec>)
 800212e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002132:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <SetSysClock+0xe8>)
 8002136:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <SetSysClock+0xe8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <SetSysClock+0xe8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <SetSysClock+0xe8>)
 8002142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002146:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <SetSysClock+0xe8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <SetSysClock+0xe8>)
 800214e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002152:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <SetSysClock+0xe8>)
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <SetSysClock+0xf0>)
 8002158:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <SetSysClock+0xe8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <SetSysClock+0xe8>)
 8002160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002164:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002166:	bf00      	nop
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <SetSysClock+0xe8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f9      	beq.n	8002168 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <SetSysClock+0xf4>)
 8002176:	f240 6205 	movw	r2, #1541	; 0x605
 800217a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <SetSysClock+0xe8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <SetSysClock+0xe8>)
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <SetSysClock+0xe8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <SetSysClock+0xe8>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002194:	bf00      	nop
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <SetSysClock+0xe8>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d1f9      	bne.n	8002196 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40007000 	.word	0x40007000
 80021b8:	07405419 	.word	0x07405419
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c4:	f7ff ff4a 	bl	800205c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	; (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ee:	f000 f811 	bl	8002214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7ff fed8 	bl	8001fa6 <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002204:	080022dc 	.word	0x080022dc
  ldr r2, =_sbss
 8002208:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800220c:	200000f4 	.word	0x200000f4

08002210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC_IRQHandler>
	...

08002214 <__libc_init_array>:
 8002214:	b570      	push	{r4, r5, r6, lr}
 8002216:	4d0d      	ldr	r5, [pc, #52]	; (800224c <__libc_init_array+0x38>)
 8002218:	4c0d      	ldr	r4, [pc, #52]	; (8002250 <__libc_init_array+0x3c>)
 800221a:	1b64      	subs	r4, r4, r5
 800221c:	10a4      	asrs	r4, r4, #2
 800221e:	2600      	movs	r6, #0
 8002220:	42a6      	cmp	r6, r4
 8002222:	d109      	bne.n	8002238 <__libc_init_array+0x24>
 8002224:	4d0b      	ldr	r5, [pc, #44]	; (8002254 <__libc_init_array+0x40>)
 8002226:	4c0c      	ldr	r4, [pc, #48]	; (8002258 <__libc_init_array+0x44>)
 8002228:	f000 f818 	bl	800225c <_init>
 800222c:	1b64      	subs	r4, r4, r5
 800222e:	10a4      	asrs	r4, r4, #2
 8002230:	2600      	movs	r6, #0
 8002232:	42a6      	cmp	r6, r4
 8002234:	d105      	bne.n	8002242 <__libc_init_array+0x2e>
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	f855 3b04 	ldr.w	r3, [r5], #4
 800223c:	4798      	blx	r3
 800223e:	3601      	adds	r6, #1
 8002240:	e7ee      	b.n	8002220 <__libc_init_array+0xc>
 8002242:	f855 3b04 	ldr.w	r3, [r5], #4
 8002246:	4798      	blx	r3
 8002248:	3601      	adds	r6, #1
 800224a:	e7f2      	b.n	8002232 <__libc_init_array+0x1e>
 800224c:	080022d4 	.word	0x080022d4
 8002250:	080022d4 	.word	0x080022d4
 8002254:	080022d4 	.word	0x080022d4
 8002258:	080022d8 	.word	0x080022d8

0800225c <_init>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	bf00      	nop
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr

08002268 <_fini>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	bf00      	nop
 800226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226e:	bc08      	pop	{r3}
 8002270:	469e      	mov	lr, r3
 8002272:	4770      	bx	lr
