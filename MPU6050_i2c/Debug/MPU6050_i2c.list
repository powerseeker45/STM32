
MPU6050_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800213c  0800213c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800213c  0800213c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800213c  0800213c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000002c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004f07  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010a8  00000000  00000000  00024fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000520  00000000  00000000  00026088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003b8  00000000  00000000  000265a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ea47  00000000  00000000  00026960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005ca9  00000000  00000000  000353a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00057ead  00000000  00000000  0003b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000144c  00000000  00000000  00092f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0009434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020bc 	.word	0x080020bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	080020bc 	.word	0x080020bc

080001c8 <CPAL_HAL_NVICInit>:
  * @brief  Configure NVIC Priority Group.
  * @param  None.
  * @retval None. 
  */
void CPAL_HAL_NVICInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
 /* Set NVIC Group Priority */
  NVIC_PriorityGroupConfig (CPAL_NVIC_PRIOGROUP);
 80001cc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80001d0:	f001 fb56 	bl	8001880 <NVIC_PriorityGroupConfig>
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da0b      	bge.n	8000204 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	490c      	ldr	r1, [pc, #48]	; (8000224 <NVIC_SetPriority+0x4c>)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	f003 030f 	and.w	r3, r3, #15
 80001f8:	3b04      	subs	r3, #4
 80001fa:	0112      	lsls	r2, r2, #4
 80001fc:	b2d2      	uxtb	r2, r2
 80001fe:	440b      	add	r3, r1
 8000200:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000202:	e009      	b.n	8000218 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4907      	ldr	r1, [pc, #28]	; (8000228 <NVIC_SetPriority+0x50>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	e000e100 	.word	0xe000e100

0800022c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800023a:	d301      	bcc.n	8000240 <SysTick_Config+0x14>
 800023c:	2301      	movs	r3, #1
 800023e:	e011      	b.n	8000264 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000246:	4a09      	ldr	r2, [pc, #36]	; (800026c <SysTick_Config+0x40>)
 8000248:	3b01      	subs	r3, #1
 800024a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800024c:	210f      	movs	r1, #15
 800024e:	f04f 30ff 	mov.w	r0, #4294967295
 8000252:	f7ff ffc1 	bl	80001d8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <SysTick_Config+0x40>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <SysTick_Config+0x40>)
 800025e:	2207      	movs	r2, #7
 8000260:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000262:	2300      	movs	r3, #0
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	e000e010 	.word	0xe000e010

08000270 <CPAL_I2C_Init>:
  *         CPAL_InitTypeDef structure.
  * @param  pDevInitStruct : Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL 
  */
uint32_t CPAL_I2C_Init(CPAL_InitTypeDef* pDevInitStruct) 
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_Init> : I2C Device Init");
  
  /* If CPAL_State is not BUSY */
  if ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) 
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	7b1b      	ldrb	r3, [r3, #12]
 800027c:	b2db      	uxtb	r3, r3
 800027e:	2b01      	cmp	r3, #1
 8000280:	d00a      	beq.n	8000298 <CPAL_I2C_Init+0x28>
     || (pDevInitStruct->CPAL_State == CPAL_STATE_ERROR) 
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	7b1b      	ldrb	r3, [r3, #12]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b10      	cmp	r3, #16
 800028a:	d005      	beq.n	8000298 <CPAL_I2C_Init+0x28>
     || (pDevInitStruct->CPAL_State == CPAL_STATE_DISABLED))
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	7b1b      	ldrb	r3, [r3, #12]
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	f040 80de 	bne.w	8000454 <CPAL_I2C_Init+0x1e4>
      Perform the initialization routines 
    - If CPAL_State is CPAL_STATE_DISABLED:  
      Perform the Initialization routines                                   */    
    
#ifndef CPAL_I2C_DMA_PROGMODEL
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_DMA) 
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	2b02      	cmp	r3, #2
 800029e:	d104      	bne.n	80002aa <CPAL_I2C_Init+0x3a>
    {
      /* update State */
      pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2210      	movs	r2, #16
 80002a4:	731a      	strb	r2, [r3, #12]
      
      /* Exit Init function */
      return CPAL_FAIL;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e0d5      	b.n	8000456 <CPAL_I2C_Init+0x1e6>
      return CPAL_FAIL;
    }
#endif /* CPAL_I2C_IT_PROGMODEL */ 
        
    /* Disable I2Cx Device */
    __CPAL_I2C_HAL_DISABLE_DEV(pDevInitStruct->CPAL_Dev);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b6b      	ldr	r3, [pc, #428]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 80002b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4619      	mov	r1, r3
 80002c0:	4b67      	ldr	r3, [pc, #412]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 80002c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80002c6:	f022 0201 	bic.w	r2, r2, #1
 80002ca:	b292      	uxth	r2, r2
 80002cc:	801a      	strh	r2, [r3, #0]
    
    CPAL_LOG("\n\rLOG : I2C Device Disabled"); 
    
    /* Deinitialize I2Cx GPIO */
    CPAL_I2C_HAL_GPIODeInit(pDevInitStruct->CPAL_Dev);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f9b8 	bl	8001648 <CPAL_I2C_HAL_GPIODeInit>
    
    CPAL_LOG("\n\rLOG : I2C Device IOs Deinit");
    
    /* Deinitialize I2Cx Clock */
    CPAL_I2C_HAL_CLKDeInit(pDevInitStruct->CPAL_Dev);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 f921 	bl	8001524 <CPAL_I2C_HAL_CLKDeInit>
    
    /*----------------------------------------------------------------------------
    Peripheral Clock Initialization
    ---------------------------------------------------------------------------*/   
    /* Initialize I2Cx Clock */
    CPAL_I2C_HAL_CLKInit(pDevInitStruct->CPAL_Dev);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f8f8 	bl	80014dc <CPAL_I2C_HAL_CLKInit>
    
	/*----------------------------------------------------------------------------
    GPIO pins configuration
    ---------------------------------------------------------------------------*/
    /* Initialize I2Cx GPIO */
    CPAL_I2C_HAL_GPIOInit(pDevInitStruct->CPAL_Dev);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 f93b 	bl	800156c <CPAL_I2C_HAL_GPIOInit>
	       
    /*----------------------------------------------------------------------------
    Peripheral Initialization
    ---------------------------------------------------------------------------*/   
    /* Enable I2Cx Device */
    __CPAL_I2C_HAL_ENABLE_DEV(pDevInitStruct->CPAL_Dev); 
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	461a      	mov	r2, r3
 80002fc:	4b58      	ldr	r3, [pc, #352]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 80002fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b29a      	uxth	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	4619      	mov	r1, r3
 800030c:	4b54      	ldr	r3, [pc, #336]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 800030e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000312:	f042 0201 	orr.w	r2, r2, #1
 8000316:	b292      	uxth	r2, r2
 8000318:	801a      	strh	r2, [r3, #0]
    
    CPAL_LOG("\n\rLOG : I2C Device Enabled"); 
    
    /* Initialize I2Cx device with parameters stored in pCPAL_I2C_Struct */
    I2C_Init(CPAL_I2C_DEVICE[pDevInitStruct->CPAL_Dev], pDevInitStruct->pCPAL_I2C_Struct);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	4b4f      	ldr	r3, [pc, #316]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 8000322:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4619      	mov	r1, r3
 800032c:	4610      	mov	r0, r2
 800032e:	f001 fbf5 	bl	8001b1c <I2C_Init>
    
    CPAL_LOG("\n\rLOG : I2C Device Config");   
    
    /* If General Call Mode Option Bit Selected */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_GENCALL) != 0)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d011      	beq.n	8000362 <CPAL_I2C_Init+0xf2>
    {
      /* Enable GENERAL CALL Address Mode */
      __CPAL_I2C_HAL_ENABLE_GENCALL(pDevInitStruct->CPAL_Dev); 
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	461a      	mov	r2, r3
 8000344:	4b46      	ldr	r3, [pc, #280]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 8000346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4619      	mov	r1, r3
 8000354:	4b42      	ldr	r3, [pc, #264]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 8000356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800035a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800035e:	b292      	uxth	r2, r2
 8000360:	801a      	strh	r2, [r3, #0]
      
      CPAL_LOG("\n\rLOG : I2C Device GENCALL Mode Enabled"); 
    }
    
    /* If Dual Address Mode Option Bit Selected */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_DUALADDR) != 0)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d03d      	beq.n	80003ea <CPAL_I2C_Init+0x17a>
    {
      /* Enable Dual Address Mode */
     __CPAL_I2C_HAL_ENABLE_DUALADDR(pDevInitStruct->CPAL_Dev);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b3a      	ldr	r3, [pc, #232]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 8000376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800037a:	899b      	ldrh	r3, [r3, #12]
 800037c:	b29a      	uxth	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	4b36      	ldr	r3, [pc, #216]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 8000386:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800038a:	f042 0201 	orr.w	r2, r2, #1
 800038e:	b292      	uxth	r2, r2
 8000390:	819a      	strh	r2, [r3, #12]
      
      /* Configure OAR2 */
      __CPAL_I2C_HAL_OAR2_CONF(pDevInitStruct->CPAL_Dev, (uint8_t)(pDevInitStruct->wCPAL_Options & 0x000000FE));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	4b31      	ldr	r3, [pc, #196]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 800039a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800039e:	899b      	ldrh	r3, [r3, #12]
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 80003aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003ae:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 80003b2:	b292      	uxth	r2, r2
 80003b4:	819a      	strh	r2, [r3, #12]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	461a      	mov	r2, r3
 80003bc:	4b28      	ldr	r3, [pc, #160]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 80003be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c2:	899b      	ldrh	r3, [r3, #12]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	b21a      	sxth	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b21a      	sxth	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 80003e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003e6:	b292      	uxth	r2, r2
 80003e8:	819a      	strh	r2, [r3, #12]
         
      CPAL_LOG("\n\rLOG : I2C Device DUAL ADDR Mode Enabled"); 
    }    

    /* If NACK Slave Own Address option bit selected */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NACK_ADD) != 0)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d011      	beq.n	800041a <CPAL_I2C_Init+0x1aa>
    {
      /* Disable Acknowledgement of own Address */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 80003fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	b29a      	uxth	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	4619      	mov	r1, r3
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <CPAL_I2C_Init+0x1f0>)
 800040e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000416:	b292      	uxth	r2, r2
 8000418:	801a      	strh	r2, [r3, #0]
    
    /*----------------------------------------------------------------------------
    Peripheral and DMA interrupts Initialization
    ---------------------------------------------------------------------------*/
    /* Initialize I2Cx Interrupts */
    CPAL_I2C_HAL_ITInit(pDevInitStruct->CPAL_Dev, pDevInitStruct->wCPAL_Options, pDevInitStruct->CPAL_Direction, pDevInitStruct->CPAL_ProgModel);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	7818      	ldrb	r0, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6959      	ldr	r1, [r3, #20]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	785a      	ldrb	r2, [r3, #1]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	78db      	ldrb	r3, [r3, #3]
 800042a:	f001 f941 	bl	80016b0 <CPAL_I2C_HAL_ITInit>
    
    CPAL_LOG("\n\rLOG : I2C Device IT Init");
    
    /* Update CPAL_State to CPAL_STATE_READY */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2201      	movs	r2, #1
 8000432:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rLOG : I2C Device Ready"); 
    
    /* Initialize Timeout Procedure */
    _CPAL_TIMEOUT_INIT();
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <CPAL_I2C_Init+0x1f4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <CPAL_I2C_Init+0x1f8>)
 800043a:	fba2 2303 	umull	r2, r3, r2, r3
 800043e:	099b      	lsrs	r3, r3, #6
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fef3 	bl	800022c <SysTick_Config>
 8000446:	2100      	movs	r1, #0
 8000448:	f04f 30ff 	mov.w	r0, #4294967295
 800044c:	f7ff fec4 	bl	80001d8 <NVIC_SetPriority>
    
    return CPAL_PASS;
 8000450:	2300      	movs	r3, #0
 8000452:	e000      	b.n	8000456 <CPAL_I2C_Init+0x1e6>
  /* If CPAL_State is BUSY (a transaction is still on going) Exit Init function */
  else 
  {
    CPAL_LOG("\n\rERROR : I2C Device Busy"); 
    
    return CPAL_FAIL; 
 8000454:	2301      	movs	r3, #1
  }
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2000002c 	.word	0x2000002c
 8000464:	20000060 	.word	0x20000060
 8000468:	10624dd3 	.word	0x10624dd3

0800046c <CPAL_I2C_StructInit>:
  *         to the specified parameters in the CPAL_I2CDevTypeDef structure.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_StructInit(CPAL_InitTypeDef* pDevInitStruct) 
{   
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* Initialize I2C_InitStructure to their default values */
  I2C_InitStructure.I2C_ClockSpeed          = 100000;                        /* Initialize the I2C_ClockSpeed member */
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <CPAL_I2C_StructInit+0x80>)
 8000476:	4a1e      	ldr	r2, [pc, #120]	; (80004f0 <CPAL_I2C_StructInit+0x84>)
 8000478:	601a      	str	r2, [r3, #0]
  I2C_InitStructure.I2C_Mode                = I2C_Mode_I2C;                  /* Initialize the I2C_Mode member */
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <CPAL_I2C_StructInit+0x80>)
 800047c:	2200      	movs	r2, #0
 800047e:	809a      	strh	r2, [r3, #4]
  I2C_InitStructure.I2C_DutyCycle           = I2C_DutyCycle_2;               /* Initialize the I2C_DutyCycle member */
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <CPAL_I2C_StructInit+0x80>)
 8000482:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000486:	80da      	strh	r2, [r3, #6]
  I2C_InitStructure.I2C_OwnAddress1         = 0;                             /* Initialize the I2C_OwnAddress1 member */
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <CPAL_I2C_StructInit+0x80>)
 800048a:	2200      	movs	r2, #0
 800048c:	811a      	strh	r2, [r3, #8]
  I2C_InitStructure.I2C_Ack                 = I2C_Ack_Enable;                /* Initialize the I2C_Ack member */
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <CPAL_I2C_StructInit+0x80>)
 8000490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000494:	815a      	strh	r2, [r3, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;  /* Initialize the I2C_AcknowledgedAddress member */
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <CPAL_I2C_StructInit+0x80>)
 8000498:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800049c:	819a      	strh	r2, [r3, #12]
  
  /* Initialize pDevInitStruct parameter to their default values */
  pDevInitStruct-> CPAL_Direction     = CPAL_DIRECTION_TXRX;                  /* Transmitter and Receiver direction selected */
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2203      	movs	r2, #3
 80004a2:	705a      	strb	r2, [r3, #1]
  pDevInitStruct-> CPAL_Mode          = CPAL_MODE_MASTER;                     /* Mode Master selected */
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2200      	movs	r2, #0
 80004a8:	709a      	strb	r2, [r3, #2]
  pDevInitStruct-> CPAL_ProgModel     = CPAL_PROGMODEL_DMA;                   /* DMA Programming Model selected */
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2202      	movs	r2, #2
 80004ae:	70da      	strb	r2, [r3, #3]
  pDevInitStruct-> pCPAL_TransferTx   = pNULL;                                /* Point pCPAL_TransferTx to a Null pointer */
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2200      	movs	r2, #0
 80004b4:	605a      	str	r2, [r3, #4]
  pDevInitStruct-> pCPAL_TransferRx   = pNULL;                                /* Point pCPAL_TransferRx to a Null pointer */ 
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  pDevInitStruct-> CPAL_State         = CPAL_STATE_DISABLED;                  /* Device Disabled */
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	731a      	strb	r2, [r3, #12]
  pDevInitStruct-> wCPAL_DevError     = CPAL_I2C_ERR_NONE;                    /* No Device Error */
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  pDevInitStruct-> wCPAL_Options      = ((uint32_t)0x00000000);               /* No Options selected */
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
  pDevInitStruct-> wCPAL_Timeout      = ((uint32_t)CPAL_I2C_TIMEOUT_DEFAULT); /* Set timeout value to CPAL_I2C_TIMEOUT_DEFAULT */
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f04f 32ff 	mov.w	r2, #4294967295
 80004d4:	619a      	str	r2, [r3, #24]
  pDevInitStruct-> pCPAL_I2C_Struct   = &I2C_InitStructure;                   /* Point to I2C_InitStructure (with default values) */
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <CPAL_I2C_StructInit+0x80>)
 80004da:	61da      	str	r2, [r3, #28]
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_StructInit> : I2C Device Structure set to Default Value"); 
  
  return CPAL_PASS;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000080 	.word	0x20000080
 80004f0:	000186a0 	.word	0x000186a0

080004f4 <CPAL_I2C_Read>:
  *         from a selected device in a selected location address.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Read(CPAL_InitTypeDef* pDevInitStruct)
{    
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
          - Enable Event Interrupt                                               */
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_Read> : I2C Device Perform Read OP");
  
   /* If Device is Busy (a transaction is still on going) Exit Read function */
   if (((pDevInitStruct->CPAL_State & CPAL_STATE_BUSY) != 0)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	7b1b      	ldrb	r3, [r3, #12]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	2b00      	cmp	r3, #0
 8000508:	d109      	bne.n	800051e <CPAL_I2C_Read+0x2a>
      || (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	7b1b      	ldrb	r3, [r3, #12]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b03      	cmp	r3, #3
 8000512:	d004      	beq.n	800051e <CPAL_I2C_Read+0x2a>
      || (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX))
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7b1b      	ldrb	r3, [r3, #12]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b05      	cmp	r3, #5
 800051c:	d101      	bne.n	8000522 <CPAL_I2C_Read+0x2e>
  {
    CPAL_LOG("\n\rERROR : I2C Device Busy"); 
    
    return CPAL_FAIL;
 800051e:	2301      	movs	r3, #1
 8000520:	e178      	b.n	8000814 <CPAL_I2C_Read+0x320>
  }  
  /* If CPAL_State is CPAL_STATE_DISABLED (device is not initialized) Exit Read function */  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_DISABLED)  
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7b1b      	ldrb	r3, [r3, #12]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	d101      	bne.n	8000530 <CPAL_I2C_Read+0x3c>
  {
    CPAL_LOG("\n\rERROR : I2C Device Not Initialized"); 
    
    return CPAL_FAIL;
 800052c:	2301      	movs	r3, #1
 800052e:	e171      	b.n	8000814 <CPAL_I2C_Read+0x320>
  }  
  /* If CPAL_State is CPAL_STATE_ERROR (Error occurred ) */
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_ERROR)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7b1b      	ldrb	r3, [r3, #12]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b10      	cmp	r3, #16
 8000538:	d101      	bne.n	800053e <CPAL_I2C_Read+0x4a>
  {
    CPAL_LOG("\n\rERROR : I2C Device Error"); 
    
    return CPAL_FAIL;
 800053a:	2301      	movs	r3, #1
 800053c:	e16a      	b.n	8000814 <CPAL_I2C_Read+0x320>
  }  
  /* If CPAL_State is CPAL_STATE_READY */
  else
  {
    /* Update CPAL_State to CPAL_STATE_BUSY */
    pDevInitStruct->CPAL_State = CPAL_STATE_BUSY;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2202      	movs	r2, #2
 8000542:	731a      	strb	r2, [r3, #12]
   
    /* No Stop Condition Generation Mode option bit not selected */   
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP_MODE) == 0)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800054c:	2b00      	cmp	r3, #0
 800054e:	d129      	bne.n	80005a4 <CPAL_I2C_Read+0xb0>
    {
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2206      	movs	r2, #6
 8000554:	619a      	str	r2, [r3, #24]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	4b94      	ldr	r3, [pc, #592]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 800055e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000562:	8b1b      	ldrh	r3, [r3, #24]
 8000564:	b29b      	uxth	r3, r3
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d008      	beq.n	8000580 <CPAL_I2C_Read+0x8c>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d004      	beq.n	8000580 <CPAL_I2C_Read+0x8c>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057e:	d1ea      	bne.n	8000556 <CPAL_I2C_Read+0x62>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d004      	beq.n	8000592 <CPAL_I2C_Read+0x9e>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000590:	d104      	bne.n	800059c <CPAL_I2C_Read+0xa8>
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 fae0 	bl	8000b58 <CPAL_I2C_Timeout>
 8000598:	4603      	mov	r3, r0
 800059a:	e13b      	b.n	8000814 <CPAL_I2C_Read+0x320>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f04f 32ff 	mov.w	r2, #4294967295
 80005a2:	619a      	str	r2, [r3, #24]
    }
#endif /* CPAL_I2C_DMA_1BYTE_CASE */
    
#ifdef CPAL_I2C_MASTER_MODE    
    /* If "No Memory Address" Option Bit is not selected and Master Mode selected */
    if (((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0) 
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f040 80f5 	bne.w	800079c <CPAL_I2C_Read+0x2a8>
       && (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER ))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	789b      	ldrb	r3, [r3, #2]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f040 80f0 	bne.w	800079c <CPAL_I2C_Read+0x2a8>
    {       
      CPAL_LOG("\n\rLOG : I2C Device Master No Addr Mem Mode");
      
      /* Generate Start */
      __CPAL_I2C_HAL_START(pDevInitStruct->CPAL_Dev);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b7b      	ldr	r3, [pc, #492]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 80005c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4b77      	ldr	r3, [pc, #476]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 80005d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80005d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005dc:	b292      	uxth	r2, r2
 80005de:	801a      	strh	r2, [r3, #0]
      
      /* Wait until SB flag is set */
      __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_SB(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_SB);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	221f      	movs	r2, #31
 80005e4:	619a      	str	r2, [r3, #24]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b70      	ldr	r3, [pc, #448]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 80005ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f2:	8a9b      	ldrh	r3, [r3, #20]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d108      	bne.n	8000610 <CPAL_I2C_Read+0x11c>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d004      	beq.n	8000610 <CPAL_I2C_Read+0x11c>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060e:	d1ea      	bne.n	80005e6 <CPAL_I2C_Read+0xf2>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d004      	beq.n	8000622 <CPAL_I2C_Read+0x12e>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000620:	d104      	bne.n	800062c <CPAL_I2C_Read+0x138>
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 fa98 	bl	8000b58 <CPAL_I2C_Timeout>
 8000628:	4603      	mov	r3, r0
 800062a:	e0f3      	b.n	8000814 <CPAL_I2C_Read+0x320>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f04f 32ff 	mov.w	r2, #4294967295
 8000632:	619a      	str	r2, [r3, #24]
      
      /* Send Device Address */
      /* If 7 Bit Addressing Mode */
      if (pDevInitStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress == I2C_AcknowledgedAddress_7bit)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	899b      	ldrh	r3, [r3, #12]
 800063a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800063e:	d138      	bne.n	80006b2 <CPAL_I2C_Read+0x1be>
      {             
        /* Send Slave address with bit0 reset for write -- ORIGINAL */
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr1) & (uint8_t)(~I2C_OAR1_ADD0)));   
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	b29a      	uxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	4b57      	ldr	r3, [pc, #348]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 8000652:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000656:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800065a:	b292      	uxth	r2, r2
 800065c:	821a      	strh	r2, [r3, #16]
        /* Send Slave address with bit0 set for read for MCP */
        // __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr1)));   
        
        /* Wait until ADDR flag is reset */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_ADDR(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_ADDR);        
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2204      	movs	r2, #4
 8000662:	619a      	str	r2, [r3, #24]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b51      	ldr	r3, [pc, #324]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 800066c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000670:	8a9b      	ldrh	r3, [r3, #20]
 8000672:	b29b      	uxth	r3, r3
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	2b00      	cmp	r3, #0
 800067a:	d108      	bne.n	800068e <CPAL_I2C_Read+0x19a>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d004      	beq.n	800068e <CPAL_I2C_Read+0x19a>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d1ea      	bne.n	8000664 <CPAL_I2C_Read+0x170>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d004      	beq.n	80006a0 <CPAL_I2C_Read+0x1ac>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069e:	d104      	bne.n	80006aa <CPAL_I2C_Read+0x1b6>
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 fa59 	bl	8000b58 <CPAL_I2C_Timeout>
 80006a6:	4603      	mov	r3, r0
 80006a8:	e0b4      	b.n	8000814 <CPAL_I2C_Read+0x320>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	619a      	str	r2, [r3, #24]
  #endif /* CPAL_I2C_10BIT_ADDR_MODE */     
      
      CPAL_LOG("\n\rLOG : I2C Device Target Address Sent ");
      
      /* Clear ADDR flag: (Read SR1 followed by read of SR2), SR1 read operation is already done */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev); 
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 80006ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006be:	8a9b      	ldrh	r3, [r3, #20]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 80006c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006cc:	8b1b      	ldrh	r3, [r3, #24]
      
      /* Wait until TXE flag is set */ 
      __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2203      	movs	r2, #3
 80006d2:	619a      	str	r2, [r3, #24]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 80006dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e0:	8a9b      	ldrh	r3, [r3, #20]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d108      	bne.n	80006fe <CPAL_I2C_Read+0x20a>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d004      	beq.n	80006fe <CPAL_I2C_Read+0x20a>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006fc:	d1ea      	bne.n	80006d4 <CPAL_I2C_Read+0x1e0>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d004      	beq.n	8000710 <CPAL_I2C_Read+0x21c>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070e:	d104      	bne.n	800071a <CPAL_I2C_Read+0x226>
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 fa21 	bl	8000b58 <CPAL_I2C_Timeout>
 8000716:	4603      	mov	r3, r0
 8000718:	e07c      	b.n	8000814 <CPAL_I2C_Read+0x320>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	619a      	str	r2, [r3, #24]
      
      /* If 8 Bit register mode */
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_16BIT_REG) == 0)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d142      	bne.n	80007b4 <CPAL_I2C_Read+0x2c0>
      {
        /* Send Register Address */
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(((pDevInitStruct->pCPAL_TransferRx->wAddr2)& 0x00FF))); 
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 800073e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000742:	b292      	uxth	r2, r2
 8000744:	821a      	strh	r2, [r3, #16]
        
        /* Wait until TXE flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2203      	movs	r2, #3
 800074a:	619a      	str	r2, [r3, #24]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <CPAL_I2C_Read+0x2bc>)
 8000754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000758:	8a9b      	ldrh	r3, [r3, #20]
 800075a:	b29b      	uxth	r3, r3
 800075c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000760:	2b00      	cmp	r3, #0
 8000762:	d108      	bne.n	8000776 <CPAL_I2C_Read+0x282>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d004      	beq.n	8000776 <CPAL_I2C_Read+0x282>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000774:	d1ea      	bne.n	800074c <CPAL_I2C_Read+0x258>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d004      	beq.n	8000788 <CPAL_I2C_Read+0x294>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000786:	d104      	bne.n	8000792 <CPAL_I2C_Read+0x29e>
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f9e5 	bl	8000b58 <CPAL_I2C_Timeout>
 800078e:	4603      	mov	r3, r0
 8000790:	e040      	b.n	8000814 <CPAL_I2C_Read+0x320>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	619a      	str	r2, [r3, #24]
        /* Wait until TXE flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
      }      
  #endif /* CPAL_16BIT_REG_OPTION */
      
      CPAL_LOG("\n\rLOG : I2C Device Target Memory Address Sent");      
 800079a:	e00b      	b.n	80007b4 <CPAL_I2C_Read+0x2c0>
    }  
   else 
#endif /* CPAL_I2C_MASTER_MODE */   
      if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_DMA)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	78db      	ldrb	r3, [r3, #3]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d108      	bne.n	80007b6 <CPAL_I2C_Read+0x2c2>
    {     
      CPAL_LOG("\n\rLOG : I2C Device Master No Memory Address Mode ");
      
       /* Switch Programing Mode Enable DMA or IT Buffer */
      CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_RX);
 80007a4:	2102      	movs	r1, #2
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 fe6e 	bl	8001488 <CPAL_I2C_Enable_DMA_IT>
 80007ac:	e003      	b.n	80007b6 <CPAL_I2C_Read+0x2c2>
 80007ae:	bf00      	nop
 80007b0:	2000002c 	.word	0x2000002c
      CPAL_LOG("\n\rLOG : I2C Device Target Memory Address Sent");      
 80007b4:	bf00      	nop
    }   
    
    /* Update CPAL_State to CPAL_STATE_READY_RX */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY_RX;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2205      	movs	r2, #5
 80007ba:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rLOG : I2C Device Ready RX"); 
        
    
    /* If Master Mode selected */
    if (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER )
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d114      	bne.n	80007ee <CPAL_I2C_Read+0x2fa>
    {
#ifdef CPAL_I2C_MASTER_MODE 
      CPAL_LOG("\n\rLOG : I2C Device Master");
      
      /* Generate Start */
     __CPAL_I2C_HAL_START(pDevInitStruct->CPAL_Dev);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <CPAL_I2C_Read+0x328>)
 80007cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <CPAL_I2C_Read+0x328>)
 80007dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007e4:	b292      	uxth	r2, r2
 80007e6:	801a      	strh	r2, [r3, #0]
      
     CPAL_LOG("\n\rLOG : I2C Device Generates Start"); 
         
      /* Initialize Timeout value */
      pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_SB;      
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	221f      	movs	r2, #31
 80007ec:	619a      	str	r2, [r3, #24]
    } 
    
    CPAL_LOG("\n\rLOG : I2C Device EVT IT Enabled");   
    
    /* Enable EVENT Interrupts*/
     __CPAL_I2C_HAL_ENABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <CPAL_I2C_Read+0x328>)
 80007f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <CPAL_I2C_Read+0x328>)
 8000806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800080a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800080e:	b292      	uxth	r2, r2
 8000810:	809a      	strh	r2, [r3, #4]
  }
  
  return CPAL_PASS;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000002c 	.word	0x2000002c

08000820 <CPAL_I2C_EV_IRQHandler>:
  *         and for transfer phase in case of using Interrupt Programming Model.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_EV_IRQHandler( CPAL_InitTypeDef* pDevInitStruct)
{     
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  __IO uint16_t I2CFlagStatus = 0x0000;
 8000828:	2300      	movs	r3, #0
 800082a:	81fb      	strh	r3, [r7, #14]
  
  /* Read I2C1 Status Registers 1 and 2 */
  I2CFlagStatus = __CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev); 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <CPAL_I2C_EV_IRQHandler+0xa4>)
 8000834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000838:	8a9b      	ldrh	r3, [r3, #20]
 800083a:	b29b      	uxth	r3, r3
 800083c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000840:	b29b      	uxth	r3, r3
 8000842:	81fb      	strh	r3, [r7, #14]
 
#ifdef CPAL_I2C_MASTER_MODE
  /*----------------------------------------------------------------------------------------------*/
  /*---------------------------------- If Master Mode selected ----------------------------------*/
  if (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d135      	bne.n	80008b8 <CPAL_I2C_EV_IRQHandler+0x98>
  { 
    /*----------------------------------------*/  
    /*------------- If SB event --------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_SB ) != 0)
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	b29b      	uxth	r3, r3
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d004      	beq.n	8000862 <CPAL_I2C_EV_IRQHandler+0x42>
    {       
      return I2C_MASTER_START_Handle(pDevInitStruct);        
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f993 	bl	8000b84 <I2C_MASTER_START_Handle>
 800085e:	4603      	mov	r3, r0
 8000860:	e02b      	b.n	80008ba <CPAL_I2C_EV_IRQHandler+0x9a>
    } 
    
    /*----------------------------------------*/
    /*------------- If ADDR event ------------*/
    if((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_ADDR ) != 0)
 8000862:	89fb      	ldrh	r3, [r7, #14]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d004      	beq.n	8000878 <CPAL_I2C_EV_IRQHandler+0x58>
    {  
      return I2C_MASTER_ADDR_Handle(pDevInitStruct);              
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f9cc 	bl	8000c0c <I2C_MASTER_ADDR_Handle>
 8000874:	4603      	mov	r3, r0
 8000876:	e020      	b.n	80008ba <CPAL_I2C_EV_IRQHandler+0x9a>
 #endif /* CPAL_I2C_10BIT_ADDR_MODE */
    
 #ifdef CPAL_I2C_IT_PROGMODEL   
    /*----------------------------------------*/
    /*------------- If TXE event -------------*/
    if (((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_TXE) != 0) && (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX))
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b29b      	uxth	r3, r3
 800087c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000880:	2b00      	cmp	r3, #0
 8000882:	d009      	beq.n	8000898 <CPAL_I2C_EV_IRQHandler+0x78>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7b1b      	ldrb	r3, [r3, #12]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b06      	cmp	r3, #6
 800088c:	d104      	bne.n	8000898 <CPAL_I2C_EV_IRQHandler+0x78>
    {  
      return I2C_MASTER_TXE_Handle(pDevInitStruct); 
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 fb02 	bl	8000e98 <I2C_MASTER_TXE_Handle>
 8000894:	4603      	mov	r3, r0
 8000896:	e010      	b.n	80008ba <CPAL_I2C_EV_IRQHandler+0x9a>
 #endif /* CPAL_I2C_IT_PROGMODEL */
    
 #if defined (CPAL_I2C_IT_PROGMODEL) || defined (CPAL_I2C_DMA_1BYTE_CASE)    
    /*----------------------------------------*/
    /*------------- If RXNE event ------------*/
    if (((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_RXNE) != 0) && (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX))
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	b29b      	uxth	r3, r3
 800089c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d009      	beq.n	80008b8 <CPAL_I2C_EV_IRQHandler+0x98>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7b1b      	ldrb	r3, [r3, #12]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b0a      	cmp	r3, #10
 80008ac:	d104      	bne.n	80008b8 <CPAL_I2C_EV_IRQHandler+0x98>
    { 
      return I2C_MASTER_RXNE_Handle(pDevInitStruct); 
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 fbbe 	bl	8001030 <I2C_MASTER_RXNE_Handle>
 80008b4:	4603      	mov	r3, r0
 80008b6:	e000      	b.n	80008ba <CPAL_I2C_EV_IRQHandler+0x9a>
      return I2C_SLAVE_STOP_Handle(pDevInitStruct); 
    }
  }
#endif /* CPAL_I2C_SLAVE_MODE */
  
  return CPAL_PASS;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000002c 	.word	0x2000002c

080008c8 <CPAL_I2C_ER_IRQHandler>:
  *         user functions.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_ER_IRQHandler(CPAL_InitTypeDef* pDevInitStruct)
{  
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* If AF detected in Slave mode transmitter */
  if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && (pDevInitStruct->pCPAL_TransferTx->wNumData == 0) &&
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	789b      	ldrb	r3, [r3, #2]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d16e      	bne.n	80009b6 <CPAL_I2C_ER_IRQHandler+0xee>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d169      	bne.n	80009b6 <CPAL_I2C_ER_IRQHandler+0xee>
      ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) || (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7b1b      	ldrb	r3, [r3, #12]
 80008e6:	b2db      	uxtb	r3, r3
  if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && (pDevInitStruct->pCPAL_TransferTx->wNumData == 0) &&
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d004      	beq.n	80008f6 <CPAL_I2C_ER_IRQHandler+0x2e>
      ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) || (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)))
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7b1b      	ldrb	r3, [r3, #12]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d15f      	bne.n	80009b6 <CPAL_I2C_ER_IRQHandler+0xee>
  {      
    /* Clear error flags that can be cleared by writing to SR register */
    __CPAL_I2C_HAL_CLEAR_ERROR((pDevInitStruct->CPAL_Dev));  
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b6b      	ldr	r3, [pc, #428]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 80008fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000902:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8000906:	829a      	strh	r2, [r3, #20]
    
    /* If Interrupt Programming Model */
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	2b01      	cmp	r3, #1
 800090e:	f040 80c8 	bne.w	8000aa2 <CPAL_I2C_ER_IRQHandler+0x1da>
    {  
#ifdef CPAL_I2C_IT_PROGMODEL  
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	4b64      	ldr	r3, [pc, #400]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800091a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091e:	889b      	ldrh	r3, [r3, #4]
 8000920:	b29a      	uxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	4b60      	ldr	r3, [pc, #384]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800092a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800092e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000932:	b292      	uxth	r2, r2
 8000934:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800093e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000942:	889b      	ldrh	r3, [r3, #4]
 8000944:	b29a      	uxth	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	4b57      	ldr	r3, [pc, #348]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 800094e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000956:	b292      	uxth	r2, r2
 8000958:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device BUFF IT Disabled"); 
      
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2206      	movs	r2, #6
 800095e:	619a      	str	r2, [r3, #24]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b51      	ldr	r3, [pc, #324]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096c:	8b1b      	ldrh	r3, [r3, #24]
 800096e:	b29b      	uxth	r3, r3
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d008      	beq.n	800098a <CPAL_I2C_ER_IRQHandler+0xc2>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d004      	beq.n	800098a <CPAL_I2C_ER_IRQHandler+0xc2>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d1ea      	bne.n	8000960 <CPAL_I2C_ER_IRQHandler+0x98>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d004      	beq.n	800099c <CPAL_I2C_ER_IRQHandler+0xd4>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099a:	d104      	bne.n	80009a6 <CPAL_I2C_ER_IRQHandler+0xde>
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f8db 	bl	8000b58 <CPAL_I2C_Timeout>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e07e      	b.n	8000aa4 <CPAL_I2C_ER_IRQHandler+0x1dc>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	619a      	str	r2, [r3, #24]
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY;  
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	731a      	strb	r2, [r3, #12]
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 80009b4:	e075      	b.n	8000aa2 <CPAL_I2C_ER_IRQHandler+0x1da>
    }   
  }  
  else
  {
    /* Read Error Register and affect to wCPAL_DevError */
    pDevInitStruct->wCPAL_DevError = __CPAL_I2C_HAL_GET_ERROR(pDevInitStruct->CPAL_Dev);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	8a9b      	ldrh	r3, [r3, #20]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	611a      	str	r2, [r3, #16]
    
    /* Set Device state to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2210      	movs	r2, #16
 80009d2:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\r\n\rERROR <CPAL_I2C_ErrorHandler> : I2C Device Error"); 
    
    /* Clear error flags that can be cleared by writing to SR register */
    __CPAL_I2C_HAL_CLEAR_ERROR((pDevInitStruct->CPAL_Dev)); 
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 80009dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e0:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 80009e4:	829a      	strh	r2, [r3, #20]
    
    /* If Bus error occurred ---------------------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_BERR) != 0)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d025      	beq.n	8000a3e <CPAL_I2C_ER_IRQHandler+0x176>
    {      
      CPAL_LOG("\n\rERROR : I2C Device BERR"); 
      
      /* Generate I2C software reset in order to release SDA and SCL lines */
      __CPAL_I2C_HAL_SWRST(pDevInitStruct->CPAL_Dev);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 80009fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4a28      	ldr	r2, [pc, #160]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000a0a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	8013      	strh	r3, [r2, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000a32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a36:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	801a      	strh	r2, [r3, #0]
      CPAL_I2C_BERR_UserCallback(pDevInitStruct->CPAL_Dev);    
#endif /* USE_MULTIPLE_ERROR_CALLBACK */
    }
    
    /* If Arbitration Loss error occurred --------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_ARLO) != 0)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d025      	beq.n	8000a96 <CPAL_I2C_ER_IRQHandler+0x1ce>
    {
      CPAL_LOG("\n\rERROR : I2C Device ARLO"); 
      
      /* Generate I2C software reset in order to release SDA and SCL lines */    
      __CPAL_I2C_HAL_SWRST(pDevInitStruct->CPAL_Dev);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000a62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	8013      	strh	r3, [r2, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000a8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a8e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000a92:	b292      	uxth	r2, r2
 8000a94:	801a      	strh	r2, [r3, #0]
      CPAL_I2C_ARLO_UserCallback(pDevInitStruct->CPAL_Dev);  
#endif /* USE_MULTIPLE_ERROR_CALLBACK */    
    }
    
    /* If Overrun error occurred -----------------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_OVR) != 0)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691b      	ldr	r3, [r3, #16]
      CPAL_I2C_OVR_UserCallback(pDevInitStruct->CPAL_Dev);
#endif /* USE_MULTIPLE_ERROR_CALLBACK */    
    }
        
    /* If Acknowledge Failure error occurred -----------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_AF) != 0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	691b      	ldr	r3, [r3, #16]
    }   
        
    /* USE_SINGLE_ERROR_CALLBACK is defined in cpal_conf.h file */
#if defined(USE_SINGLE_ERROR_CALLBACK)  
    /* Call Error UserCallback */  
    CPAL_I2C_ERR_UserCallback(pDevInitStruct->CPAL_Dev, pDevInitStruct->wCPAL_DevError);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	691b      	ldr	r3, [r3, #16]
#endif /* USE_SINGLE_ERROR_CALLBACK */
  }
  
  return CPAL_PASS;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000002c 	.word	0x2000002c

08000ab0 <SysTick_Handler>:
  * @brief  This function Manages I2C Timeouts when waiting for specific events.
  * @param  None
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
void CPAL_I2C_TIMEOUT_Manager(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  uint32_t index = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  
  /* Manage I2C timeouts conditions */
  for (index = 0; index < CPAL_I2C_DEV_NUM; index ++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	e040      	b.n	8000b42 <SysTick_Handler+0x92>
  {
    if (I2C_DevStructures[index] != pNULL)
 8000ac0:	4a24      	ldr	r2, [pc, #144]	; (8000b54 <SysTick_Handler+0xa4>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d037      	beq.n	8000b3c <SysTick_Handler+0x8c>
    {
      /* If Timeout occurred  */
      if (I2C_DevStructures[index]->wCPAL_Timeout == CPAL_I2C_TIMEOUT_DETECTED)
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <SysTick_Handler+0xa4>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d121      	bne.n	8000b1e <SysTick_Handler+0x6e>
      {
        /* Reinitialize Timeout Value */
        I2C_DevStructures[index]->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <SysTick_Handler+0xa4>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae6:	619a      	str	r2, [r3, #24]
        
        /* update CPAL_State to CPAL_STATE_ERROR */
        I2C_DevStructures[index]->CPAL_State = CPAL_STATE_ERROR;
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <SysTick_Handler+0xa4>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2210      	movs	r2, #16
 8000af2:	731a      	strb	r2, [r3, #12]
        
        /* In case of Device Error Timeout_Callback should not be called */
        if (I2C_DevStructures[index]->wCPAL_DevError == CPAL_I2C_ERR_NONE)
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <SysTick_Handler+0xa4>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d11c      	bne.n	8000b3c <SysTick_Handler+0x8c>
        {        
          /* update wCPAL_DevError to CPAL_I2C_ERR_TIMEOUT */
          I2C_DevStructures[index]->wCPAL_DevError = CPAL_I2C_ERR_TIMEOUT;
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <SysTick_Handler+0xa4>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	611a      	str	r2, [r3, #16]
          
          CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_TIMEOUT_Manager> : I2C Device Timeout Error");
          
          /* Call CPAL_TIMEOUT_UserCallback */
          CPAL_TIMEOUT_UserCallback(I2C_DevStructures[index]);
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <SysTick_Handler+0xa4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fe38 	bl	800178c <CPAL_TIMEOUT_UserCallback>
 8000b1c:	e00e      	b.n	8000b3c <SysTick_Handler+0x8c>
        }              
      }     
       /* If Timeout is triggered (wCPAL_Timeout != CPAL_I2C_TIMEOUT_DEFAULT)*/
      else if (I2C_DevStructures[index]->wCPAL_Timeout != CPAL_I2C_TIMEOUT_DEFAULT)
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <SysTick_Handler+0xa4>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d006      	beq.n	8000b3c <SysTick_Handler+0x8c>
      {
        /* Decrement the timeout value */
        I2C_DevStructures[index]->wCPAL_Timeout--;
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <SysTick_Handler+0xa4>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	699a      	ldr	r2, [r3, #24]
 8000b38:	3a01      	subs	r2, #1
 8000b3a:	619a      	str	r2, [r3, #24]
  for (index = 0; index < CPAL_I2C_DEV_NUM; index ++)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d9bb      	bls.n	8000ac0 <SysTick_Handler+0x10>
      } 
    }
  }  
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000

08000b58 <CPAL_I2C_Timeout>:
  * @brief  This function Manages I2C Timeouts when Timeout occurred.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Timeout (CPAL_InitTypeDef* pDevInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f04f 32ff 	mov.w	r2, #4294967295
 8000b66:	619a      	str	r2, [r3, #24]
  
  /* update CPAL_State to CPAL_STATE_ERROR */
  pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	731a      	strb	r2, [r3, #12]
  
  /* update wCPAL_DevError to CPAL_I2C_ERR_TIMEOUT */
  pDevInitStruct->wCPAL_DevError = CPAL_I2C_ERR_TIMEOUT;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	22ff      	movs	r2, #255	; 0xff
 8000b72:	611a      	str	r2, [r3, #16]
  
  /* Call Timeout Callback and quit current function */
  return (CPAL_TIMEOUT_UserCallback(pDevInitStruct));
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fe09 	bl	800178c <CPAL_TIMEOUT_UserCallback>
 8000b7a:	4603      	mov	r3, r0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <I2C_MASTER_START_Handle>:
  * @brief  Handles Master Start condition (SB) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_START_Handle(CPAL_InitTypeDef* pDevInitStruct)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Declare local variable that contains Address Header */
  uint8_t I2CHeaderAddress = 0x00;
  #endif /* CPAL_I2C_10BIT_ADDR_MODE */

  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b92:	619a      	str	r2, [r3, #24]
  CPAL_LOG("\n\r\n\rLOG <I2C_EV_IRQHandler> : I2C Device Master IT"); 
  
  CPAL_LOG("\n\rLOG : I2C Device Start Acknowledged"); 
  
  /* If 7 bit Addressing Mode selected */
  if (pDevInitStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress == I2C_AcknowledgedAddress_7bit)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	899b      	ldrh	r3, [r3, #12]
 8000b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b9e:	d12c      	bne.n	8000bfa <I2C_MASTER_START_Handle+0x76>
  {        
    CPAL_LOG("\n\rLOG : I2C Device 7bit Address");
    
    /* Send Address */
    /* If Master run as receiver */
    if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b05      	cmp	r3, #5
 8000ba8:	d112      	bne.n	8000bd0 <I2C_MASTER_START_Handle+0x4c>
    {
      /* Send Slave address with bit0 set for read */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr1) | I2C_OAR1_ADD0));  
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <I2C_MASTER_START_Handle+0x84>)
 8000bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000bc4:	b292      	uxth	r2, r2
 8000bc6:	821a      	strh	r2, [r3, #16]
      
      /* Update CPAL_State to CPAL_STATE_BUSY */
      pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_RX; 
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	220a      	movs	r2, #10
 8000bcc:	731a      	strb	r2, [r3, #12]
 8000bce:	e011      	b.n	8000bf4 <I2C_MASTER_START_Handle+0x70>
    }    
    /* If Master run as Transmitter */
    else
    {
      /* Send Slave address with bit0 reset for write */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr1) & (~I2C_OAR1_ADD0)));        
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <I2C_MASTER_START_Handle+0x84>)
 8000be2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000be6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000bea:	b292      	uxth	r2, r2
 8000bec:	821a      	strh	r2, [r3, #16]
      
      /* Update CPAL_State to CPAL_STATE_BUSY */
      pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_TX; 
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	731a      	strb	r2, [r3, #12]
    }
    
    CPAL_LOG("\n\rLOG : I2C Device Target Address Sent");
    
    /* Initialize Timeout value */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_ADDR;             
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	619a      	str	r2, [r3, #24]
    /* Activate POS bit */
    __CPAL_I2C_HAL_ENABLE_POS(pDevInitStruct->CPAL_Dev);
  }
 #endif /* CPAL_I2C_CLOSECOM_METHOD2 */
#endif  
  return CPAL_PASS;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	2000002c 	.word	0x2000002c

08000c0c <I2C_MASTER_ADDR_Handle>:
  * @brief  Handles Master address matched (ADDR) interrupt event. 
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_ADDR_Handle(CPAL_InitTypeDef* pDevInitStruct)
{     
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Initialize Timeout value (1 ms for each data to be sent/received) */
  if (pDevInitStruct->CPAL_ProgModel != CPAL_PROGMODEL_DMA)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d004      	beq.n	8000c26 <I2C_MASTER_ADDR_Handle+0x1a>
  {
    /* Reinitialize Timeout Value to default (no timeout initiated) */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;                
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c22:	619a      	str	r2, [r3, #24]
 8000c24:	e01b      	b.n	8000c5e <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7b1b      	ldrb	r3, [r3, #12]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b06      	cmp	r3, #6
 8000c2e:	d106      	bne.n	8000c3e <I2C_MASTER_ADDR_Handle+0x32>
  {
    /* Set 1ms timeout for each data transfer in case of DMA Tx mode */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + pDevInitStruct->pCPAL_TransferTx->wNumData;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
 8000c3c:	e00f      	b.n	8000c5e <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7b1b      	ldrb	r3, [r3, #12]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b0a      	cmp	r3, #10
 8000c46:	d106      	bne.n	8000c56 <I2C_MASTER_ADDR_Handle+0x4a>
  {
    /* Set 1ms timeout for each data transfer in case of DMA Rx mode */ 
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + pDevInitStruct->pCPAL_TransferRx->wNumData;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	619a      	str	r2, [r3, #24]
 8000c54:	e003      	b.n	8000c5e <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else
  {
    /* Reinitialize Timeout Value to default (no timeout initiated) */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;        
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	619a      	str	r2, [r3, #24]
  }
  
  if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 0))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7b1b      	ldrb	r3, [r3, #12]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b0a      	cmp	r3, #10
 8000c66:	d12c      	bne.n	8000cc2 <I2C_MASTER_ADDR_Handle+0xb6>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	78db      	ldrb	r3, [r3, #3]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d128      	bne.n	8000cc2 <I2C_MASTER_ADDR_Handle+0xb6>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d123      	bne.n	8000cc2 <I2C_MASTER_ADDR_Handle+0xb6>
  {    
    /* Program STOP bit then clear ADDR flag */
    __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev); 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4b80      	ldr	r3, [pc, #512]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	801a      	strh	r2, [r3, #0]
    __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b7b      	ldr	r3, [pc, #492]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000caa:	8a9b      	ldrh	r3, [r3, #20]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b78      	ldr	r3, [pc, #480]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Update CPAL_State to CPAL_STATE_READY */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	731a      	strb	r2, [r3, #12]
 8000cc0:	e0e3      	b.n	8000e8a <I2C_MASTER_ADDR_Handle+0x27e>
  }
  else
  {
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7b1b      	ldrb	r3, [r3, #12]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b0a      	cmp	r3, #10
 8000cca:	d107      	bne.n	8000cdc <I2C_MASTER_ADDR_Handle+0xd0>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	78db      	ldrb	r3, [r3, #3]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d103      	bne.n	8000cdc <I2C_MASTER_ADDR_Handle+0xd0>
    {       
      /* Switch Programing Mode Enable DMA or IT Buffer */
      CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_RX);
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 fbd6 	bl	8001488 <CPAL_I2C_Enable_DMA_IT>
    }
  
#if defined (STM32L1XX_MD) || defined (STM32L1XX_HD) || defined (STM32F2XX) || defined (STM32F4XX) 
    /* If CPAL_State is CPAL_STATE_BUSY_RX and receiving one byte */  
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 1))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7b1b      	ldrb	r3, [r3, #12]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d137      	bne.n	8000d56 <I2C_MASTER_ADDR_Handle+0x14a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d132      	bne.n	8000d56 <I2C_MASTER_ADDR_Handle+0x14a>
    { 
      /* Disable Acknowledge */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b67      	ldr	r3, [pc, #412]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d10:	b292      	uxth	r2, r2
 8000d12:	801a      	strh	r2, [r3, #0]
      
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);   
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	8a9b      	ldrh	r3, [r3, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b5a      	ldr	r3, [pc, #360]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	8b1b      	ldrh	r3, [r3, #24]
      
      /* Program Generation of Stop Condition */
      __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d50:	b292      	uxth	r2, r2
 8000d52:	801a      	strh	r2, [r3, #0]
 8000d54:	e04e      	b.n	8000df4 <I2C_MASTER_ADDR_Handle+0x1e8>
    }  
    else if ((pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT) &&(pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 2))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	78db      	ldrb	r3, [r3, #3]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d13c      	bne.n	8000dd8 <I2C_MASTER_ADDR_Handle+0x1cc>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7b1b      	ldrb	r3, [r3, #12]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b0a      	cmp	r3, #10
 8000d66:	d137      	bne.n	8000dd8 <I2C_MASTER_ADDR_Handle+0x1cc>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d132      	bne.n	8000dd8 <I2C_MASTER_ADDR_Handle+0x1cc>
    {
      /* Disable Acknowledge */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d92:	b292      	uxth	r2, r2
 8000d94:	801a      	strh	r2, [r3, #0]
      
      /* Enable Pos */
      __CPAL_I2C_HAL_ENABLE_POS(pDevInitStruct->CPAL_Dev);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000dae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000db6:	b292      	uxth	r2, r2
 8000db8:	801a      	strh	r2, [r3, #0]
      
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);      
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	8a9b      	ldrh	r3, [r3, #20]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	8b1b      	ldrh	r3, [r3, #24]
 8000dd6:	e00d      	b.n	8000df4 <I2C_MASTER_ADDR_Handle+0x1e8>
    }
    else
    {
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de4:	8a9b      	ldrh	r3, [r3, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df2:	8b1b      	ldrh	r3, [r3, #24]
    else if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0)      
#endif /* CPAL_I2C_10BIT_ADDR_MODE */
    
#ifndef CPAL_I2C_10BIT_ADDR_MODE
      /* If CPAL_OPT_NO_MEM_ADDR is not enabled */
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d144      	bne.n	8000e8a <I2C_MASTER_ADDR_Handle+0x27e>
#endif  /* CPAL_I2C_10BIT_ADDR_MODE */
      {
        /* If CPAL_State is CPAL_STATE_BUSY_TX */  
        if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7b1b      	ldrb	r3, [r3, #12]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d13b      	bne.n	8000e82 <I2C_MASTER_ADDR_Handle+0x276>
        {         
          /* If 8 Bit register mode */
          if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_16BIT_REG) == 0)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d135      	bne.n	8000e82 <I2C_MASTER_ADDR_Handle+0x276>
          {
            /* Send Register Address */
            __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr2)& 0x00FF)); 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000e26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e2a:	b292      	uxth	r2, r2
 8000e2c:	821a      	strh	r2, [r3, #16]
            
            /* Wait until TXE flag is set */ 
            __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE);              
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	619a      	str	r2, [r3, #24]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <I2C_MASTER_ADDR_Handle+0x288>)
 8000e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e40:	8a9b      	ldrh	r3, [r3, #20]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d108      	bne.n	8000e5e <I2C_MASTER_ADDR_Handle+0x252>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d004      	beq.n	8000e5e <I2C_MASTER_ADDR_Handle+0x252>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d1ea      	bne.n	8000e34 <I2C_MASTER_ADDR_Handle+0x228>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d004      	beq.n	8000e70 <I2C_MASTER_ADDR_Handle+0x264>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6e:	d104      	bne.n	8000e7a <I2C_MASTER_ADDR_Handle+0x26e>
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fe71 	bl	8000b58 <CPAL_I2C_Timeout>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e008      	b.n	8000e8c <I2C_MASTER_ADDR_Handle+0x280>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	619a      	str	r2, [r3, #24]
          }     
#endif /* CPAL_16BIT_REG_OPTION */
        }  
        
        /* Switch Programing Mode Enable DMA or IT Buffer */
        CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_TXRX);   
 8000e82:	2103      	movs	r1, #3
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 faff 	bl	8001488 <CPAL_I2C_Enable_DMA_IT>
      }      
  }
  return CPAL_PASS;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000002c 	.word	0x2000002c

08000e98 <I2C_MASTER_TXE_Handle>:
  * @brief  Handles Master transmission (TXE) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_TXE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	78db      	ldrb	r3, [r3, #3]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	f040 80bc 	bne.w	8001022 <I2C_MASTER_TXE_Handle+0x18a>
  {                   
    /* If Buffer end */
    if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01c      	beq.n	8000eee <I2C_MASTER_TXE_Handle+0x56>
    {   
      /* Call TX UserCallback */
      CPAL_I2C_TX_UserCallback(pDevInitStruct);
      
      /* Write Byte */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (*(pDevInitStruct->pCPAL_TransferTx->pbBuffer))); 
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4b5a      	ldr	r3, [pc, #360]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000ec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	821a      	strh	r2, [r3, #16]
      
      /* Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferTx->wNumData--;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	3a01      	subs	r2, #1
 8000ed4:	605a      	str	r2, [r3, #4]
      
      /* If Buffer end */
      if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a0 	beq.w	8001022 <I2C_MASTER_TXE_Handle+0x18a>
      {  
        /* Point to next data */
        pDevInitStruct->pCPAL_TransferTx->pbBuffer++;      
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	3201      	adds	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e099      	b.n	8001022 <I2C_MASTER_TXE_Handle+0x18a>
      }
    }    
    else 
    {
      /* No Stop Condition Generation option bit not selected */ 
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <I2C_MASTER_TXE_Handle+0x86>
      {      
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b4a      	ldr	r3, [pc, #296]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000f12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	801a      	strh	r2, [r3, #0]
      }
      
      CPAL_LOG("\n\rLOG : I2C Device TX Complete");
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b41      	ldr	r3, [pc, #260]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2a:	889b      	ldrh	r3, [r3, #4]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	4b3d      	ldr	r3, [pc, #244]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device TX EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b38      	ldr	r3, [pc, #224]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4e:	889b      	ldrh	r3, [r3, #4]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000f5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f62:	b292      	uxth	r2, r2
 8000f64:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device TX BUFF IT Disabled");
      
      /* No Stop Condition Generation option bit not selected */ 
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d12a      	bne.n	8000fc8 <I2C_MASTER_TXE_Handle+0x130>
      { 
        /* Wait until BTF and TXE flags are reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev) & (I2C_SR1_BTF | I2C_SR1_TXE )), CPAL_I2C_TIMEOUT_BUSY);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2206      	movs	r2, #6
 8000f76:	619a      	str	r2, [r3, #24]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	8a9b      	ldrh	r3, [r3, #20]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f003 0384 	and.w	r3, r3, #132	; 0x84
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d008      	beq.n	8000fa2 <I2C_MASTER_TXE_Handle+0x10a>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d004      	beq.n	8000fa2 <I2C_MASTER_TXE_Handle+0x10a>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d1ea      	bne.n	8000f78 <I2C_MASTER_TXE_Handle+0xe0>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d004      	beq.n	8000fb4 <I2C_MASTER_TXE_Handle+0x11c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb2:	d104      	bne.n	8000fbe <I2C_MASTER_TXE_Handle+0x126>
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fdcf 	bl	8000b58 <CPAL_I2C_Timeout>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e032      	b.n	8001024 <I2C_MASTER_TXE_Handle+0x18c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	619a      	str	r2, [r3, #24]
 8000fc6:	e029      	b.n	800101c <I2C_MASTER_TXE_Handle+0x184>
      }
      else
      {
        /* Wait until BTF flags is reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev) & I2C_SR1_TXE ), CPAL_I2C_TIMEOUT_BUSY);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2206      	movs	r2, #6
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <I2C_MASTER_TXE_Handle+0x194>)
 8000fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fda:	8a9b      	ldrh	r3, [r3, #20]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d008      	beq.n	8000ff8 <I2C_MASTER_TXE_Handle+0x160>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d004      	beq.n	8000ff8 <I2C_MASTER_TXE_Handle+0x160>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff6:	d1ea      	bne.n	8000fce <I2C_MASTER_TXE_Handle+0x136>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d004      	beq.n	800100a <I2C_MASTER_TXE_Handle+0x172>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d104      	bne.n	8001014 <I2C_MASTER_TXE_Handle+0x17c>
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fda4 	bl	8000b58 <CPAL_I2C_Timeout>
 8001010:	4603      	mov	r3, r0
 8001012:	e007      	b.n	8001024 <I2C_MASTER_TXE_Handle+0x18c>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f04f 32ff 	mov.w	r2, #4294967295
 800101a:	619a      	str	r2, [r3, #24]
        
      }
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	731a      	strb	r2, [r3, #12]
      /* Call TX Transfer complete Callback */
      CPAL_I2C_TXTC_UserCallback(pDevInitStruct);       
    }        
  }
  
  return CPAL_PASS;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000002c 	.word	0x2000002c

08001030 <I2C_MASTER_RXNE_Handle>:
  * @brief  Handles Master reception (RXNE flag) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_RXNE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{  
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	78db      	ldrb	r3, [r3, #3]
 800103c:	2b01      	cmp	r3, #1
 800103e:	f040 821c 	bne.w	800147a <I2C_MASTER_RXNE_Handle+0x44a>
  {  
#if defined (STM32L1XX_MD) || defined (STM32L1XX_HD) || defined (STM32F2XX) || defined (STM32F4XX)
    /* if less than 3 bytes remaining for reception */ 
    if (pDevInitStruct->pCPAL_TransferRx->wNumData <= 3)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b03      	cmp	r3, #3
 800104a:	f200 8167 	bhi.w	800131c <I2C_MASTER_RXNE_Handle+0x2ec>
    {  
      /* One byte */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d111      	bne.n	800107c <I2C_MASTER_RXNE_Handle+0x4c>
      {              
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b8e      	ldr	r3, [pc, #568]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	8a1b      	ldrh	r3, [r3, #16]
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;   
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	3a01      	subs	r2, #1
 800107a:	605a      	str	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Stop Programmed");
      }
      
      /* Two bytes */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d176      	bne.n	8001174 <I2C_MASTER_RXNE_Handle+0x144>
      {           
        /* Disable Buffer interrupt */
        __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b82      	ldr	r3, [pc, #520]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	889b      	ldrh	r3, [r3, #4]
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 800109e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010a6:	b292      	uxth	r2, r2
 80010a8:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2205      	movs	r2, #5
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b78      	ldr	r3, [pc, #480]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	8a9b      	ldrh	r3, [r3, #20]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d108      	bne.n	80010da <I2C_MASTER_RXNE_Handle+0xaa>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d004      	beq.n	80010da <I2C_MASTER_RXNE_Handle+0xaa>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d1ea      	bne.n	80010b0 <I2C_MASTER_RXNE_Handle+0x80>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d004      	beq.n	80010ec <I2C_MASTER_RXNE_Handle+0xbc>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ea:	d104      	bne.n	80010f6 <I2C_MASTER_RXNE_Handle+0xc6>
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fd33 	bl	8000b58 <CPAL_I2C_Timeout>
 80010f2:	4603      	mov	r3, r0
 80010f4:	e1c2      	b.n	800147c <I2C_MASTER_RXNE_Handle+0x44c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	619a      	str	r2, [r3, #24]
        
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	4b64      	ldr	r3, [pc, #400]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29a      	uxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	4b60      	ldr	r3, [pc, #384]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800111a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800111e:	b292      	uxth	r2, r2
 8001120:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b5b      	ldr	r3, [pc, #364]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 800112a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112e:	8a1b      	ldrh	r3, [r3, #16]
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	3201      	adds	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	3a01      	subs	r2, #1
 800114e:	605a      	str	r2, [r3, #4]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	8a1b      	ldrh	r3, [r3, #16]
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
        
        /*Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;           
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	3a01      	subs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Stop Programmed");
      }
      
      /* 3 Last bytes */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b03      	cmp	r3, #3
 800117c:	f040 80e5 	bne.w	800134a <I2C_MASTER_RXNE_Handle+0x31a>
      {
        /* Disable Buffer interrupt */
        __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b44      	ldr	r3, [pc, #272]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	4b40      	ldr	r3, [pc, #256]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800119c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011a0:	b292      	uxth	r2, r2
 80011a2:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2205      	movs	r2, #5
 80011a8:	619a      	str	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 80011b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b6:	8a9b      	ldrh	r3, [r3, #20]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d108      	bne.n	80011d4 <I2C_MASTER_RXNE_Handle+0x1a4>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d004      	beq.n	80011d4 <I2C_MASTER_RXNE_Handle+0x1a4>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d2:	d1ea      	bne.n	80011aa <I2C_MASTER_RXNE_Handle+0x17a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d004      	beq.n	80011e6 <I2C_MASTER_RXNE_Handle+0x1b6>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d104      	bne.n	80011f0 <I2C_MASTER_RXNE_Handle+0x1c0>
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fcb6 	bl	8000b58 <CPAL_I2C_Timeout>
 80011ec:	4603      	mov	r3, r0
 80011ee:	e145      	b.n	800147c <I2C_MASTER_RXNE_Handle+0x44c>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	619a      	str	r2, [r3, #24]
        
        /* Program NACK Generation */
        __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001210:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001218:	b292      	uxth	r2, r2
 800121a:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	8a1b      	ldrh	r3, [r3, #16]
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	3201      	adds	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	3a01      	subs	r2, #1
 8001248:	605a      	str	r2, [r3, #4]
        
         /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <I2C_MASTER_RXNE_Handle+0x268>)
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	8a9b      	ldrh	r3, [r3, #20]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <I2C_MASTER_RXNE_Handle+0x24a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d004      	beq.n	800127a <I2C_MASTER_RXNE_Handle+0x24a>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d1ea      	bne.n	8001250 <I2C_MASTER_RXNE_Handle+0x220>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d004      	beq.n	800128c <I2C_MASTER_RXNE_Handle+0x25c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128a:	d107      	bne.n	800129c <I2C_MASTER_RXNE_Handle+0x26c>
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fc63 	bl	8000b58 <CPAL_I2C_Timeout>
 8001292:	4603      	mov	r3, r0
 8001294:	e0f2      	b.n	800147c <I2C_MASTER_RXNE_Handle+0x44c>
 8001296:	bf00      	nop
 8001298:	2000002c 	.word	0x2000002c
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	619a      	str	r2, [r3, #24]
        
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);        
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 80012ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4b72      	ldr	r3, [pc, #456]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 80012bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c4:	b292      	uxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 80012d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d4:	8a1b      	ldrh	r3, [r3, #16]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	3201      	adds	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	3a01      	subs	r2, #1
 80012f4:	605a      	str	r2, [r3, #4]
          
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b61      	ldr	r3, [pc, #388]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 80012fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001302:	8a1b      	ldrh	r3, [r3, #16]
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
        
        /* Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;   
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	3a01      	subs	r2, #1
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	e016      	b.n	800134a <I2C_MASTER_RXNE_Handle+0x31a>
    
    /* if bytes remaining for reception */ 
    else
    {
      /* Read Byte */
      *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b58      	ldr	r3, [pc, #352]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 8001324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001328:	8a1b      	ldrh	r3, [r3, #16]
 800132a:	b29a      	uxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
      
      /* Point to next data and Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	3201      	adds	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
      
      pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	3a01      	subs	r2, #1
 8001348:	605a      	str	r2, [r3, #4]
      /* Call RX UserCallback */
      CPAL_I2C_RX_UserCallback(pDevInitStruct);
    }
    
    /* If All data are received */
    if (pDevInitStruct->pCPAL_TransferRx->wNumData == 0)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	f040 8092 	bne.w	800147a <I2C_MASTER_RXNE_Handle+0x44a>
      CPAL_LOG("\n\rLOG : I2C Device Nack and Stop Generated ");
      
      CPAL_LOG("\n\rLOG : I2C Device RX Complete"); 
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 800135e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 800136e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001372:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001376:	b292      	uxth	r2, r2
 8001378:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device RX EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b40      	ldr	r3, [pc, #256]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001386:	889b      	ldrh	r3, [r3, #4]
 8001388:	b29a      	uxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 8001392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800139a:	b292      	uxth	r2, r2
 800139c:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device RX BUFF IT Disabled");
      
      /* Clear BTF Flag */
      __CPAL_I2C_HAL_CLEAR_BTF(pDevInitStruct->CPAL_Dev);   
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b37      	ldr	r3, [pc, #220]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 80013a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013aa:	8a9b      	ldrh	r3, [r3, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 80013b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b8:	8a1b      	ldrh	r3, [r3, #16]
      
      /* If 1Byte DMA option is selected */
      if ((pDevInitStruct->wCPAL_Options & CPAL_DMA_1BYTE_CASE) != 0)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <I2C_MASTER_RXNE_Handle+0x3a8>
      {
        /* Clear 1Byte DMA option from wCPAL_Options */
        pDevInitStruct->wCPAL_Options &= ~CPAL_DMA_1BYTE_CASE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	615a      	str	r2, [r3, #20]
        
        /* Change ProgModel to DMA */
        pDevInitStruct->CPAL_ProgModel = CPAL_PROGMODEL_DMA;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2202      	movs	r2, #2
 80013d6:	70da      	strb	r2, [r3, #3]
      }
      
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2206      	movs	r2, #6
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 80013e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ea:	8b1b      	ldrh	r3, [r3, #24]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <I2C_MASTER_RXNE_Handle+0x3d8>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d004      	beq.n	8001408 <I2C_MASTER_RXNE_Handle+0x3d8>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	d1ea      	bne.n	80013de <I2C_MASTER_RXNE_Handle+0x3ae>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d004      	beq.n	800141a <I2C_MASTER_RXNE_Handle+0x3ea>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d104      	bne.n	8001424 <I2C_MASTER_RXNE_Handle+0x3f4>
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fb9c 	bl	8000b58 <CPAL_I2C_Timeout>
 8001420:	4603      	mov	r3, r0
 8001422:	e02b      	b.n	800147c <I2C_MASTER_RXNE_Handle+0x44c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f04f 32ff 	mov.w	r2, #4294967295
 800142a:	619a      	str	r2, [r3, #24]
      
      /* Enable ACK generation and disable POS */
      __CPAL_I2C_HAL_ENABLE_ACK(pDevInitStruct->CPAL_Dev);      
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 8001444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800144c:	b292      	uxth	r2, r2
 800144e:	801a      	strh	r2, [r3, #0]
      __CPAL_I2C_HAL_DISABLE_POS(pDevInitStruct->CPAL_Dev);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29a      	uxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <I2C_MASTER_RXNE_Handle+0x454>)
 8001468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800146c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001470:	b292      	uxth	r2, r2
 8001472:	801a      	strh	r2, [r3, #0]
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	731a      	strb	r2, [r3, #12]
      
      /* Call RX Transfer complete Callback */
      CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
    }
  }  
  return CPAL_PASS;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000002c 	.word	0x2000002c

08001488 <CPAL_I2C_Enable_DMA_IT>:
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @param  Direction : Transfer direction.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Enable_DMA_IT (CPAL_InitTypeDef* pDevInitStruct, CPAL_DirectionTypeDef Direction)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  /* Switch the value of CPAL_ProgModel */
  switch (pDevInitStruct->CPAL_ProgModel)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	78db      	ldrb	r3, [r3, #3]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d113      	bne.n	80014c4 <CPAL_I2C_Enable_DMA_IT+0x3c>
    Interrupt mode : if CPAL_ProgModel = CPAL_PROGMODEL_INTERRUPT
    ---------------------------------------------------------------------------*/            
  case CPAL_PROGMODEL_INTERRUPT:
   
    /* Enable BUFFER Interrupt*/
    __CPAL_I2C_HAL_ENABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <CPAL_I2C_Enable_DMA_IT+0x50>)
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	889b      	ldrh	r3, [r3, #4]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <CPAL_I2C_Enable_DMA_IT+0x50>)
 80014b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014bc:	b292      	uxth	r2, r2
 80014be:	809a      	strh	r2, [r3, #4]
    
    CPAL_LOG("\n\rLOG : I2C Device BUFF IT Enabled"); 
    
    return CPAL_PASS;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e003      	b.n	80014cc <CPAL_I2C_Enable_DMA_IT+0x44>
    Default: return error and exit Write Operation
    ---------------------------------------------------------------------------*/      
  default:
    
    /* Update CPAL_State to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2210      	movs	r2, #16
 80014c8:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rERROR : I2C Device Error"); 
    
    /* exit function */
    return CPAL_FAIL;
 80014ca:	2301      	movs	r3, #1
  }  
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	2000002c 	.word	0x2000002c

080014dc <CPAL_I2C_HAL_CLKInit>:
  * @brief  Reset then enable the I2C device clock.
  * @param  Device : I2C Device instance. 
  * @retval None
  */
void CPAL_I2C_HAL_CLKInit(CPAL_DevTypeDef Device)
{    
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  /* Reset I2Cx device clock in order to avoid non-cleared error flags */
  __I2C_RCC_RESET(CPAL_I2C_CLK [Device]);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <CPAL_I2C_HAL_CLKInit+0x44>)
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	2101      	movs	r1, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fcc3 	bl	8001e7c <RCC_APB1PeriphResetCmd>
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <CPAL_I2C_HAL_CLKInit+0x44>)
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fcbb 	bl	8001e7c <RCC_APB1PeriphResetCmd>
  
  /* Enable I2Cx device clock */
  __I2C_CLK_CMD(CPAL_I2C_CLK [Device], ENABLE);  
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <CPAL_I2C_HAL_CLKInit+0x44>)
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fc93 	bl	8001e3c <RCC_APB1PeriphClockCmd>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	080020d4 	.word	0x080020d4

08001524 <CPAL_I2C_HAL_CLKDeInit>:
  * @brief  Reset then disable the I2C device clock.
  * @param  Device : I2C Device instance 
  * @retval None. 
  */
void CPAL_I2C_HAL_CLKDeInit(CPAL_DevTypeDef Device)
{   
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  /* Reset I2Cx device clock in order to avoid non-cleared error flags */
  __I2C_RCC_RESET(CPAL_I2C_CLK[Device]);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <CPAL_I2C_HAL_CLKDeInit+0x44>)
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	2101      	movs	r1, #1
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fc9f 	bl	8001e7c <RCC_APB1PeriphResetCmd>
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4a09      	ldr	r2, [pc, #36]	; (8001568 <CPAL_I2C_HAL_CLKDeInit+0x44>)
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fc97 	bl	8001e7c <RCC_APB1PeriphResetCmd>
  
  /* Disable I2Cx device clock */
  __I2C_CLK_CMD(CPAL_I2C_CLK[Device], DISABLE);   
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <CPAL_I2C_HAL_CLKDeInit+0x44>)
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fc6f 	bl	8001e3c <RCC_APB1PeriphClockCmd>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	080020d4 	.word	0x080020d4

0800156c <CPAL_I2C_HAL_GPIOInit>:
  * @brief  Configure the IO pins used by the I2C device.
  * @param  Device : I2C Device instance. 
  * @retval None. 
  */
void CPAL_I2C_HAL_GPIOInit(CPAL_DevTypeDef Device)
{  
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable I2Cx SCL and SDA Pin Clock */
  __I2C_GPIO_CLK_CMD((CPAL_I2C_SCL_GPIO_CLK[Device] | CPAL_I2C_SDA_GPIO_CLK[Device]), ENABLE); 
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <CPAL_I2C_HAL_GPIOInit+0xb8>)
 800157a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4929      	ldr	r1, [pc, #164]	; (8001628 <CPAL_I2C_HAL_GPIOInit+0xbc>)
 8001582:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001586:	4313      	orrs	r3, r2
 8001588:	2101      	movs	r1, #1
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fc36 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
  
  /* Connect PXx to I2C_SCL */
  GPIO_PinAFConfig((GPIO_TypeDef*)CPAL_I2C_SCL_GPIO_PORT[Device],CPAL_I2C_SCL_GPIO_PINSOURCE[Device],CPAL_I2C_AF[Device]);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4a26      	ldr	r2, [pc, #152]	; (800162c <CPAL_I2C_HAL_GPIOInit+0xc0>)
 8001594:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <CPAL_I2C_HAL_GPIOInit+0xc4>)
 800159c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4a24      	ldr	r2, [pc, #144]	; (8001634 <CPAL_I2C_HAL_GPIOInit+0xc8>)
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	f000 fa6d 	bl	8001a8a <GPIO_PinAFConfig>
  
  /* Connect PXx to I2C_SDA */
  GPIO_PinAFConfig((GPIO_TypeDef*)CPAL_I2C_SDA_GPIO_PORT[Device],CPAL_I2C_SDA_GPIO_PINSOURCE[Device],CPAL_I2C_AF[Device]); 
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <CPAL_I2C_HAL_GPIOInit+0xcc>)
 80015b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <CPAL_I2C_HAL_GPIOInit+0xd0>)
 80015bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <CPAL_I2C_HAL_GPIOInit+0xc8>)
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	f000 fa5d 	bl	8001a8a <GPIO_PinAFConfig>
  
  /* Set GPIO frequency to 50MHz */
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80015d0:	2302      	movs	r3, #2
 80015d2:	737b      	strb	r3, [r7, #13]
  
  /* Select Alternate function mode */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80015d4:	2302      	movs	r3, #2
 80015d6:	733b      	strb	r3, [r7, #12]
  
  /* Select output Open Drain type */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80015d8:	2301      	movs	r3, #1
 80015da:	73bb      	strb	r3, [r7, #14]
  
  /* Disable internal Pull-up */
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;              //GPIO_PuPd_NOPULL was the default value /// i made the changee
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  
  /* Initialize I2Cx SCL Pin */ 
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SCL_GPIO_PIN[Device];
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <CPAL_I2C_HAL_GPIOInit+0xd4>)
 80015e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e8:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SCL_GPIO_PORT[Device], &GPIO_InitStructure);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4a0f      	ldr	r2, [pc, #60]	; (800162c <CPAL_I2C_HAL_GPIOInit+0xc0>)
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	f107 0208 	add.w	r2, r7, #8
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f9b7 	bl	800196c <GPIO_Init>
  
  /* Initialize I2Cx SDA Pin */
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SDA_GPIO_PIN[Device];
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4a10      	ldr	r2, [pc, #64]	; (8001644 <CPAL_I2C_HAL_GPIOInit+0xd8>)
 8001602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001606:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SDA_GPIO_PORT[Device], &GPIO_InitStructure);     
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <CPAL_I2C_HAL_GPIOInit+0xcc>)
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	f107 0208 	add.w	r2, r7, #8
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f9a8 	bl	800196c <GPIO_Init>
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	080020f4 	.word	0x080020f4
 8001628:	08002110 	.word	0x08002110
 800162c:	20000038 	.word	0x20000038
 8001630:	08002100 	.word	0x08002100
 8001634:	080020e0 	.word	0x080020e0
 8001638:	20000044 	.word	0x20000044
 800163c:	0800211c 	.word	0x0800211c
 8001640:	080020ec 	.word	0x080020ec
 8001644:	08002108 	.word	0x08002108

08001648 <CPAL_I2C_HAL_GPIODeInit>:
  *         (configured to their default state).
  * @param  Device : I2C Device instance. 
  * @retval None. 
  */
void CPAL_I2C_HAL_GPIODeInit(CPAL_DevTypeDef Device)
{      
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Set GPIO frequency to 50MHz */
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001652:	2302      	movs	r3, #2
 8001654:	737b      	strb	r3, [r7, #13]
  
  /* Select Input floating mode */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001656:	2300      	movs	r3, #0
 8001658:	733b      	strb	r3, [r7, #12]
  
  /* Deinitialize I2Cx SCL Pin */ 
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SCL_GPIO_PIN[Device];
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <CPAL_I2C_HAL_GPIODeInit+0x58>)
 800165e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001662:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SCL_GPIO_PORT[Device], &GPIO_InitStructure);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <CPAL_I2C_HAL_GPIODeInit+0x5c>)
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	f107 0208 	add.w	r2, r7, #8
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f97a 	bl	800196c <GPIO_Init>
  
  /* Deinitialize I2Cx SDA Pin */
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SDA_GPIO_PIN[Device];
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <CPAL_I2C_HAL_GPIODeInit+0x60>)
 800167c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001680:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SDA_GPIO_PORT[Device], &GPIO_InitStructure); 
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4a09      	ldr	r2, [pc, #36]	; (80016ac <CPAL_I2C_HAL_GPIODeInit+0x64>)
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	f107 0208 	add.w	r2, r7, #8
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f96b 	bl	800196c <GPIO_Init>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	080020ec 	.word	0x080020ec
 80016a4:	20000038 	.word	0x20000038
 80016a8:	08002108 	.word	0x08002108
 80016ac:	20000044 	.word	0x20000044

080016b0 <CPAL_I2C_HAL_ITInit>:
  * @param  Device : I2C Device instance.
  * @param  Options : I2C Transfer Options.
  * @retval None. 
  */
void CPAL_I2C_HAL_ITInit(CPAL_DevTypeDef Device, uint32_t Options, CPAL_DirectionTypeDef Direction, CPAL_ProgModelTypeDef ProgModel)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6039      	str	r1, [r7, #0]
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	460b      	mov	r3, r1
 80016c2:	71bb      	strb	r3, [r7, #6]
 80016c4:	4613      	mov	r3, r2
 80016c6:	717b      	strb	r3, [r7, #5]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  /* Configure NVIC priority Group */ 
  CPAL_HAL_NVICInit();
 80016c8:	f7fe fd7e 	bl	80001c8 <CPAL_HAL_NVICInit>
  
  /* Enable the IRQ channel */
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure NVIC for I2Cx EVT Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = CPAL_I2C_IT_EVT_IRQn [Device] ;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <CPAL_I2C_HAL_ITInit+0x98>)
 80016d4:	56d3      	ldrsb	r3, [r2, r3]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_IT_EVT_PREPRIO[Device];
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <CPAL_I2C_HAL_ITInit+0x9c>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_IT_EVT_SUBPRIO[Device];
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <CPAL_I2C_HAL_ITInit+0xa0>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	73bb      	strb	r3, [r7, #14]
  NVIC_Init(&NVIC_InitStructure);
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f8da 	bl	80018a8 <NVIC_Init>
  
  /* If I2C ERR Interrupt Option Bit not selected */ 
  if ((Options & CPAL_OPT_I2C_ERRIT_DISABLE) == 0)    
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11f      	bne.n	800173e <CPAL_I2C_HAL_ITInit+0x8e>
  {
    /* Configure NVIC for I2Cx ERR Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = CPAL_I2C_IT_ERR_IRQn [Device] ;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <CPAL_I2C_HAL_ITInit+0xa4>)
 8001702:	56d3      	ldrsb	r3, [r2, r3]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_IT_ERR_PREPRIO[Device];
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <CPAL_I2C_HAL_ITInit+0xa8>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_IT_ERR_SUBPRIO[Device];
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <CPAL_I2C_HAL_ITInit+0xac>)
 8001714:	5cd3      	ldrb	r3, [r2, r3]
 8001716:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&NVIC_InitStructure);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f8c3 	bl	80018a8 <NVIC_Init>
    
    /* Enable I2C Error Interrupts */
    __CPAL_I2C_HAL_ENABLE_ERRIT(Device);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <CPAL_I2C_HAL_ITInit+0xb0>)
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	b29a      	uxth	r2, r3
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	490b      	ldr	r1, [pc, #44]	; (8001760 <CPAL_I2C_HAL_ITInit+0xb0>)
 8001732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800173a:	b292      	uxth	r2, r2
 800173c:	809a      	strh	r2, [r3, #4]
      }
    }
  }
#endif /* CPAL_I2C_DMA_PROGMODEL */ 
  
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08002124 	.word	0x08002124
 800174c:	0800212c 	.word	0x0800212c
 8001750:	08002130 	.word	0x08002130
 8001754:	08002128 	.word	0x08002128
 8001758:	08002134 	.word	0x08002134
 800175c:	08002138 	.word	0x08002138
 8001760:	2000002c 	.word	0x2000002c

08001764 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C1_EV_IRQHandler(void)
{  
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Call the Common Event handler function */
  return CPAL_I2C_EV_IRQHandler(&I2C1_DevStructure);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <I2C1_EV_IRQHandler+0x10>)
 800176a:	f7ff f859 	bl	8000820 <CPAL_I2C_EV_IRQHandler>
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000000c 	.word	0x2000000c

08001778 <I2C1_ER_IRQHandler>:
  * @brief  This function handles I2C1 Errors interrupt.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C1_ER_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  CPAL_LOG("\n\r\n\rLOG <I2C1_ER_IRQHandler> : I2C1 Device Error IT ");
  
  /* Call the Common Error handler function */
  CPAL_I2C_ER_IRQHandler(&I2C1_DevStructure);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <I2C1_ER_IRQHandler+0x10>)
 800177e:	f7ff f8a3 	bl	80008c8 <CPAL_I2C_ER_IRQHandler>
  
  return CPAL_PASS;  
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000000c 	.word	0x2000000c

0800178c <CPAL_TIMEOUT_UserCallback>:
  * @brief  User callback that manages the Timeout error.
  * @param  pDevInitStruct .
  * @retval None.
  */
uint32_t CPAL_TIMEOUT_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  return CPAL_PASS;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <Configuration>:


#define MPU6050_ADDRESS        0b110100<<1;
#define MPU6050_WHO_AM_I_REG    0x75

void Configuration(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
    // Enable I2C1 clock
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80017aa:	2101      	movs	r1, #1
 80017ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017b0:	f000 fb44 	bl	8001e3c <RCC_APB1PeriphClockCmd>
    // Configure GPIO pins for I2C1 SCL and SDA
    // For STM32F407VG, you might configure GPIOB pins
    // For example, PB6 for I2C1_SCL and PB7 for I2C1_SDA

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80017b4:	23c0      	movs	r3, #192	; 0xc0
 80017b6:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80017b8:	2302      	movs	r3, #2
 80017ba:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80017bc:	2302      	movs	r3, #2
 80017be:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80017c0:	2301      	movs	r3, #1
 80017c2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <Configuration+0x4c>)
 80017ce:	f000 f8cd 	bl	800196c <GPIO_Init>

    // Connect I2C1 pins to AF
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 80017d2:	2204      	movs	r2, #4
 80017d4:	2106      	movs	r1, #6
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <Configuration+0x4c>)
 80017d8:	f000 f957 	bl	8001a8a <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1);
 80017dc:	2204      	movs	r2, #4
 80017de:	2107      	movs	r1, #7
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <Configuration+0x4c>)
 80017e2:	f000 f952 	bl	8001a8a <GPIO_PinAFConfig>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40020400 	.word	0x40020400

080017f4 <i2c>:

void i2c(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
	CPAL_TransferTypeDef MpuRx;
	uint8_t MpuData;
	I2C_InitTypeDef i2cStructure;

	MpuRx.pbBuffer= &MpuData;
 80017fa:	f107 0317 	add.w	r3, r7, #23
 80017fe:	61bb      	str	r3, [r7, #24]
	MpuRx.wAddr1= MPU6050_ADDRESS;
 8001800:	2368      	movs	r3, #104	; 0x68
 8001802:	623b      	str	r3, [r7, #32]
	MpuRx.wAddr2= MPU6050_WHO_AM_I_REG;
 8001804:	2375      	movs	r3, #117	; 0x75
 8001806:	627b      	str	r3, [r7, #36]	; 0x24


	CPAL_I2C_StructInit(&I2C1_DevStructure);
 8001808:	4817      	ldr	r0, [pc, #92]	; (8001868 <i2c+0x74>)
 800180a:	f7fe fe2f 	bl	800046c <CPAL_I2C_StructInit>
	I2C1_DevStructure.CPAL_Mode=CPAL_MODE_MASTER;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <i2c+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	709a      	strb	r2, [r3, #2]
	I2C1_DevStructure.CPAL_ProgModel= CPAL_PROGMODEL_INTERRUPT;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <i2c+0x74>)
 8001816:	2201      	movs	r2, #1
 8001818:	70da      	strb	r2, [r3, #3]
	I2C1_DevStructure.pCPAL_I2C_Struct= &i2cStructure;
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <i2c+0x74>)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	61d3      	str	r3, [r2, #28]
	I2C1_DevStructure.pCPAL_TransferRx=&MpuRx;
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <i2c+0x74>)
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	6093      	str	r3, [r2, #8]
	I2C1_DevStructure.pCPAL_TransferTx=pNULL;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <i2c+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]


	i2cStructure.I2C_ClockSpeed= 100000;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <i2c+0x78>)
 8001830:	607b      	str	r3, [r7, #4]
	i2cStructure.I2C_Mode=I2C_Mode_I2C;
 8001832:	2300      	movs	r3, #0
 8001834:	813b      	strh	r3, [r7, #8]
	i2cStructure.I2C_Ack= I2C_Ack_Enable;
 8001836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183a:	81fb      	strh	r3, [r7, #14]
	i2cStructure.I2C_AcknowledgedAddress= I2C_AcknowledgedAddress_7bit;
 800183c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001840:	823b      	strh	r3, [r7, #16]
	i2cStructure.I2C_OwnAddress1=0;
 8001842:	2300      	movs	r3, #0
 8001844:	81bb      	strh	r3, [r7, #12]





	CPAL_I2C_Init(&I2C1_DevStructure);
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <i2c+0x74>)
 8001848:	f7fe fd12 	bl	8000270 <CPAL_I2C_Init>

	CPAL_I2C_Read(&I2C1_DevStructure);
 800184c:	4806      	ldr	r0, [pc, #24]	; (8001868 <i2c+0x74>)
 800184e:	f7fe fe51 	bl	80004f4 <CPAL_I2C_Read>

	while (I2C1_DevStructure.CPAL_State!=CPAL_STATE_READY);
 8001852:	bf00      	nop
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <i2c+0x74>)
 8001856:	7b1b      	ldrb	r3, [r3, #12]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d1fa      	bne.n	8001854 <i2c+0x60>





}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000000c 	.word	0x2000000c
 800186c:	000186a0 	.word	0x000186a0

08001870 <main>:


int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	Configuration();
 8001874:	f7ff ff96 	bl	80017a4 <Configuration>
	i2c();
 8001878:	f7ff ffbc 	bl	80017f4 <i2c>

	    while (1) {
 800187c:	e7fe      	b.n	800187c <main+0xc>
	...

08001880 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <NVIC_PriorityGroupConfig+0x24>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60d3      	str	r3, [r2, #12]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	2300      	movs	r3, #0
 80018b6:	73bb      	strb	r3, [r7, #14]
 80018b8:	230f      	movs	r3, #15
 80018ba:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d039      	beq.n	8001938 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <NVIC_Init+0xbc>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	f1c3 0304 	rsb	r3, r3, #4
 80018da:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80018dc:	7b7a      	ldrb	r2, [r7, #13]
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	fa42 f303 	asr.w	r3, r2, r3
 80018e4:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	785b      	ldrb	r3, [r3, #1]
 80018ea:	461a      	mov	r2, r3
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	789a      	ldrb	r2, [r3, #2]
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	4013      	ands	r3, r2
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	4313      	orrs	r3, r2
 8001902:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <NVIC_Init+0xc0>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4413      	add	r3, r2
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001920:	4911      	ldr	r1, [pc, #68]	; (8001968 <NVIC_Init+0xc0>)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	0952      	lsrs	r2, r2, #5
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800192c:	2201      	movs	r2, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001932:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001936:	e00f      	b.n	8001958 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001940:	4909      	ldr	r1, [pc, #36]	; (8001968 <NVIC_Init+0xc0>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	0952      	lsrs	r2, r2, #5
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800194c:	2201      	movs	r2, #1
 800194e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001950:	f100 0320 	add.w	r3, r0, #32
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	e000e100 	.word	0xe000e100

0800196c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e076      	b.n	8001a76 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001988:	2201      	movs	r2, #1
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d165      	bne.n	8001a70 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2103      	movs	r1, #3
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	4619      	mov	r1, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	791b      	ldrb	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d003      	beq.n	80019e2 <GPIO_Init+0x76>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d12e      	bne.n	8001a40 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2103      	movs	r1, #3
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	401a      	ands	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	795b      	ldrb	r3, [r3, #5]
 8001a00:	4619      	mov	r1, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	408b      	lsls	r3, r1
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	7992      	ldrb	r2, [r2, #6]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	b292      	uxth	r2, r2
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	79db      	ldrb	r3, [r3, #7]
 8001a60:	4619      	mov	r1, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d985      	bls.n	8001988 <GPIO_Init+0x1c>
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]
 8001a96:	4613      	mov	r3, r2
 8001a98:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001aa2:	787a      	ldrb	r2, [r7, #1]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	210f      	movs	r1, #15
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	8879      	ldrh	r1, [r7, #2]
 8001ad4:	08c9      	lsrs	r1, r1, #3
 8001ad6:	b289      	uxth	r1, r1
 8001ad8:	4608      	mov	r0, r1
 8001ada:	ea02 0103 	and.w	r1, r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f100 0208 	add.w	r2, r0, #8
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	08db      	lsrs	r3, r3, #3
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001b32:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <I2C_Init+0x174>)
 8001b34:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b42:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f8a9 	bl	8001ca0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4a4f      	ldr	r2, [pc, #316]	; (8001c94 <I2C_Init+0x178>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0c9b      	lsrs	r3, r3, #18
 8001b5c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8001b5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b62:	4313      	orrs	r3, r2
 8001b64:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b6a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a44      	ldr	r2, [pc, #272]	; (8001c98 <I2C_Init+0x17c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d815      	bhi.n	8001bb6 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d801      	bhi.n	8001ba2 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001ba2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001baa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bac:	3301      	adds	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	841a      	strh	r2, [r3, #32]
 8001bb4:	e040      	b.n	8001c38 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	88db      	ldrh	r3, [r3, #6]
 8001bba:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d109      	bne.n	8001bd6 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001bd4:	e00e      	b.n	8001bf4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	009a      	lsls	r2, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d103      	bne.n	8001c06 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c16:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001c18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <I2C_Init+0x180>)
 8001c24:	fb82 1203 	smull	r1, r2, r2, r3
 8001c28:	1192      	asrs	r2, r2, #6
 8001c2a:	17db      	asrs	r3, r3, #31
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c3c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001c54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c56:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001c5a:	f023 0302 	bic.w	r3, r3, #2
 8001c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	889a      	ldrh	r2, [r3, #4]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	895b      	ldrh	r3, [r3, #10]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c76:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	899a      	ldrh	r2, [r3, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	891b      	ldrh	r3, [r3, #8]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	811a      	strh	r2, [r3, #8]
}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	; 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	000186a0 	.word	0x000186a0
 8001c9c:	10624dd3 	.word	0x10624dd3

08001ca0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d011      	beq.n	8001cf4 <RCC_GetClocksFreq+0x54>
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d844      	bhi.n	8001d60 <RCC_GetClocksFreq+0xc0>
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <RCC_GetClocksFreq+0x44>
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d004      	beq.n	8001cec <RCC_GetClocksFreq+0x4c>
 8001ce2:	e03d      	b.n	8001d60 <RCC_GetClocksFreq+0xc0>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a42      	ldr	r2, [pc, #264]	; (8001df0 <RCC_GetClocksFreq+0x150>)
 8001ce8:	601a      	str	r2, [r3, #0]
      break;
 8001cea:	e03d      	b.n	8001d68 <RCC_GetClocksFreq+0xc8>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a41      	ldr	r2, [pc, #260]	; (8001df4 <RCC_GetClocksFreq+0x154>)
 8001cf0:	601a      	str	r2, [r3, #0]
      break;
 8001cf2:	e039      	b.n	8001d68 <RCC_GetClocksFreq+0xc8>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	0d9b      	lsrs	r3, r3, #22
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d08:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00c      	beq.n	8001d2a <RCC_GetClocksFreq+0x8a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d10:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <RCC_GetClocksFreq+0x154>)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	4a34      	ldr	r2, [pc, #208]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001d1a:	6852      	ldr	r2, [r2, #4]
 8001d1c:	0992      	lsrs	r2, r2, #6
 8001d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	e00b      	b.n	8001d42 <RCC_GetClocksFreq+0xa2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <RCC_GetClocksFreq+0x150>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001d34:	6852      	ldr	r2, [r2, #4]
 8001d36:	0992      	lsrs	r2, r2, #6
 8001d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
      break;
 8001d5e:	e003      	b.n	8001d68 <RCC_GetClocksFreq+0xc8>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <RCC_GetClocksFreq+0x150>)
 8001d64:	601a      	str	r2, [r3, #0]
      break;
 8001d66:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d70:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <RCC_GetClocksFreq+0x158>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	40da      	lsrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d98:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	0a9b      	lsrs	r3, r3, #10
 8001d9e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <RCC_GetClocksFreq+0x158>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	40da      	lsrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <RCC_GetClocksFreq+0x14c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001dc0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	0b5b      	lsrs	r3, r3, #13
 8001dc6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <RCC_GetClocksFreq+0x158>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	40da      	lsrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3724      	adds	r7, #36	; 0x24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	017d7840 	.word	0x017d7840
 8001df8:	20000050 	.word	0x20000050

08001dfc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e12:	4909      	ldr	r1, [pc, #36]	; (8001e38 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001e1a:	e006      	b.n	8001e2a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4904      	ldr	r1, [pc, #16]	; (8001e38 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e52:	4909      	ldr	r1, [pc, #36]	; (8001e78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e5a:	e006      	b.n	8001e6a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	4904      	ldr	r1, [pc, #16]	; (8001e78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	4909      	ldr	r1, [pc, #36]	; (8001eb8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001e9a:	e006      	b.n	8001eaa <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	620b      	str	r3, [r1, #32]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <SystemInit+0x60>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <SystemInit+0x60>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <SystemInit+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <SystemInit+0x64>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <SystemInit+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <SystemInit+0x64>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <SystemInit+0x64>)
 8001ee8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <SystemInit+0x64>)
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <SystemInit+0x68>)
 8001ef6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <SystemInit+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <SystemInit+0x64>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SystemInit+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001f0a:	f000 f80d 	bl	8001f28 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f0e:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <SystemInit+0x60>)
 8001f10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f14:	609a      	str	r2, [r3, #8]
#endif
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00
 8001f20:	40023800 	.word	0x40023800
 8001f24:	24003010 	.word	0x24003010

08001f28 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001f36:	4b36      	ldr	r3, [pc, #216]	; (8002010 <SetSysClock+0xe8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a35      	ldr	r2, [pc, #212]	; (8002010 <SetSysClock+0xe8>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <SetSysClock+0xe8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <SetSysClock+0x38>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f5e:	d1f0      	bne.n	8001f42 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <SetSysClock+0xe8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	e001      	b.n	8001f76 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d142      	bne.n	8002002 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <SetSysClock+0xe8>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <SetSysClock+0xe8>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <SetSysClock+0xec>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a21      	ldr	r2, [pc, #132]	; (8002014 <SetSysClock+0xec>)
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f92:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <SetSysClock+0xe8>)
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <SetSysClock+0xe8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <SetSysClock+0xe8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <SetSysClock+0xe8>)
 8001fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <SetSysClock+0xe8>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a18      	ldr	r2, [pc, #96]	; (8002010 <SetSysClock+0xe8>)
 8001fae:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001fb2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <SetSysClock+0xe8>)
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <SetSysClock+0xf0>)
 8001fb8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <SetSysClock+0xe8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <SetSysClock+0xe8>)
 8001fc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001fc6:	bf00      	nop
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <SetSysClock+0xe8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f9      	beq.n	8001fc8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <SetSysClock+0xf4>)
 8001fd6:	f240 6205 	movw	r2, #1541	; 0x605
 8001fda:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <SetSysClock+0xe8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <SetSysClock+0xe8>)
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <SetSysClock+0xe8>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a08      	ldr	r2, [pc, #32]	; (8002010 <SetSysClock+0xe8>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001ff4:	bf00      	nop
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SetSysClock+0xe8>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d1f9      	bne.n	8001ff6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000
 8002018:	07405419 	.word	0x07405419
 800201c:	40023c00 	.word	0x40023c00

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002024:	f7ff ff4a 	bl	8001ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	; (8002060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	; (800206c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204e:	f000 f811 	bl	8002074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7ff fc0d 	bl	8001870 <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002064:	08002144 	.word	0x08002144
  ldr r2, =_sbss
 8002068:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800206c:	20000090 	.word	0x20000090

08002070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC_IRQHandler>
	...

08002074 <__libc_init_array>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	4d0d      	ldr	r5, [pc, #52]	; (80020ac <__libc_init_array+0x38>)
 8002078:	4c0d      	ldr	r4, [pc, #52]	; (80020b0 <__libc_init_array+0x3c>)
 800207a:	1b64      	subs	r4, r4, r5
 800207c:	10a4      	asrs	r4, r4, #2
 800207e:	2600      	movs	r6, #0
 8002080:	42a6      	cmp	r6, r4
 8002082:	d109      	bne.n	8002098 <__libc_init_array+0x24>
 8002084:	4d0b      	ldr	r5, [pc, #44]	; (80020b4 <__libc_init_array+0x40>)
 8002086:	4c0c      	ldr	r4, [pc, #48]	; (80020b8 <__libc_init_array+0x44>)
 8002088:	f000 f818 	bl	80020bc <_init>
 800208c:	1b64      	subs	r4, r4, r5
 800208e:	10a4      	asrs	r4, r4, #2
 8002090:	2600      	movs	r6, #0
 8002092:	42a6      	cmp	r6, r4
 8002094:	d105      	bne.n	80020a2 <__libc_init_array+0x2e>
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	f855 3b04 	ldr.w	r3, [r5], #4
 800209c:	4798      	blx	r3
 800209e:	3601      	adds	r6, #1
 80020a0:	e7ee      	b.n	8002080 <__libc_init_array+0xc>
 80020a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a6:	4798      	blx	r3
 80020a8:	3601      	adds	r6, #1
 80020aa:	e7f2      	b.n	8002092 <__libc_init_array+0x1e>
 80020ac:	0800213c 	.word	0x0800213c
 80020b0:	0800213c 	.word	0x0800213c
 80020b4:	0800213c 	.word	0x0800213c
 80020b8:	08002140 	.word	0x08002140

080020bc <_init>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	bf00      	nop
 80020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c2:	bc08      	pop	{r3}
 80020c4:	469e      	mov	lr, r3
 80020c6:	4770      	bx	lr

080020c8 <_fini>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr
