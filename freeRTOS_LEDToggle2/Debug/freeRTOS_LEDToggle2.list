
freeRTOS_LEDToggle2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004938  08004938  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000049c0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049d0  200049d0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   000129ab  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c54  00000000  00000000  00032a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001180  00000000  00000000  00035688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d79  00000000  00000000  00036808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002b6f  00000000  00000000  00037581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012bb9  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d26fa  00000000  00000000  0004cca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004958  00000000  00000000  0011f3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00123cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004890 	.word	0x08004890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004890 	.word	0x08004890

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa04 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f824 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f880 	bl	80005dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f001 fc4e 	bl	8001d7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <main+0x3c>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x40>)
 80004e6:	f001 fc93 	bl	8001e10 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <main+0x44>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <main+0x48>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4808      	ldr	r0, [pc, #32]	; (8000518 <main+0x4c>)
 80004f6:	f001 fc8b 	bl	8001e10 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <main+0x50>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000500:	f001 fc60 	bl	8001dc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x38>
 8000506:	bf00      	nop
 8000508:	080048d0 	.word	0x080048d0
 800050c:	08000665 	.word	0x08000665
 8000510:	2000002c 	.word	0x2000002c
 8000514:	080048f4 	.word	0x080048f4
 8000518:	08000685 	.word	0x08000685
 800051c:	20000030 	.word	0x20000030

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f004 f974 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xb4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xb4>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xb4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <SystemClock_Config+0xb8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <SystemClock_Config+0xb8>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <SystemClock_Config+0xb8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fc97 	bl	8000ec4 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800059c:	f000 f894 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fefa 	bl	80013b4 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005c6:	f000 f87f 	bl	80006c8 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_GPIO_Init+0x80>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a18      	ldr	r2, [pc, #96]	; (800065c <MX_GPIO_Init+0x80>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_GPIO_Init+0x80>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_GPIO_Init+0x80>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a11      	ldr	r2, [pc, #68]	; (800065c <MX_GPIO_Init+0x80>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_GPIO_Init+0x80>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <MX_GPIO_Init+0x84>)
 8000632:	f000 fc13 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000636:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0x84>)
 8000650:	f000 fa68 	bl	8000b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020c00 	.word	0x40020c00

08000664 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800066c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <StartTask1+0x1c>)
 8000672:	f000 fc0c 	bl	8000e8e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067a:	f001 fc5b 	bl	8001f34 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800067e:	e7f5      	b.n	800066c <StartTask1+0x8>
 8000680:	40020c00 	.word	0x40020c00

08000684 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800068c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <StartTask2+0x1c>)
 8000692:	f000 fbfc 	bl	8000e8e <HAL_GPIO_TogglePin>
	  osDelay(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069a:	f001 fc4b 	bl	8001f34 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800069e:	e7f5      	b.n	800068c <StartTask2+0x8>
 80006a0:	40020c00 	.word	0x40020c00

080006a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d101      	bne.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b6:	f000 f933 	bl	8000920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40000400 	.word	0x40000400

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_MspInit+0x54>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	4a11      	ldr	r2, [pc, #68]	; (8000728 <HAL_MspInit+0x54>)
 80006e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x54>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_MspInit+0x54>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_MspInit+0x54>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_MspInit+0x54>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	210f      	movs	r1, #15
 8000716:	f06f 0001 	mvn.w	r0, #1
 800071a:	f000 f9d9 	bl	8000ad0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4b33      	ldr	r3, [pc, #204]	; (8000810 <HAL_InitTick+0xe4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a32      	ldr	r2, [pc, #200]	; (8000810 <HAL_InitTick+0xe4>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <HAL_InitTick+0xe4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000758:	f107 0210 	add.w	r2, r7, #16
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fff2 	bl	800174c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000772:	f000 ffd7 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8000776:	6378      	str	r0, [r7, #52]	; 0x34
 8000778:	e004      	b.n	8000784 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800077a:	f000 ffd3 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 800077e:	4603      	mov	r3, r0
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <HAL_InitTick+0xe8>)
 8000788:	fba2 2303 	umull	r2, r3, r2, r3
 800078c:	0c9b      	lsrs	r3, r3, #18
 800078e:	3b01      	subs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <HAL_InitTick+0xec>)
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <HAL_InitTick+0xf0>)
 8000796:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_InitTick+0xec>)
 800079a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <HAL_InitTick+0xec>)
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_InitTick+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_InitTick+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_InitTick+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <HAL_InitTick+0xec>)
 80007ba:	f000 fff9 	bl	80017b0 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d11b      	bne.n	8000804 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80007cc:	4812      	ldr	r0, [pc, #72]	; (8000818 <HAL_InitTick+0xec>)
 80007ce:	f001 f849 	bl	8001864 <HAL_TIM_Base_Start_IT>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d111      	bne.n	8000804 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007e0:	201d      	movs	r0, #29
 80007e2:	f000 f991 	bl	8000b08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d808      	bhi.n	80007fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	201d      	movs	r0, #29
 80007f2:	f000 f96d 	bl	8000ad0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_InitTick+0xf4>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e002      	b.n	8000804 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000808:	4618      	mov	r0, r3
 800080a:	3738      	adds	r7, #56	; 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	431bde83 	.word	0x431bde83
 8000818:	20000034 	.word	0x20000034
 800081c:	40000400 	.word	0x40000400
 8000820:	20000004 	.word	0x20000004

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <TIM3_IRQHandler+0x10>)
 8000856:	f001 f875 	bl	8001944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000034 	.word	0x20000034

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800088c:	f7ff ffea 	bl	8000864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	; (80008c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	; (80008d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f003 ffb9 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fe07 	bl	80004cc <main>
  bx  lr    
 80008be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008cc:	08004940 	.word	0x08004940
  ldr r2, =_sbss
 80008d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008d4:	200049d0 	.word	0x200049d0

080008d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <HAL_Init+0x40>)
 80008e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_Init+0x40>)
 80008f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x40>)
 80008fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f8d8 	bl	8000aba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	200f      	movs	r0, #15
 800090c:	f7ff ff0e 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fee0 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023c00 	.word	0x40023c00

08000920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	2000007c 	.word	0x2000007c

08000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000007c 	.word	0x2000007c

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff4c 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae2:	f7ff ff61 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000ae6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	6978      	ldr	r0, [r7, #20]
 8000aee:	f7ff ffb1 	bl	8000a54 <NVIC_EncodePriority>
 8000af2:	4602      	mov	r2, r0
 8000af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff80 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff54 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e16b      	b.n	8000e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 815a 	bne.w	8000e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80b4 	beq.w	8000e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a5f      	ldr	r2, [pc, #380]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc6:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_GPIO_Init+0x314>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d02b      	beq.n	8000d4a <HAL_GPIO_Init+0x226>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a51      	ldr	r2, [pc, #324]	; (8000e3c <HAL_GPIO_Init+0x318>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d025      	beq.n	8000d46 <HAL_GPIO_Init+0x222>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a50      	ldr	r2, [pc, #320]	; (8000e40 <HAL_GPIO_Init+0x31c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d01f      	beq.n	8000d42 <HAL_GPIO_Init+0x21e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x21a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <HAL_GPIO_Init+0x324>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x216>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <HAL_GPIO_Init+0x328>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <HAL_GPIO_Init+0x32c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x20e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4b      	ldr	r2, [pc, #300]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x20a>
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	e00e      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d2e:	2308      	movs	r3, #8
 8000d30:	e00c      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d32:	2306      	movs	r3, #6
 8000d34:	e00a      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e008      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	f002 0203 	and.w	r2, r2, #3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d8e:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e0c:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	f67f ae90 	bls.w	8000b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40021400 	.word	0x40021400
 8000e50:	40021800 	.word	0x40021800
 8000e54:	40021c00 	.word	0x40021c00
 8000e58:	40013c00 	.word	0x40013c00

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e78:	e003      	b.n	8000e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	619a      	str	r2, [r3, #24]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea0:	887a      	ldrh	r2, [r7, #2]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	400b      	ands	r3, r1
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e267      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d075      	beq.n	8000fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee2:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d00c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eee:	4b85      	ldr	r3, [pc, #532]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d112      	bne.n	8000f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efa:	4b82      	ldr	r3, [pc, #520]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f06:	d10b      	bne.n	8000f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4b7e      	ldr	r3, [pc, #504]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d05b      	beq.n	8000fcc <HAL_RCC_OscConfig+0x108>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d157      	bne.n	8000fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e242      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d106      	bne.n	8000f38 <HAL_RCC_OscConfig+0x74>
 8000f2a:	4b76      	ldr	r3, [pc, #472]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a75      	ldr	r2, [pc, #468]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e01d      	b.n	8000f74 <HAL_RCC_OscConfig+0xb0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x98>
 8000f42:	4b70      	ldr	r3, [pc, #448]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a6f      	ldr	r2, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6c      	ldr	r2, [pc, #432]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0xb0>
 8000f5c:	4b69      	ldr	r3, [pc, #420]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a68      	ldr	r2, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b66      	ldr	r3, [pc, #408]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a65      	ldr	r2, [pc, #404]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fce4 	bl	8000948 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fce0 	bl	8000948 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e207      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0xc0>
 8000fa2:	e014      	b.n	8000fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcd0 	bl	8000948 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fccc 	bl	8000948 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1f3      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	4b51      	ldr	r3, [pc, #324]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0xe8>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d063      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fda:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe6:	4b47      	ldr	r3, [pc, #284]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d11c      	bne.n	800102c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff2:	4b44      	ldr	r3, [pc, #272]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	4b41      	ldr	r3, [pc, #260]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x152>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d001      	beq.n	8001016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e1c7      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4937      	ldr	r1, [pc, #220]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	e03a      	b.n	80010a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_RCC_OscConfig+0x244>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103a:	f7ff fc85 	bl	8000948 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fc81 	bl	8000948 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e1a8      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4925      	ldr	r1, [pc, #148]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_RCC_OscConfig+0x244>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fc64 	bl	8000948 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fc60 	bl	8000948 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e187      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d036      	beq.n	800111c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d016      	beq.n	80010e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_RCC_OscConfig+0x248>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc44 	bl	8000948 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc40 	bl	8000948 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e167      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_RCC_OscConfig+0x240>)
 80010d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x200>
 80010e2:	e01b      	b.n	800111c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_RCC_OscConfig+0x248>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fc2d 	bl	8000948 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	e00e      	b.n	8001110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f2:	f7ff fc29 	bl	8000948 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d907      	bls.n	8001110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e150      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
 8001104:	40023800 	.word	0x40023800
 8001108:	42470000 	.word	0x42470000
 800110c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ea      	bne.n	80010f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8097 	beq.w	8001258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b81      	ldr	r3, [pc, #516]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b7d      	ldr	r3, [pc, #500]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a7c      	ldr	r2, [pc, #496]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b7a      	ldr	r3, [pc, #488]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001156:	2301      	movs	r3, #1
 8001158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115a:	4b77      	ldr	r3, [pc, #476]	; (8001338 <HAL_RCC_OscConfig+0x474>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	2b00      	cmp	r3, #0
 8001164:	d118      	bne.n	8001198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001166:	4b74      	ldr	r3, [pc, #464]	; (8001338 <HAL_RCC_OscConfig+0x474>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a73      	ldr	r2, [pc, #460]	; (8001338 <HAL_RCC_OscConfig+0x474>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001172:	f7ff fbe9 	bl	8000948 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117a:	f7ff fbe5 	bl	8000948 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e10c      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <HAL_RCC_OscConfig+0x474>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x2ea>
 80011a0:	4b64      	ldr	r3, [pc, #400]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a4:	4a63      	ldr	r2, [pc, #396]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6713      	str	r3, [r2, #112]	; 0x70
 80011ac:	e01c      	b.n	80011e8 <HAL_RCC_OscConfig+0x324>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x30c>
 80011b6:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ba:	4a5e      	ldr	r2, [pc, #376]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6713      	str	r3, [r2, #112]	; 0x70
 80011c2:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c6:	4a5b      	ldr	r2, [pc, #364]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6713      	str	r3, [r2, #112]	; 0x70
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0x324>
 80011d0:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d4:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6713      	str	r3, [r2, #112]	; 0x70
 80011dc:	4b55      	ldr	r3, [pc, #340]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e0:	4a54      	ldr	r2, [pc, #336]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d015      	beq.n	800121c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fbaa 	bl	8000948 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f8:	f7ff fba6 	bl	8000948 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	; 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e0cb      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0ee      	beq.n	80011f8 <HAL_RCC_OscConfig+0x334>
 800121a:	e014      	b.n	8001246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121c:	f7ff fb94 	bl	8000948 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001224:	f7ff fb90 	bl	8000948 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0b5      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1ee      	bne.n	8001224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a38      	ldr	r2, [pc, #224]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a1 	beq.w	80013a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b08      	cmp	r3, #8
 800126c:	d05c      	beq.n	8001328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d141      	bne.n	80012fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <HAL_RCC_OscConfig+0x478>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fb64 	bl	8000948 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff fb60 	bl	8000948 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e087      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001296:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69da      	ldr	r2, [r3, #28]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	3b01      	subs	r3, #1
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	491b      	ldr	r1, [pc, #108]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x478>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fb39 	bl	8000948 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fb35 	bl	8000948 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e05c      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x416>
 80012f8:	e054      	b.n	80013a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_RCC_OscConfig+0x478>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fb22 	bl	8000948 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fb1e 	bl	8000948 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e045      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_RCC_OscConfig+0x470>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x444>
 8001326:	e03d      	b.n	80013a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e038      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000
 800133c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x4ec>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d028      	beq.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d121      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d11a      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001370:	4013      	ands	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001378:	4293      	cmp	r3, r2
 800137a:	d111      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	085b      	lsrs	r3, r3, #1
 8001388:	3b01      	subs	r3, #1
 800138a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0cc      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d90c      	bls.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b63      	ldr	r3, [pc, #396]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0b8      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a58      	ldr	r2, [pc, #352]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800142a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	494d      	ldr	r1, [pc, #308]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	4313      	orrs	r3, r2
 800143c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d044      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d119      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e07f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d003      	beq.n	8001472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800146e:	2b03      	cmp	r3, #3
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e067      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f023 0203 	bic.w	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4934      	ldr	r1, [pc, #208]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fa50 	bl	8000948 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff fa4c 	bl	8000948 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e04f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 020c 	and.w	r2, r3, #12
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1eb      	bne.n	80014ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20c      	bcs.n	80014fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e032      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4916      	ldr	r1, [pc, #88]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800153a:	f000 f821 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 800153e:	4602      	mov	r2, r0
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	490a      	ldr	r1, [pc, #40]	; (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	5ccb      	ldrb	r3, [r1, r3]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_ClockConfig+0x1c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f8e6 	bl	800072c <HAL_InitTick>

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00
 8001570:	40023800 	.word	0x40023800
 8001574:	08004918 	.word	0x08004918
 8001578:	20000000 	.word	0x20000000
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001584:	b090      	sub	sp, #64	; 0x40
 8001586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
 800158c:	2300      	movs	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d00d      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x40>
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	f200 80a1 	bhi.w	80016ec <HAL_RCC_GetSysClockFreq+0x16c>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d003      	beq.n	80015ba <HAL_RCC_GetSysClockFreq+0x3a>
 80015b2:	e09b      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_RCC_GetSysClockFreq+0x184>)
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80015b8:	e09b      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_GetSysClockFreq+0x188>)
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015be:	e098      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c0:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ca:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d028      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d6:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	099b      	lsrs	r3, r3, #6
 80015dc:	2200      	movs	r2, #0
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	627a      	str	r2, [r7, #36]	; 0x24
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015e8:	2100      	movs	r1, #0
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_GetSysClockFreq+0x188>)
 80015ec:	fb03 f201 	mul.w	r2, r3, r1
 80015f0:	2300      	movs	r3, #0
 80015f2:	fb00 f303 	mul.w	r3, r0, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <HAL_RCC_GetSysClockFreq+0x188>)
 80015fa:	fba0 1202 	umull	r1, r2, r0, r2
 80015fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001600:	460a      	mov	r2, r1
 8001602:	62ba      	str	r2, [r7, #40]	; 0x28
 8001604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001606:	4413      	add	r3, r2
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160c:	2200      	movs	r2, #0
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	61fa      	str	r2, [r7, #28]
 8001612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800161a:	f7fe fdd9 	bl	80001d0 <__aeabi_uldivmod>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4613      	mov	r3, r2
 8001624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001626:	e053      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	617a      	str	r2, [r7, #20]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800163a:	f04f 0b00 	mov.w	fp, #0
 800163e:	4652      	mov	r2, sl
 8001640:	465b      	mov	r3, fp
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0159      	lsls	r1, r3, #5
 800164c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001650:	0150      	lsls	r0, r2, #5
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	ebb2 080a 	subs.w	r8, r2, sl
 800165a:	eb63 090b 	sbc.w	r9, r3, fp
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800166a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800166e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001672:	ebb2 0408 	subs.w	r4, r2, r8
 8001676:	eb63 0509 	sbc.w	r5, r3, r9
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	00eb      	lsls	r3, r5, #3
 8001684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001688:	00e2      	lsls	r2, r4, #3
 800168a:	4614      	mov	r4, r2
 800168c:	461d      	mov	r5, r3
 800168e:	eb14 030a 	adds.w	r3, r4, sl
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	eb45 030b 	adc.w	r3, r5, fp
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016a6:	4629      	mov	r1, r5
 80016a8:	028b      	lsls	r3, r1, #10
 80016aa:	4621      	mov	r1, r4
 80016ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b0:	4621      	mov	r1, r4
 80016b2:	028a      	lsls	r2, r1, #10
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ba:	2200      	movs	r2, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	60fa      	str	r2, [r7, #12]
 80016c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016c4:	f7fe fd84 	bl	80001d0 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4613      	mov	r3, r2
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	3301      	adds	r3, #1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80016e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016ea:	e002      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_RCC_GetSysClockFreq+0x184>)
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3740      	adds	r7, #64	; 0x40
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	00f42400 	.word	0x00f42400
 8001708:	017d7840 	.word	0x017d7840

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_RCC_GetHCLKFreq+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001728:	f7ff fff0 	bl	800170c <HAL_RCC_GetHCLKFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	0a9b      	lsrs	r3, r3, #10
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	4903      	ldr	r1, [pc, #12]	; (8001748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	08004928 	.word	0x08004928

0800174c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	220f      	movs	r2, #15
 800175a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_RCC_GetClockConfig+0x60>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0207 	and.w	r2, r3, #7
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e041      	b.n	8001846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f839 	bl	800184e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3304      	adds	r3, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4610      	mov	r0, r2
 80017f0:	f000 f9c0 	bl	8001b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d001      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e04e      	b.n	800191a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <HAL_TIM_Base_Start_IT+0xc4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d022      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x80>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a6:	d01d      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x80>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_TIM_Base_Start_IT+0xc8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d018      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x80>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_TIM_Base_Start_IT+0xcc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x80>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <HAL_TIM_Base_Start_IT+0xd0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00e      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x80>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_TIM_Base_Start_IT+0xd4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x80>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_TIM_Base_Start_IT+0xd8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d004      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x80>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_TIM_Base_Start_IT+0xdc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d111      	bne.n	8001908 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d010      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0201 	orr.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001906:	e007      	b.n	8001918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40010000 	.word	0x40010000
 800192c:	40000400 	.word	0x40000400
 8001930:	40000800 	.word	0x40000800
 8001934:	40000c00 	.word	0x40000c00
 8001938:	40010400 	.word	0x40010400
 800193c:	40014000 	.word	0x40014000
 8001940:	40001800 	.word	0x40001800

08001944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d020      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0202 	mvn.w	r2, #2
 8001978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8d2 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 8001994:	e005      	b.n	80019a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8c4 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8d5 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d020      	beq.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0204 	mvn.w	r2, #4
 80019c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f8ac 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 80019e0:	e005      	b.n	80019ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f89e 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8af 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d020      	beq.n	8001a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01b      	beq.n	8001a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0208 	mvn.w	r2, #8
 8001a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f886 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 8001a2c:	e005      	b.n	8001a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f878 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f889 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d020      	beq.n	8001a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01b      	beq.n	8001a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0210 	mvn.w	r2, #16
 8001a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2208      	movs	r2, #8
 8001a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f860 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 8001a78:	e005      	b.n	8001a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f852 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f863 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00c      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0201 	mvn.w	r2, #1
 8001aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fdfa 	bl	80006a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f906 	bl	8001ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f834 	bl	8001b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0220 	mvn.w	r2, #32
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8d8 	bl	8001ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <TIM_Base_SetConfig+0x12c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <TIM_Base_SetConfig+0x40>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b92:	d00f      	beq.n	8001bb4 <TIM_Base_SetConfig+0x40>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <TIM_Base_SetConfig+0x130>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00b      	beq.n	8001bb4 <TIM_Base_SetConfig+0x40>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <TIM_Base_SetConfig+0x134>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d007      	beq.n	8001bb4 <TIM_Base_SetConfig+0x40>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a41      	ldr	r2, [pc, #260]	; (8001cac <TIM_Base_SetConfig+0x138>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d003      	beq.n	8001bb4 <TIM_Base_SetConfig+0x40>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a40      	ldr	r2, [pc, #256]	; (8001cb0 <TIM_Base_SetConfig+0x13c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d108      	bne.n	8001bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a35      	ldr	r2, [pc, #212]	; (8001ca0 <TIM_Base_SetConfig+0x12c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d02b      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d027      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <TIM_Base_SetConfig+0x130>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d023      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <TIM_Base_SetConfig+0x134>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a30      	ldr	r2, [pc, #192]	; (8001cac <TIM_Base_SetConfig+0x138>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01b      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a2f      	ldr	r2, [pc, #188]	; (8001cb0 <TIM_Base_SetConfig+0x13c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d017      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <TIM_Base_SetConfig+0x140>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <TIM_Base_SetConfig+0x144>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00f      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <TIM_Base_SetConfig+0x148>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00b      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <TIM_Base_SetConfig+0x14c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <TIM_Base_SetConfig+0x150>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_Base_SetConfig+0xb2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <TIM_Base_SetConfig+0x154>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d108      	bne.n	8001c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <TIM_Base_SetConfig+0x12c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d003      	beq.n	8001c6c <TIM_Base_SetConfig+0xf8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <TIM_Base_SetConfig+0x13c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d103      	bne.n	8001c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f023 0201 	bic.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
  }
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40010400 	.word	0x40010400
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	40014800 	.word	0x40014800
 8001cc0:	40001800 	.word	0x40001800
 8001cc4:	40001c00 	.word	0x40001c00
 8001cc8:	40002000 	.word	0x40002000

08001ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <__NVIC_SetPriority>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Handler+0x1c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001d50:	f001 fcfe 	bl	8003750 <xTaskGetSchedulerState>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001d5a:	f002 fae5 	bl	8004328 <xPortSysTickHandler>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	f06f 0004 	mvn.w	r0, #4
 8001d72:	f7ff ffbf 	bl	8001cf4 <__NVIC_SetPriority>
#endif
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d82:	f3ef 8305 	mrs	r3, IPSR
 8001d86:	603b      	str	r3, [r7, #0]
  return(result);
 8001d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001d8e:	f06f 0305 	mvn.w	r3, #5
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	e00c      	b.n	8001db0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <osKernelInitialize+0x44>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d105      	bne.n	8001daa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <osKernelInitialize+0x44>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	e002      	b.n	8001db0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000080 	.word	0x20000080

08001dc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dca:	f3ef 8305 	mrs	r3, IPSR
 8001dce:	603b      	str	r3, [r7, #0]
  return(result);
 8001dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <osKernelStart+0x1a>
    stat = osErrorISR;
 8001dd6:	f06f 0305 	mvn.w	r3, #5
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	e010      	b.n	8001e00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <osKernelStart+0x48>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d109      	bne.n	8001dfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001de6:	f7ff ffbf 	bl	8001d68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <osKernelStart+0x48>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001df0:	f001 f866 	bl	8002ec0 <vTaskStartScheduler>
      stat = osOK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	e002      	b.n	8001e00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000080 	.word	0x20000080

08001e10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08e      	sub	sp, #56	; 0x38
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e20:	f3ef 8305 	mrs	r3, IPSR
 8001e24:	617b      	str	r3, [r7, #20]
  return(result);
 8001e26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d17e      	bne.n	8001f2a <osThreadNew+0x11a>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d07b      	beq.n	8001f2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e36:	2318      	movs	r3, #24
 8001e38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d045      	beq.n	8001ed6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <osThreadNew+0x48>
        name = attr->name;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <osThreadNew+0x6e>
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b38      	cmp	r3, #56	; 0x38
 8001e70:	d805      	bhi.n	8001e7e <osThreadNew+0x6e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <osThreadNew+0x72>
        return (NULL);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e054      	b.n	8001f2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00e      	beq.n	8001eb8 <osThreadNew+0xa8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b5b      	cmp	r3, #91	; 0x5b
 8001ea0:	d90a      	bls.n	8001eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <osThreadNew+0xa8>
        mem = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e010      	b.n	8001eda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10c      	bne.n	8001eda <osThreadNew+0xca>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d108      	bne.n	8001eda <osThreadNew+0xca>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <osThreadNew+0xca>
          mem = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e001      	b.n	8001eda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d110      	bne.n	8001f02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ee8:	9202      	str	r2, [sp, #8]
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6a3a      	ldr	r2, [r7, #32]
 8001ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fe0c 	bl	8002b14 <xTaskCreateStatic>
 8001efc:	4603      	mov	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e013      	b.n	8001f2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d110      	bne.n	8001f2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fe57 	bl	8002bce <xTaskCreate>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <osThreadNew+0x11a>
            hTask = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f2a:	693b      	ldr	r3, [r7, #16]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3728      	adds	r7, #40	; 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f3c:	f3ef 8305 	mrs	r3, IPSR
 8001f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <osDelay+0x1c>
    stat = osErrorISR;
 8001f48:	f06f 0305 	mvn.w	r3, #5
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e007      	b.n	8001f60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 ff7c 	bl	8002e58 <vTaskDelay>
    }
  }

  return (stat);
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <vApplicationGetIdleTaskMemory+0x30>)
 8001f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000084 	.word	0x20000084
 8001f9c:	200000e0 	.word	0x200000e0

08001fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8001fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8001fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fbe:	601a      	str	r2, [r3, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	200002e0 	.word	0x200002e0
 8001fd0:	2000033c 	.word	0x2000033c

08001fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f103 0208 	add.w	r2, r3, #8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f103 0208 	add.w	r2, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f103 0208 	add.w	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d103      	bne.n	8002096 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e00c      	b.n	80020b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3308      	adds	r3, #8
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e002      	b.n	80020a4 <vListInsert+0x2e>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d2f6      	bcs.n	800209e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6892      	ldr	r2, [r2, #8]
 80020fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6852      	ldr	r2, [r2, #4]
 8002108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d103      	bne.n	800211c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002162:	bf00      	nop
 8002164:	e7fe      	b.n	8002164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002166:	f002 f84d 	bl	8004204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	441a      	add	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	3b01      	subs	r3, #1
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	441a      	add	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	22ff      	movs	r2, #255	; 0xff
 80021aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d114      	bne.n	80021e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01a      	beq.n	80021fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3310      	adds	r3, #16
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f903 	bl	80033d4 <xTaskRemoveFromEventList>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d012      	beq.n	80021fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <xQueueGenericReset+0xcc>)
 80021d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	e009      	b.n	80021fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3310      	adds	r3, #16
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fef2 	bl	8001fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3324      	adds	r3, #36	; 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff feed 	bl	8001fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021fa:	f002 f833 	bl	8004264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002232:	bf00      	nop
 8002234:	e7fe      	b.n	8002234 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800224e:	bf00      	nop
 8002250:	e7fe      	b.n	8002250 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <xQueueGenericCreateStatic+0x52>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <xQueueGenericCreateStatic+0x56>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <xQueueGenericCreateStatic+0x58>
 8002262:	2300      	movs	r3, #0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	623b      	str	r3, [r7, #32]
}
 800227a:	bf00      	nop
 800227c:	e7fe      	b.n	800227c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <xQueueGenericCreateStatic+0x7e>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <xQueueGenericCreateStatic+0x82>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <xQueueGenericCreateStatic+0x84>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	61fb      	str	r3, [r7, #28]
}
 80022a6:	bf00      	nop
 80022a8:	e7fe      	b.n	80022a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022aa:	2350      	movs	r3, #80	; 0x50
 80022ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b50      	cmp	r3, #80	; 0x50
 80022b2:	d00a      	beq.n	80022ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	61bb      	str	r3, [r7, #24]
}
 80022c6:	bf00      	nop
 80022c8:	e7fe      	b.n	80022c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80022ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f805 	bl	80022fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d103      	bne.n	8002318 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e002      	b.n	800231e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800232a:	2101      	movs	r1, #1
 800232c:	69b8      	ldr	r0, [r7, #24]
 800232e:	f7ff ff05 	bl	800213c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08e      	sub	sp, #56	; 0x38
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002352:	2300      	movs	r3, #0
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <xQueueGenericSend+0x32>
	__asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002372:	bf00      	nop
 8002374:	e7fe      	b.n	8002374 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d103      	bne.n	8002384 <xQueueGenericSend+0x40>
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <xQueueGenericSend+0x44>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <xQueueGenericSend+0x46>
 8002388:	2300      	movs	r3, #0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <xQueueGenericSend+0x60>
	__asm volatile
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023a0:	bf00      	nop
 80023a2:	e7fe      	b.n	80023a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d103      	bne.n	80023b2 <xQueueGenericSend+0x6e>
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <xQueueGenericSend+0x72>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <xQueueGenericSend+0x74>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	623b      	str	r3, [r7, #32]
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023d2:	f001 f9bd 	bl	8003750 <xTaskGetSchedulerState>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <xQueueGenericSend+0x9e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <xQueueGenericSend+0xa2>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <xQueueGenericSend+0xa4>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <xQueueGenericSend+0xbe>
	__asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	61fb      	str	r3, [r7, #28]
}
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002402:	f001 feff 	bl	8004204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <xQueueGenericSend+0xd4>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d129      	bne.n	800246c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800241e:	f000 fa0b 	bl	8002838 <prvCopyDataToQueue>
 8002422:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	3324      	adds	r3, #36	; 0x24
 8002430:	4618      	mov	r0, r3
 8002432:	f000 ffcf 	bl	80033d4 <xTaskRemoveFromEventList>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <xQueueGenericSend+0x1f8>)
 800243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	e00a      	b.n	8002464 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002454:	4b39      	ldr	r3, [pc, #228]	; (800253c <xQueueGenericSend+0x1f8>)
 8002456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002464:	f001 fefe 	bl	8004264 <vPortExitCritical>
				return pdPASS;
 8002468:	2301      	movs	r3, #1
 800246a:	e063      	b.n	8002534 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002472:	f001 fef7 	bl	8004264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002476:	2300      	movs	r3, #0
 8002478:	e05c      	b.n	8002534 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	2b00      	cmp	r3, #0
 800247e:	d106      	bne.n	800248e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4618      	mov	r0, r3
 8002486:	f001 f809 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800248a:	2301      	movs	r3, #1
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800248e:	f001 fee9 	bl	8004264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002492:	f000 fd7b 	bl	8002f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002496:	f001 feb5 	bl	8004204 <vPortEnterCritical>
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d103      	bne.n	80024b0 <xQueueGenericSend+0x16c>
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d103      	bne.n	80024c6 <xQueueGenericSend+0x182>
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024c6:	f001 fecd 	bl	8004264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024ca:	1d3a      	adds	r2, r7, #4
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fff8 	bl	80034c8 <xTaskCheckForTimeOut>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d124      	bne.n	8002528 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024e0:	f000 faa2 	bl	8002a28 <prvIsQueueFull>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	3310      	adds	r3, #16
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 ff1e 	bl	8003334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80024f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024fa:	f000 fa2d 	bl	8002958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80024fe:	f000 fd53 	bl	8002fa8 <xTaskResumeAll>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f af7c 	bne.w	8002402 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <xQueueGenericSend+0x1f8>)
 800250c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	e772      	b.n	8002402 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800251c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800251e:	f000 fa1b 	bl	8002958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002522:	f000 fd41 	bl	8002fa8 <xTaskResumeAll>
 8002526:	e76c      	b.n	8002402 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800252a:	f000 fa15 	bl	8002958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800252e:	f000 fd3b 	bl	8002fa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002534:	4618      	mov	r0, r3
 8002536:	3738      	adds	r7, #56	; 0x38
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	e000ed04 	.word	0xe000ed04

08002540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b090      	sub	sp, #64	; 0x40
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <xQueueGenericSendFromISR+0x3c>
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <xQueueGenericSendFromISR+0x40>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <xQueueGenericSendFromISR+0x42>
 8002580:	2300      	movs	r3, #0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002598:	bf00      	nop
 800259a:	e7fe      	b.n	800259a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d103      	bne.n	80025aa <xQueueGenericSendFromISR+0x6a>
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <xQueueGenericSendFromISR+0x6e>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <xQueueGenericSendFromISR+0x70>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	623b      	str	r3, [r7, #32]
}
 80025c6:	bf00      	nop
 80025c8:	e7fe      	b.n	80025c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025ca:	f001 fefd 	bl	80043c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80025ce:	f3ef 8211 	mrs	r2, BASEPRI
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	61fa      	str	r2, [r7, #28]
 80025e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80025e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <xQueueGenericSendFromISR+0xbc>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d12f      	bne.n	800265c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002612:	f000 f911 	bl	8002838 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002616:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d112      	bne.n	8002646 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	d016      	beq.n	8002656 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	3324      	adds	r3, #36	; 0x24
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fed1 	bl	80033d4 <xTaskRemoveFromEventList>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e007      	b.n	8002656 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800264a:	3301      	adds	r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	b25a      	sxtb	r2, r3
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002656:	2301      	movs	r3, #1
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800265a:	e001      	b.n	8002660 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800265c:	2300      	movs	r3, #0
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800266a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800266c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800266e:	4618      	mov	r0, r3
 8002670:	3740      	adds	r7, #64	; 0x40
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <xQueueReceive+0x30>
	__asm volatile
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	623b      	str	r3, [r7, #32]
}
 80026a4:	bf00      	nop
 80026a6:	e7fe      	b.n	80026a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <xQueueReceive+0x3e>
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <xQueueReceive+0x42>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <xQueueReceive+0x44>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueReceive+0x5e>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	61fb      	str	r3, [r7, #28]
}
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026d6:	f001 f83b 	bl	8003750 <xTaskGetSchedulerState>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <xQueueReceive+0x6e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <xQueueReceive+0x72>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <xQueueReceive+0x74>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <xQueueReceive+0x8e>
	__asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	61bb      	str	r3, [r7, #24]
}
 8002702:	bf00      	nop
 8002704:	e7fe      	b.n	8002704 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002706:	f001 fd7d 	bl	8004204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01f      	beq.n	8002756 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800271a:	f000 f8f7 	bl	800290c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00f      	beq.n	800274e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	3310      	adds	r3, #16
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fe4e 	bl	80033d4 <xTaskRemoveFromEventList>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800273e:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <xQueueReceive+0x1bc>)
 8002740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800274e:	f001 fd89 	bl	8004264 <vPortExitCritical>
				return pdPASS;
 8002752:	2301      	movs	r3, #1
 8002754:	e069      	b.n	800282a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800275c:	f001 fd82 	bl	8004264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002760:	2300      	movs	r3, #0
 8002762:	e062      	b.n	800282a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fe94 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002774:	2301      	movs	r3, #1
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002778:	f001 fd74 	bl	8004264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800277c:	f000 fc06 	bl	8002f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002780:	f001 fd40 	bl	8004204 <vPortEnterCritical>
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800278a:	b25b      	sxtb	r3, r3
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d103      	bne.n	800279a <xQueueReceive+0x122>
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d103      	bne.n	80027b0 <xQueueReceive+0x138>
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b0:	f001 fd58 	bl	8004264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027b4:	1d3a      	adds	r2, r7, #4
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fe83 	bl	80034c8 <xTaskCheckForTimeOut>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d123      	bne.n	8002810 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ca:	f000 f917 	bl	80029fc <prvIsQueueEmpty>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d017      	beq.n	8002804 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	3324      	adds	r3, #36	; 0x24
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fda9 	bl	8003334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e4:	f000 f8b8 	bl	8002958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027e8:	f000 fbde 	bl	8002fa8 <xTaskResumeAll>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d189      	bne.n	8002706 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <xQueueReceive+0x1bc>)
 80027f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	e780      	b.n	8002706 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002806:	f000 f8a7 	bl	8002958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800280a:	f000 fbcd 	bl	8002fa8 <xTaskResumeAll>
 800280e:	e77a      	b.n	8002706 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002812:	f000 f8a1 	bl	8002958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002816:	f000 fbc7 	bl	8002fa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800281a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800281c:	f000 f8ee 	bl	80029fc <prvIsQueueEmpty>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	f43f af6f 	beq.w	8002706 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800282a:	4618      	mov	r0, r3
 800282c:	3730      	adds	r7, #48	; 0x30
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d14d      	bne.n	80028fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 ff92 	bl	800378c <xTaskPriorityDisinherit>
 8002868:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	e043      	b.n	80028fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d119      	bne.n	80028ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6858      	ldr	r0, [r3, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	461a      	mov	r2, r3
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	f001 fff6 	bl	8004874 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	441a      	add	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d32b      	bcc.n	80028fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	e026      	b.n	80028fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68d8      	ldr	r0, [r3, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	461a      	mov	r2, r3
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	f001 ffdc 	bl	8004874 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	425b      	negs	r3, r3
 80028c6:	441a      	add	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	425b      	negs	r3, r3
 80028e2:	441a      	add	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d105      	bne.n	80028fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002902:	697b      	ldr	r3, [r7, #20]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	441a      	add	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	d303      	bcc.n	8002940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	461a      	mov	r2, r3
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	f001 ff92 	bl	8004874 <memcpy>
	}
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002960:	f001 fc50 	bl	8004204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800296c:	e011      	b.n	8002992 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d012      	beq.n	800299c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3324      	adds	r3, #36	; 0x24
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fd2a 	bl	80033d4 <xTaskRemoveFromEventList>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002986:	f000 fe01 	bl	800358c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	3b01      	subs	r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	dce9      	bgt.n	800296e <prvUnlockQueue+0x16>
 800299a:	e000      	b.n	800299e <prvUnlockQueue+0x46>
					break;
 800299c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80029a6:	f001 fc5d 	bl	8004264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029aa:	f001 fc2b 	bl	8004204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029b6:	e011      	b.n	80029dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3310      	adds	r3, #16
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fd05 	bl	80033d4 <xTaskRemoveFromEventList>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80029d0:	f000 fddc 	bl	800358c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	dce9      	bgt.n	80029b8 <prvUnlockQueue+0x60>
 80029e4:	e000      	b.n	80029e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80029e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	22ff      	movs	r2, #255	; 0xff
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80029f0:	f001 fc38 	bl	8004264 <vPortExitCritical>
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a04:	f001 fbfe 	bl	8004204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e001      	b.n	8002a1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a1a:	f001 fc23 	bl	8004264 <vPortExitCritical>

	return xReturn;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a30:	f001 fbe8 	bl	8004204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d102      	bne.n	8002a46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e001      	b.n	8002a4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a4a:	f001 fc0b 	bl	8004264 <vPortExitCritical>

	return xReturn;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e014      	b.n	8002a92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a68:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <vQueueAddToRegistry+0x50>)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <vQueueAddToRegistry+0x50>)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <vQueueAddToRegistry+0x50>)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002a8a:	e006      	b.n	8002a9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b07      	cmp	r3, #7
 8002a96:	d9e7      	bls.n	8002a68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000073c 	.word	0x2000073c

08002aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002abc:	f001 fba2 	bl	8004204 <vPortEnterCritical>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d103      	bne.n	8002ad6 <vQueueWaitForMessageRestricted+0x2a>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d103      	bne.n	8002aec <vQueueWaitForMessageRestricted+0x40>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aec:	f001 fbba 	bl	8004264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3324      	adds	r3, #36	; 0x24
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fc3b 	bl	800337c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff26 	bl	8002958 <prvUnlockQueue>
	}
 8002b0c:	bf00      	nop
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af04      	add	r7, sp, #16
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	623b      	str	r3, [r7, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xTaskCreateStatic+0x46>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	61fb      	str	r3, [r7, #28]
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b5a:	235c      	movs	r3, #92	; 0x5c
 8002b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b5c      	cmp	r3, #92	; 0x5c
 8002b62:	d00a      	beq.n	8002b7a <xTaskCreateStatic+0x66>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61bb      	str	r3, [r7, #24]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01e      	beq.n	8002bc0 <xTaskCreateStatic+0xac>
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9303      	str	r3, [sp, #12]
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	9302      	str	r3, [sp, #8]
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f850 	bl	8002c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bba:	f000 f8dd 	bl	8002d78 <prvAddNewTaskToReadyList>
 8002bbe:	e001      	b.n	8002bc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bc4:	697b      	ldr	r3, [r7, #20]
	}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08c      	sub	sp, #48	; 0x30
 8002bd2:	af04      	add	r7, sp, #16
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fc30 	bl	8004448 <pvPortMalloc>
 8002be8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bf0:	205c      	movs	r0, #92	; 0x5c
 8002bf2:	f001 fc29 	bl	8004448 <pvPortMalloc>
 8002bf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
 8002c04:	e005      	b.n	8002c12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f001 fcea 	bl	80045e0 <vPortFree>
 8002c0c:	e001      	b.n	8002c12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9303      	str	r3, [sp, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f80e 	bl	8002c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c3c:	69f8      	ldr	r0, [r7, #28]
 8002c3e:	f000 f89b 	bl	8002d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	e002      	b.n	8002c4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	21a5      	movs	r1, #165	; 0xa5
 8002c72:	f001 fdd3 	bl	800481c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c80:	3b01      	subs	r3, #1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f023 0307 	bic.w	r3, r3, #7
 8002c8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	617b      	str	r3, [r7, #20]
}
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01f      	beq.n	8002cf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	e012      	b.n	8002ce2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	7819      	ldrb	r1, [r3, #0]
 8002cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3334      	adds	r3, #52	; 0x34
 8002ccc:	460a      	mov	r2, r1
 8002cce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d9e9      	bls.n	8002cbc <prvInitialiseNewTask+0x64>
 8002ce8:	e000      	b.n	8002cec <prvInitialiseNewTask+0x94>
			{
				break;
 8002cea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf4:	e003      	b.n	8002cfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	2b37      	cmp	r3, #55	; 0x37
 8002d02:	d901      	bls.n	8002d08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d04:	2337      	movs	r3, #55	; 0x37
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	2200      	movs	r2, #0
 8002d18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f978 	bl	8002014 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	3318      	adds	r3, #24
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f973 	bl	8002014 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	2200      	movs	r2, #0
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	69b8      	ldr	r0, [r7, #24]
 8002d58:	f001 f928 	bl	8003fac <pxPortInitialiseStack>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d6e:	bf00      	nop
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d80:	f001 fa40 	bl	8004204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <prvAddNewTaskToReadyList+0xc8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <prvAddNewTaskToReadyList+0xc8>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d9c:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <prvAddNewTaskToReadyList+0xc4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d110      	bne.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002da4:	f000 fc16 	bl	80035d4 <prvInitialiseTaskLists>
 8002da8:	e00d      	b.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <prvAddNewTaskToReadyList+0xcc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <prvAddNewTaskToReadyList+0xc8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d802      	bhi.n	8002dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002dc0:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <prvAddNewTaskToReadyList+0xc8>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <prvAddNewTaskToReadyList+0xd0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <prvAddNewTaskToReadyList+0xd0>)
 8002dce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <prvAddNewTaskToReadyList+0xd0>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <prvAddNewTaskToReadyList+0xd4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d903      	bls.n	8002dec <prvAddNewTaskToReadyList+0x74>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <prvAddNewTaskToReadyList+0xd4>)
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <prvAddNewTaskToReadyList+0xd8>)
 8002dfa:	441a      	add	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f7ff f913 	bl	800202e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e08:	f001 fa2c 	bl	8004264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <prvAddNewTaskToReadyList+0xcc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <prvAddNewTaskToReadyList+0xc8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d207      	bcs.n	8002e32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <prvAddNewTaskToReadyList+0xdc>)
 8002e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000c50 	.word	0x20000c50
 8002e40:	2000077c 	.word	0x2000077c
 8002e44:	20000c5c 	.word	0x20000c5c
 8002e48:	20000c6c 	.word	0x20000c6c
 8002e4c:	20000c58 	.word	0x20000c58
 8002e50:	20000780 	.word	0x20000780
 8002e54:	e000ed04 	.word	0xe000ed04

08002e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <vTaskDelay+0x60>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <vTaskDelay+0x30>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	60bb      	str	r3, [r7, #8]
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e88:	f000 f880 	bl	8002f8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fcea 	bl	8003868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e94:	f000 f888 	bl	8002fa8 <xTaskResumeAll>
 8002e98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <vTaskDelay+0x64>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000c78 	.word	0x20000c78
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ece:	463a      	mov	r2, r7
 8002ed0:	1d39      	adds	r1, r7, #4
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f848 	bl	8001f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	9202      	str	r2, [sp, #8]
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	460a      	mov	r2, r1
 8002eee:	4921      	ldr	r1, [pc, #132]	; (8002f74 <vTaskStartScheduler+0xb4>)
 8002ef0:	4821      	ldr	r0, [pc, #132]	; (8002f78 <vTaskStartScheduler+0xb8>)
 8002ef2:	f7ff fe0f 	bl	8002b14 <xTaskCreateStatic>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <vTaskStartScheduler+0xbc>)
 8002efa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <vTaskStartScheduler+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f04:	2301      	movs	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e001      	b.n	8002f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f14:	f000 fcfc 	bl	8003910 <xTimerCreateTimerTask>
 8002f18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d116      	bne.n	8002f4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
}
 8002f32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <vTaskStartScheduler+0xc0>)
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <vTaskStartScheduler+0xc4>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <vTaskStartScheduler+0xc8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f48:	f001 f8ba 	bl	80040c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f4c:	e00e      	b.n	8002f6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d10a      	bne.n	8002f6c <vTaskStartScheduler+0xac>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	60fb      	str	r3, [r7, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <vTaskStartScheduler+0xaa>
}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	080048b8 	.word	0x080048b8
 8002f78:	080035a5 	.word	0x080035a5
 8002f7c:	20000c74 	.word	0x20000c74
 8002f80:	20000c70 	.word	0x20000c70
 8002f84:	20000c5c 	.word	0x20000c5c
 8002f88:	20000c54 	.word	0x20000c54

08002f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <vTaskSuspendAll+0x18>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a03      	ldr	r2, [pc, #12]	; (8002fa4 <vTaskSuspendAll+0x18>)
 8002f98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	20000c78 	.word	0x20000c78

08002fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fb6:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <xTaskResumeAll+0x118>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	603b      	str	r3, [r7, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fd4:	f001 f916 	bl	8004204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <xTaskResumeAll+0x118>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	4a38      	ldr	r2, [pc, #224]	; (80030c0 <xTaskResumeAll+0x118>)
 8002fe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <xTaskResumeAll+0x118>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d162      	bne.n	80030b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <xTaskResumeAll+0x11c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d05e      	beq.n	80030b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff2:	e02f      	b.n	8003054 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <xTaskResumeAll+0x120>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3318      	adds	r3, #24
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f871 	bl	80020e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3304      	adds	r3, #4
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f86c 	bl	80020e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <xTaskResumeAll+0x124>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d903      	bls.n	8003024 <xTaskResumeAll+0x7c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <xTaskResumeAll+0x124>)
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <xTaskResumeAll+0x128>)
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3304      	adds	r3, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fe fff7 	bl	800202e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <xTaskResumeAll+0x12c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <xTaskResumeAll+0x130>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003054:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <xTaskResumeAll+0x120>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1cb      	bne.n	8002ff4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003062:	f000 fb55 	bl	8003710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <xTaskResumeAll+0x134>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003072:	f000 f847 	bl	8003104 <xTaskIncrementTick>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <xTaskResumeAll+0x130>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3b01      	subs	r3, #1
 8003086:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f1      	bne.n	8003072 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <xTaskResumeAll+0x134>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <xTaskResumeAll+0x130>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800309c:	2301      	movs	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <xTaskResumeAll+0x138>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030b0:	f001 f8d8 	bl	8004264 <vPortExitCritical>

	return xAlreadyYielded;
 80030b4:	68bb      	ldr	r3, [r7, #8]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000c78 	.word	0x20000c78
 80030c4:	20000c50 	.word	0x20000c50
 80030c8:	20000c10 	.word	0x20000c10
 80030cc:	20000c58 	.word	0x20000c58
 80030d0:	20000780 	.word	0x20000780
 80030d4:	2000077c 	.word	0x2000077c
 80030d8:	20000c64 	.word	0x20000c64
 80030dc:	20000c60 	.word	0x20000c60
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <xTaskGetTickCount+0x1c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030f0:	687b      	ldr	r3, [r7, #4]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000c54 	.word	0x20000c54

08003104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800310e:	4b4f      	ldr	r3, [pc, #316]	; (800324c <xTaskIncrementTick+0x148>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 808f 	bne.w	8003236 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <xTaskIncrementTick+0x14c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <xTaskIncrementTick+0x14c>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d120      	bne.n	800316e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800312c:	4b49      	ldr	r3, [pc, #292]	; (8003254 <xTaskIncrementTick+0x150>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <xTaskIncrementTick+0x48>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	603b      	str	r3, [r7, #0]
}
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <xTaskIncrementTick+0x46>
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <xTaskIncrementTick+0x150>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <xTaskIncrementTick+0x154>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3f      	ldr	r2, [pc, #252]	; (8003254 <xTaskIncrementTick+0x150>)
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <xTaskIncrementTick+0x154>)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b3e      	ldr	r3, [pc, #248]	; (800325c <xTaskIncrementTick+0x158>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	4a3d      	ldr	r2, [pc, #244]	; (800325c <xTaskIncrementTick+0x158>)
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	f000 fad1 	bl	8003710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800316e:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <xTaskIncrementTick+0x15c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	429a      	cmp	r2, r3
 8003176:	d349      	bcc.n	800320c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003178:	4b36      	ldr	r3, [pc, #216]	; (8003254 <xTaskIncrementTick+0x150>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003182:	4b37      	ldr	r3, [pc, #220]	; (8003260 <xTaskIncrementTick+0x15c>)
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	601a      	str	r2, [r3, #0]
					break;
 800318a:	e03f      	b.n	800320c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800318c:	4b31      	ldr	r3, [pc, #196]	; (8003254 <xTaskIncrementTick+0x150>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d203      	bcs.n	80031ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031a4:	4a2e      	ldr	r2, [pc, #184]	; (8003260 <xTaskIncrementTick+0x15c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031aa:	e02f      	b.n	800320c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe ff99 	bl	80020e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3318      	adds	r3, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe ff90 	bl	80020e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <xTaskIncrementTick+0x160>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d903      	bls.n	80031dc <xTaskIncrementTick+0xd8>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <xTaskIncrementTick+0x160>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <xTaskIncrementTick+0x164>)
 80031ea:	441a      	add	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7fe ff1b 	bl	800202e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <xTaskIncrementTick+0x168>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	429a      	cmp	r2, r3
 8003204:	d3b8      	bcc.n	8003178 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320a:	e7b5      	b.n	8003178 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <xTaskIncrementTick+0x168>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	4915      	ldr	r1, [pc, #84]	; (8003268 <xTaskIncrementTick+0x164>)
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d901      	bls.n	8003228 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <xTaskIncrementTick+0x16c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e004      	b.n	8003240 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <xTaskIncrementTick+0x170>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3301      	adds	r3, #1
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <xTaskIncrementTick+0x170>)
 800323e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003240:	697b      	ldr	r3, [r7, #20]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000c78 	.word	0x20000c78
 8003250:	20000c54 	.word	0x20000c54
 8003254:	20000c08 	.word	0x20000c08
 8003258:	20000c0c 	.word	0x20000c0c
 800325c:	20000c68 	.word	0x20000c68
 8003260:	20000c70 	.word	0x20000c70
 8003264:	20000c58 	.word	0x20000c58
 8003268:	20000780 	.word	0x20000780
 800326c:	2000077c 	.word	0x2000077c
 8003270:	20000c64 	.word	0x20000c64
 8003274:	20000c60 	.word	0x20000c60

08003278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <vTaskSwitchContext+0xa8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <vTaskSwitchContext+0xac>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800328c:	e041      	b.n	8003312 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <vTaskSwitchContext+0xac>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <vTaskSwitchContext+0xb0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e010      	b.n	80032be <vTaskSwitchContext+0x46>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	607b      	str	r3, [r7, #4]
}
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <vTaskSwitchContext+0x3e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	491b      	ldr	r1, [pc, #108]	; (800332c <vTaskSwitchContext+0xb4>)
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0e4      	beq.n	800329c <vTaskSwitchContext+0x24>
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4a13      	ldr	r2, [pc, #76]	; (800332c <vTaskSwitchContext+0xb4>)
 80032de:	4413      	add	r3, r2
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3308      	adds	r3, #8
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d104      	bne.n	8003302 <vTaskSwitchContext+0x8a>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a09      	ldr	r2, [pc, #36]	; (8003330 <vTaskSwitchContext+0xb8>)
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4a06      	ldr	r2, [pc, #24]	; (8003328 <vTaskSwitchContext+0xb0>)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000c78 	.word	0x20000c78
 8003324:	20000c64 	.word	0x20000c64
 8003328:	20000c58 	.word	0x20000c58
 800332c:	20000780 	.word	0x20000780
 8003330:	2000077c 	.word	0x2000077c

08003334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	60fb      	str	r3, [r7, #12]
}
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <vTaskPlaceOnEventList+0x44>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3318      	adds	r3, #24
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fe87 	bl	8002076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003368:	2101      	movs	r1, #1
 800336a:	6838      	ldr	r0, [r7, #0]
 800336c:	f000 fa7c 	bl	8003868 <prvAddCurrentTaskToDelayedList>
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000077c 	.word	0x2000077c

0800337c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	617b      	str	r3, [r7, #20]
}
 80033a0:	bf00      	nop
 80033a2:	e7fe      	b.n	80033a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3318      	adds	r3, #24
 80033aa:	4619      	mov	r1, r3
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7fe fe3e 	bl	800202e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
 80033bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f000 fa51 	bl	8003868 <prvAddCurrentTaskToDelayedList>
	}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	2000077c 	.word	0x2000077c

080033d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	60fb      	str	r3, [r7, #12]
}
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3318      	adds	r3, #24
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe fe6f 	bl	80020e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <xTaskRemoveFromEventList+0xb0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11d      	bne.n	800344e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	3304      	adds	r3, #4
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fe66 	bl	80020e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <xTaskRemoveFromEventList+0xb4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d903      	bls.n	8003430 <xTaskRemoveFromEventList+0x5c>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	4a16      	ldr	r2, [pc, #88]	; (8003488 <xTaskRemoveFromEventList+0xb4>)
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <xTaskRemoveFromEventList+0xb8>)
 800343e:	441a      	add	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7fe fdf1 	bl	800202e <vListInsertEnd>
 800344c:	e005      	b.n	800345a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3318      	adds	r3, #24
 8003452:	4619      	mov	r1, r3
 8003454:	480e      	ldr	r0, [pc, #56]	; (8003490 <xTaskRemoveFromEventList+0xbc>)
 8003456:	f7fe fdea 	bl	800202e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <xTaskRemoveFromEventList+0xc0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	429a      	cmp	r2, r3
 8003466:	d905      	bls.n	8003474 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003468:	2301      	movs	r3, #1
 800346a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <xTaskRemoveFromEventList+0xc4>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e001      	b.n	8003478 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003478:	697b      	ldr	r3, [r7, #20]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000c78 	.word	0x20000c78
 8003488:	20000c58 	.word	0x20000c58
 800348c:	20000780 	.word	0x20000780
 8003490:	20000c10 	.word	0x20000c10
 8003494:	2000077c 	.word	0x2000077c
 8003498:	20000c64 	.word	0x20000c64

0800349c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <vTaskInternalSetTimeOutState+0x24>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <vTaskInternalSetTimeOutState+0x28>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000c68 	.word	0x20000c68
 80034c4:	20000c54 	.word	0x20000c54

080034c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	613b      	str	r3, [r7, #16]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	60fb      	str	r3, [r7, #12]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800350a:	f000 fe7b 	bl	8004204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <xTaskCheckForTimeOut+0xbc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d102      	bne.n	800352e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e023      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <xTaskCheckForTimeOut+0xc0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d007      	beq.n	800354a <xTaskCheckForTimeOut+0x82>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e015      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	d20b      	bcs.n	800356c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff9b 	bl	800349c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e004      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003572:	2301      	movs	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003576:	f000 fe75 	bl	8004264 <vPortExitCritical>

	return xReturn;
 800357a:	69fb      	ldr	r3, [r7, #28]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000c54 	.word	0x20000c54
 8003588:	20000c68 	.word	0x20000c68

0800358c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <vTaskMissedYield+0x14>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000c64 	.word	0x20000c64

080035a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035ac:	f000 f852 	bl	8003654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <prvIdleTask+0x28>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d9f9      	bls.n	80035ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <prvIdleTask+0x2c>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035c8:	e7f0      	b.n	80035ac <prvIdleTask+0x8>
 80035ca:	bf00      	nop
 80035cc:	20000780 	.word	0x20000780
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	e00c      	b.n	80035fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <prvInitialiseTaskLists+0x60>)
 80035ec:	4413      	add	r3, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fcf0 	bl	8001fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3301      	adds	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b37      	cmp	r3, #55	; 0x37
 80035fe:	d9ef      	bls.n	80035e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003602:	f7fe fce7 	bl	8001fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003608:	f7fe fce4 	bl	8001fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <prvInitialiseTaskLists+0x6c>)
 800360e:	f7fe fce1 	bl	8001fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <prvInitialiseTaskLists+0x70>)
 8003614:	f7fe fcde 	bl	8001fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003618:	480b      	ldr	r0, [pc, #44]	; (8003648 <prvInitialiseTaskLists+0x74>)
 800361a:	f7fe fcdb 	bl	8001fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <prvInitialiseTaskLists+0x78>)
 8003620:	4a05      	ldr	r2, [pc, #20]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <prvInitialiseTaskLists+0x7c>)
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000780 	.word	0x20000780
 8003638:	20000be0 	.word	0x20000be0
 800363c:	20000bf4 	.word	0x20000bf4
 8003640:	20000c10 	.word	0x20000c10
 8003644:	20000c24 	.word	0x20000c24
 8003648:	20000c3c 	.word	0x20000c3c
 800364c:	20000c08 	.word	0x20000c08
 8003650:	20000c0c 	.word	0x20000c0c

08003654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800365a:	e019      	b.n	8003690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800365c:	f000 fdd2 	bl	8004204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <prvCheckTasksWaitingTermination+0x50>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fd3b 	bl	80020e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 800367a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003686:	f000 fded 	bl	8004264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f810 	bl	80036b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e1      	bne.n	800365c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000c24 	.word	0x20000c24
 80036a8:	20000c50 	.word	0x20000c50
 80036ac:	20000c38 	.word	0x20000c38

080036b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 ff8a 	bl	80045e0 <vPortFree>
				vPortFree( pxTCB );
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 ff87 	bl	80045e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036d2:	e018      	b.n	8003706 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d103      	bne.n	80036e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 ff7e 	bl	80045e0 <vPortFree>
	}
 80036e4:	e00f      	b.n	8003706 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d00a      	beq.n	8003706 <prvDeleteTCB+0x56>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	60fb      	str	r3, [r7, #12]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <prvDeleteTCB+0x54>
	}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <prvResetNextTaskUnblockTime+0x38>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <prvResetNextTaskUnblockTime+0x3c>)
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003728:	e008      	b.n	800373c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <prvResetNextTaskUnblockTime+0x38>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a04      	ldr	r2, [pc, #16]	; (800374c <prvResetNextTaskUnblockTime+0x3c>)
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000c08 	.word	0x20000c08
 800374c:	20000c70 	.word	0x20000c70

08003750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <xTaskGetSchedulerState+0x34>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800375e:	2301      	movs	r3, #1
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	e008      	b.n	8003776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <xTaskGetSchedulerState+0x38>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800376c:	2302      	movs	r3, #2
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	e001      	b.n	8003776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003776:	687b      	ldr	r3, [r7, #4]
	}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	20000c5c 	.word	0x20000c5c
 8003788:	20000c78 	.word	0x20000c78

0800378c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d056      	beq.n	8003850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <xTaskPriorityDisinherit+0xd0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d00a      	beq.n	80037c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	60fb      	str	r3, [r7, #12]
}
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	60bb      	str	r3, [r7, #8]
}
 80037dc:	bf00      	nop
 80037de:	e7fe      	b.n	80037de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	1e5a      	subs	r2, r3, #1
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d02c      	beq.n	8003850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d128      	bne.n	8003850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	3304      	adds	r3, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fc70 	bl	80020e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <xTaskPriorityDisinherit+0xd4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d903      	bls.n	8003830 <xTaskPriorityDisinherit+0xa4>
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a0c      	ldr	r2, [pc, #48]	; (8003860 <xTaskPriorityDisinherit+0xd4>)
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a09      	ldr	r2, [pc, #36]	; (8003864 <xTaskPriorityDisinherit+0xd8>)
 800383e:	441a      	add	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7fe fbf1 	bl	800202e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003850:	697b      	ldr	r3, [r7, #20]
	}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2000077c 	.word	0x2000077c
 8003860:	20000c58 	.word	0x20000c58
 8003864:	20000780 	.word	0x20000780

08003868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <prvAddCurrentTaskToDelayedList+0x94>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3304      	adds	r3, #4
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fc32 	bl	80020e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d10a      	bne.n	80038a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <prvAddCurrentTaskToDelayedList+0x94>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4819      	ldr	r0, [pc, #100]	; (8003900 <prvAddCurrentTaskToDelayedList+0x98>)
 800389c:	f7fe fbc7 	bl	800202e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038a0:	e026      	b.n	80038f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <prvAddCurrentTaskToDelayedList+0x94>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d209      	bcs.n	80038ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <prvAddCurrentTaskToDelayedList+0x94>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fe fbd5 	bl	8002076 <vListInsert>
}
 80038cc:	e010      	b.n	80038f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <prvAddCurrentTaskToDelayedList+0xa0>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <prvAddCurrentTaskToDelayedList+0x94>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7fe fbcb 	bl	8002076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <prvAddCurrentTaskToDelayedList+0xa4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d202      	bcs.n	80038f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80038ea:	4a08      	ldr	r2, [pc, #32]	; (800390c <prvAddCurrentTaskToDelayedList+0xa4>)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000c54 	.word	0x20000c54
 80038fc:	2000077c 	.word	0x2000077c
 8003900:	20000c3c 	.word	0x20000c3c
 8003904:	20000c0c 	.word	0x20000c0c
 8003908:	20000c08 	.word	0x20000c08
 800390c:	20000c70 	.word	0x20000c70

08003910 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800391a:	f000 fb07 	bl	8003f2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <xTimerCreateTimerTask+0x80>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d021      	beq.n	800396a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800392e:	1d3a      	adds	r2, r7, #4
 8003930:	f107 0108 	add.w	r1, r7, #8
 8003934:	f107 030c 	add.w	r3, r7, #12
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe fb31 	bl	8001fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	9202      	str	r2, [sp, #8]
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2302      	movs	r3, #2
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	460a      	mov	r2, r1
 8003950:	4910      	ldr	r1, [pc, #64]	; (8003994 <xTimerCreateTimerTask+0x84>)
 8003952:	4811      	ldr	r0, [pc, #68]	; (8003998 <xTimerCreateTimerTask+0x88>)
 8003954:	f7ff f8de 	bl	8002b14 <xTaskCreateStatic>
 8003958:	4603      	mov	r3, r0
 800395a:	4a10      	ldr	r2, [pc, #64]	; (800399c <xTimerCreateTimerTask+0x8c>)
 800395c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <xTimerCreateTimerTask+0x8c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003966:	2301      	movs	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	613b      	str	r3, [r7, #16]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003986:	697b      	ldr	r3, [r7, #20]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000cac 	.word	0x20000cac
 8003994:	080048c0 	.word	0x080048c0
 8003998:	08003ad5 	.word	0x08003ad5
 800399c:	20000cb0 	.word	0x20000cb0

080039a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	623b      	str	r3, [r7, #32]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039ce:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <xTimerGenericCommand+0x98>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d02a      	beq.n	8003a2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	dc18      	bgt.n	8003a1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039e8:	f7ff feb2 	bl	8003750 <xTaskGetSchedulerState>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d109      	bne.n	8003a06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <xTimerGenericCommand+0x98>)
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	f107 0110 	add.w	r1, r7, #16
 80039fa:	2300      	movs	r3, #0
 80039fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fe:	f7fe fca1 	bl	8002344 <xQueueGenericSend>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24
 8003a04:	e012      	b.n	8003a2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <xTimerGenericCommand+0x98>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	f107 0110 	add.w	r1, r7, #16
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2200      	movs	r2, #0
 8003a12:	f7fe fc97 	bl	8002344 <xQueueGenericSend>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24
 8003a18:	e008      	b.n	8003a2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <xTimerGenericCommand+0x98>)
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f107 0110 	add.w	r1, r7, #16
 8003a22:	2300      	movs	r3, #0
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	f7fe fd8b 	bl	8002540 <xQueueGenericSendFromISR>
 8003a2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3728      	adds	r7, #40	; 0x28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000cac 	.word	0x20000cac

08003a3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <prvProcessExpiredTimer+0x94>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fb47 	bl	80020e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d022      	beq.n	8003aae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	18d1      	adds	r1, r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	6978      	ldr	r0, [r7, #20]
 8003a76:	f000 f8d1 	bl	8003c1c <prvInsertTimerInActiveList>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01f      	beq.n	8003ac0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a80:	2300      	movs	r3, #0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	2100      	movs	r1, #0
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff88 	bl	80039a0 <xTimerGenericCommand>
 8003a90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60fb      	str	r3, [r7, #12]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	4798      	blx	r3
}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000ca4 	.word	0x20000ca4

08003ad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f857 	bl	8003b94 <prvGetNextExpireTime>
 8003ae6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4619      	mov	r1, r3
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f803 	bl	8003af8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003af2:	f000 f8d5 	bl	8003ca0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003af6:	e7f1      	b.n	8003adc <prvTimerTask+0x8>

08003af8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b02:	f7ff fa43 	bl	8002f8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f866 	bl	8003bdc <prvSampleTimeNow>
 8003b10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d130      	bne.n	8003b7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <prvProcessTimerOrBlockTask+0x3c>
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d806      	bhi.n	8003b34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b26:	f7ff fa3f 	bl	8002fa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff85 	bl	8003a3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b32:	e024      	b.n	8003b7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <prvProcessTimerOrBlockTask+0x90>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <prvProcessTimerOrBlockTask+0x50>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <prvProcessTimerOrBlockTask+0x52>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <prvProcessTimerOrBlockTask+0x94>)
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f7fe ffa7 	bl	8002aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b5e:	f7ff fa23 	bl	8002fa8 <xTaskResumeAll>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <prvProcessTimerOrBlockTask+0x98>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
}
 8003b78:	e001      	b.n	8003b7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b7a:	f7ff fa15 	bl	8002fa8 <xTaskResumeAll>
}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000ca8 	.word	0x20000ca8
 8003b8c:	20000cac 	.word	0x20000cac
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <prvGetNextExpireTime+0x44>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <prvGetNextExpireTime+0x16>
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	e000      	b.n	8003bac <prvGetNextExpireTime+0x18>
 8003baa:	2200      	movs	r2, #0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <prvGetNextExpireTime+0x44>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e001      	b.n	8003bc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000ca4 	.word	0x20000ca4

08003bdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003be4:	f7ff fa7e 	bl	80030e4 <xTaskGetTickCount>
 8003be8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <prvSampleTimeNow+0x3c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d205      	bcs.n	8003c00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003bf4:	f000 f936 	bl	8003e64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e002      	b.n	8003c06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <prvSampleTimeNow+0x3c>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000cb4 	.word	0x20000cb4

08003c1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d812      	bhi.n	8003c68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d302      	bcc.n	8003c56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e01b      	b.n	8003c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <prvInsertTimerInActiveList+0x7c>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7fe fa08 	bl	8002076 <vListInsert>
 8003c66:	e012      	b.n	8003c8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d206      	bcs.n	8003c7e <prvInsertTimerInActiveList+0x62>
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e007      	b.n	8003c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <prvInsertTimerInActiveList+0x80>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f7fe f9f4 	bl	8002076 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c8e:	697b      	ldr	r3, [r7, #20]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000ca8 	.word	0x20000ca8
 8003c9c:	20000ca4 	.word	0x20000ca4

08003ca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	; 0x38
 8003ca4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ca6:	e0ca      	b.n	8003e3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da18      	bge.n	8003ce0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	61fb      	str	r3, [r7, #28]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd6:	6850      	ldr	r0, [r2, #4]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cda:	6892      	ldr	r2, [r2, #8]
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f2c0 80ab 	blt.w	8003e3e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe f9f5 	bl	80020e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cfe:	463b      	mov	r3, r7
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff6b 	bl	8003bdc <prvSampleTimeNow>
 8003d06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	f200 8096 	bhi.w	8003e3c <prvProcessReceivedCommands+0x19c>
 8003d10:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <prvProcessReceivedCommands+0x78>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d41 	.word	0x08003d41
 8003d24:	08003db5 	.word	0x08003db5
 8003d28:	08003dc9 	.word	0x08003dc9
 8003d2c:	08003e13 	.word	0x08003e13
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d41 	.word	0x08003d41
 8003d38:	08003db5 	.word	0x08003db5
 8003d3c:	08003dc9 	.word	0x08003dc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	18d1      	adds	r1, r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d60:	f7ff ff5c 	bl	8003c1c <prvInsertTimerInActiveList>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d069      	beq.n	8003e3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d05e      	beq.n	8003e3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	441a      	add	r2, r3
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d92:	f7ff fe05 	bl	80039a0 <xTimerGenericCommand>
 8003d96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d14f      	bne.n	8003e3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	61bb      	str	r3, [r7, #24]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003dc6:	e03a      	b.n	8003e3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	617b      	str	r3, [r7, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	18d1      	adds	r1, r2, r3
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0c:	f7ff ff06 	bl	8003c1c <prvInsertTimerInActiveList>
					break;
 8003e10:	e015      	b.n	8003e3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e22:	f000 fbdd 	bl	80045e0 <vPortFree>
 8003e26:	e00a      	b.n	8003e3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e3a:	e000      	b.n	8003e3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003e3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <prvProcessReceivedCommands+0x1c0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	1d39      	adds	r1, r7, #4
 8003e44:	2200      	movs	r2, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fc16 	bl	8002678 <xQueueReceive>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f47f af2a 	bne.w	8003ca8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3730      	adds	r7, #48	; 0x30
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000cac 	.word	0x20000cac

08003e64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e6a:	e048      	b.n	8003efe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e6c:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <prvSwitchTimerLists+0xc0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <prvSwitchTimerLists+0xc0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe f92f 	bl	80020e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02e      	beq.n	8003efe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90e      	bls.n	8003ed0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ebe:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <prvSwitchTimerLists+0xc0>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f7fe f8d4 	bl	8002076 <vListInsert>
 8003ece:	e016      	b.n	8003efe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	2100      	movs	r1, #0
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fd60 	bl	80039a0 <xTimerGenericCommand>
 8003ee0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	603b      	str	r3, [r7, #0]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <prvSwitchTimerLists+0xc0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1b1      	bne.n	8003e6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <prvSwitchTimerLists+0xc0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <prvSwitchTimerLists+0xc4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <prvSwitchTimerLists+0xc0>)
 8003f14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f16:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <prvSwitchTimerLists+0xc4>)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000ca4 	.word	0x20000ca4
 8003f28:	20000ca8 	.word	0x20000ca8

08003f2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f32:	f000 f967 	bl	8004204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <prvCheckForValidListAndQueue+0x60>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d120      	bne.n	8003f80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f3e:	4814      	ldr	r0, [pc, #80]	; (8003f90 <prvCheckForValidListAndQueue+0x64>)
 8003f40:	f7fe f848 	bl	8001fd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f44:	4813      	ldr	r0, [pc, #76]	; (8003f94 <prvCheckForValidListAndQueue+0x68>)
 8003f46:	f7fe f845 	bl	8001fd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <prvCheckForValidListAndQueue+0x6c>)
 8003f4c:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <prvCheckForValidListAndQueue+0x64>)
 8003f4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <prvCheckForValidListAndQueue+0x70>)
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <prvCheckForValidListAndQueue+0x68>)
 8003f54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <prvCheckForValidListAndQueue+0x74>)
 8003f5c:	4a11      	ldr	r2, [pc, #68]	; (8003fa4 <prvCheckForValidListAndQueue+0x78>)
 8003f5e:	2110      	movs	r1, #16
 8003f60:	200a      	movs	r0, #10
 8003f62:	f7fe f953 	bl	800220c <xQueueGenericCreateStatic>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <prvCheckForValidListAndQueue+0x60>)
 8003f6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <prvCheckForValidListAndQueue+0x60>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <prvCheckForValidListAndQueue+0x60>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	490b      	ldr	r1, [pc, #44]	; (8003fa8 <prvCheckForValidListAndQueue+0x7c>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fd6c 	bl	8002a58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f80:	f000 f970 	bl	8004264 <vPortExitCritical>
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000cac 	.word	0x20000cac
 8003f90:	20000c7c 	.word	0x20000c7c
 8003f94:	20000c90 	.word	0x20000c90
 8003f98:	20000ca4 	.word	0x20000ca4
 8003f9c:	20000ca8 	.word	0x20000ca8
 8003fa0:	20000d58 	.word	0x20000d58
 8003fa4:	20000cb8 	.word	0x20000cb8
 8003fa8:	080048c8 	.word	0x080048c8

08003fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 0201 	bic.w	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3b04      	subs	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <pxPortInitialiseStack+0x64>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b14      	subs	r3, #20
 8003fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f06f 0202 	mvn.w	r2, #2
 8003ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b20      	subs	r3, #32
 8004000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	08004015 	.word	0x08004015

08004014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <prvTaskExitError+0x54>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d00a      	beq.n	800403e <prvTaskExitError+0x2a>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60fb      	str	r3, [r7, #12]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <prvTaskExitError+0x28>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60bb      	str	r3, [r7, #8]
}
 8004050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004052:	bf00      	nop
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0fc      	beq.n	8004054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	2000000c 	.word	0x2000000c
 800406c:	00000000 	.word	0x00000000

08004070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <pxCurrentTCBConst2>)
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407a:	f380 8809 	msr	PSP, r0
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8811 	msr	BASEPRI, r0
 800408a:	4770      	bx	lr
 800408c:	f3af 8000 	nop.w

08004090 <pxCurrentTCBConst2>:
 8004090:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004098:	4808      	ldr	r0, [pc, #32]	; (80040bc <prvPortStartFirstTask+0x24>)
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	f380 8808 	msr	MSP, r0
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8814 	msr	CONTROL, r0
 80040aa:	b662      	cpsie	i
 80040ac:	b661      	cpsie	f
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	df00      	svc	0
 80040b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040ba:	bf00      	nop
 80040bc:	e000ed08 	.word	0xe000ed08

080040c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040c6:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <xPortStartScheduler+0x120>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a46      	ldr	r2, [pc, #280]	; (80041e4 <xPortStartScheduler+0x124>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d10a      	bne.n	80040e6 <xPortStartScheduler+0x26>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	613b      	str	r3, [r7, #16]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040e6:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <xPortStartScheduler+0x120>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3f      	ldr	r2, [pc, #252]	; (80041e8 <xPortStartScheduler+0x128>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d10a      	bne.n	8004106 <xPortStartScheduler+0x46>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	60fb      	str	r3, [r7, #12]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004106:	4b39      	ldr	r3, [pc, #228]	; (80041ec <xPortStartScheduler+0x12c>)
 8004108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	22ff      	movs	r2, #255	; 0xff
 8004116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <xPortStartScheduler+0x130>)
 800412c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <xPortStartScheduler+0x134>)
 8004130:	2207      	movs	r2, #7
 8004132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004134:	e009      	b.n	800414a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <xPortStartScheduler+0x134>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3b01      	subs	r3, #1
 800413c:	4a2d      	ldr	r2, [pc, #180]	; (80041f4 <xPortStartScheduler+0x134>)
 800413e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d0ef      	beq.n	8004136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004156:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <xPortStartScheduler+0x134>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1c3 0307 	rsb	r3, r3, #7
 800415e:	2b04      	cmp	r3, #4
 8004160:	d00a      	beq.n	8004178 <xPortStartScheduler+0xb8>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	60bb      	str	r3, [r7, #8]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <xPortStartScheduler+0x134>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <xPortStartScheduler+0x134>)
 8004180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <xPortStartScheduler+0x134>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800418a:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <xPortStartScheduler+0x134>)
 800418c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <xPortStartScheduler+0x138>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <xPortStartScheduler+0x138>)
 800419c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <xPortStartScheduler+0x138>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <xPortStartScheduler+0x138>)
 80041a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041ae:	f000 f8dd 	bl	800436c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <xPortStartScheduler+0x13c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041b8:	f000 f8fc 	bl	80043b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <xPortStartScheduler+0x140>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0f      	ldr	r2, [pc, #60]	; (8004200 <xPortStartScheduler+0x140>)
 80041c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041c8:	f7ff ff66 	bl	8004098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041cc:	f7ff f854 	bl	8003278 <vTaskSwitchContext>
	prvTaskExitError();
 80041d0:	f7ff ff20 	bl	8004014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000ed00 	.word	0xe000ed00
 80041e4:	410fc271 	.word	0x410fc271
 80041e8:	410fc270 	.word	0x410fc270
 80041ec:	e000e400 	.word	0xe000e400
 80041f0:	20000da8 	.word	0x20000da8
 80041f4:	20000dac 	.word	0x20000dac
 80041f8:	e000ed20 	.word	0xe000ed20
 80041fc:	2000000c 	.word	0x2000000c
 8004200:	e000ef34 	.word	0xe000ef34

08004204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	607b      	str	r3, [r7, #4]
}
 800421c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <vPortEnterCritical+0x58>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <vPortEnterCritical+0x58>)
 8004226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <vPortEnterCritical+0x58>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10f      	bne.n	8004250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <vPortEnterCritical+0x5c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <vPortEnterCritical+0x4c>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	603b      	str	r3, [r7, #0]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <vPortEnterCritical+0x4a>
	}
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	2000000c 	.word	0x2000000c
 8004260:	e000ed04 	.word	0xe000ed04

08004264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <vPortExitCritical+0x50>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <vPortExitCritical+0x24>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	607b      	str	r3, [r7, #4]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <vPortExitCritical+0x50>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3b01      	subs	r3, #1
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <vPortExitCritical+0x50>)
 8004290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <vPortExitCritical+0x50>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <vPortExitCritical+0x42>
 800429a:	2300      	movs	r3, #0
 800429c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f383 8811 	msr	BASEPRI, r3
}
 80042a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000000c 	.word	0x2000000c
	...

080042c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042c0:	f3ef 8009 	mrs	r0, PSP
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <pxCurrentTCBConst>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	f01e 0f10 	tst.w	lr, #16
 80042d0:	bf08      	it	eq
 80042d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	6010      	str	r0, [r2, #0]
 80042dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042e4:	f380 8811 	msr	BASEPRI, r0
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f7fe ffc2 	bl	8003278 <vTaskSwitchContext>
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f380 8811 	msr	BASEPRI, r0
 80042fc:	bc09      	pop	{r0, r3}
 80042fe:	6819      	ldr	r1, [r3, #0]
 8004300:	6808      	ldr	r0, [r1, #0]
 8004302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004306:	f01e 0f10 	tst.w	lr, #16
 800430a:	bf08      	it	eq
 800430c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004310:	f380 8809 	msr	PSP, r0
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	f3af 8000 	nop.w

08004320 <pxCurrentTCBConst>:
 8004320:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	607b      	str	r3, [r7, #4]
}
 8004340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004342:	f7fe fedf 	bl	8003104 <xTaskIncrementTick>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <xPortSysTickHandler+0x40>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f383 8811 	msr	BASEPRI, r3
}
 800435e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <vPortSetupTimerInterrupt+0x38>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <vPortSetupTimerInterrupt+0x3c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <vPortSetupTimerInterrupt+0x40>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <vPortSetupTimerInterrupt+0x44>)
 800438a:	3b01      	subs	r3, #1
 800438c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010
 80043a4:	e000e018 	.word	0xe000e018
 80043a8:	20000000 	.word	0x20000000
 80043ac:	10624dd3 	.word	0x10624dd3
 80043b0:	e000e014 	.word	0xe000e014

080043b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043c4 <vPortEnableVFP+0x10>
 80043b8:	6801      	ldr	r1, [r0, #0]
 80043ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043be:	6001      	str	r1, [r0, #0]
 80043c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043c2:	bf00      	nop
 80043c4:	e000ed88 	.word	0xe000ed88

080043c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043ce:	f3ef 8305 	mrs	r3, IPSR
 80043d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b0f      	cmp	r3, #15
 80043d8:	d914      	bls.n	8004404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <vPortValidateInterruptPriority+0x70>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043e4:	4b15      	ldr	r3, [pc, #84]	; (800443c <vPortValidateInterruptPriority+0x74>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	7afa      	ldrb	r2, [r7, #11]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d20a      	bcs.n	8004404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
}
 8004400:	bf00      	nop
 8004402:	e7fe      	b.n	8004402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <vPortValidateInterruptPriority+0x78>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <vPortValidateInterruptPriority+0x7c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d90a      	bls.n	800442a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	603b      	str	r3, [r7, #0]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <vPortValidateInterruptPriority+0x60>
	}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	e000e3f0 	.word	0xe000e3f0
 800443c:	20000da8 	.word	0x20000da8
 8004440:	e000ed0c 	.word	0xe000ed0c
 8004444:	20000dac 	.word	0x20000dac

08004448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004454:	f7fe fd9a 	bl	8002f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004458:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <pvPortMalloc+0x180>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004460:	f000 f920 	bl	80046a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <pvPortMalloc+0x184>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8093 	bne.w	8004598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01d      	beq.n	80044b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004478:	2208      	movs	r2, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	2b00      	cmp	r3, #0
 8004488:	d014      	beq.n	80044b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f023 0307 	bic.w	r3, r3, #7
 8004490:	3308      	adds	r3, #8
 8004492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <pvPortMalloc+0x6c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	617b      	str	r3, [r7, #20]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06e      	beq.n	8004598 <pvPortMalloc+0x150>
 80044ba:	4b45      	ldr	r3, [pc, #276]	; (80045d0 <pvPortMalloc+0x188>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d869      	bhi.n	8004598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044c4:	4b43      	ldr	r3, [pc, #268]	; (80045d4 <pvPortMalloc+0x18c>)
 80044c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044c8:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <pvPortMalloc+0x18c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ce:	e004      	b.n	80044da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d903      	bls.n	80044ec <pvPortMalloc+0xa4>
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f1      	bne.n	80044d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <pvPortMalloc+0x180>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d050      	beq.n	8004598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2208      	movs	r2, #8
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1ad2      	subs	r2, r2, r3
 8004510:	2308      	movs	r3, #8
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	429a      	cmp	r2, r3
 8004516:	d91f      	bls.n	8004558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <pvPortMalloc+0xf8>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	613b      	str	r3, [r7, #16]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004552:	69b8      	ldr	r0, [r7, #24]
 8004554:	f000 f908 	bl	8004768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <pvPortMalloc+0x188>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <pvPortMalloc+0x188>)
 8004564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <pvPortMalloc+0x188>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <pvPortMalloc+0x190>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d203      	bcs.n	800457a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <pvPortMalloc+0x188>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <pvPortMalloc+0x190>)
 8004578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <pvPortMalloc+0x184>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	431a      	orrs	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <pvPortMalloc+0x194>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3301      	adds	r3, #1
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <pvPortMalloc+0x194>)
 8004596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004598:	f7fe fd06 	bl	8002fa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <pvPortMalloc+0x174>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60fb      	str	r3, [r7, #12]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <pvPortMalloc+0x172>
	return pvReturn;
 80045bc:	69fb      	ldr	r3, [r7, #28]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3728      	adds	r7, #40	; 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200049b8 	.word	0x200049b8
 80045cc:	200049cc 	.word	0x200049cc
 80045d0:	200049bc 	.word	0x200049bc
 80045d4:	200049b0 	.word	0x200049b0
 80045d8:	200049c0 	.word	0x200049c0
 80045dc:	200049c4 	.word	0x200049c4

080045e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04d      	beq.n	800468e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045f2:	2308      	movs	r3, #8
 80045f4:	425b      	negs	r3, r3
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4413      	add	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <vPortFree+0xb8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <vPortFree+0x44>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60fb      	str	r3, [r7, #12]
}
 8004620:	bf00      	nop
 8004622:	e7fe      	b.n	8004622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <vPortFree+0x62>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	60bb      	str	r3, [r7, #8]
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <vPortFree+0xb8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01e      	beq.n	800468e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11a      	bne.n	800468e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <vPortFree+0xb8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004668:	f7fe fc90 	bl	8002f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <vPortFree+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4413      	add	r3, r2
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <vPortFree+0xbc>)
 8004678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800467a:	6938      	ldr	r0, [r7, #16]
 800467c:	f000 f874 	bl	8004768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <vPortFree+0xc0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a06      	ldr	r2, [pc, #24]	; (80046a0 <vPortFree+0xc0>)
 8004688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800468a:	f7fe fc8d 	bl	8002fa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200049cc 	.word	0x200049cc
 800469c:	200049bc 	.word	0x200049bc
 80046a0:	200049c8 	.word	0x200049c8

080046a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046b0:	4b27      	ldr	r3, [pc, #156]	; (8004750 <prvHeapInit+0xac>)
 80046b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00c      	beq.n	80046d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3307      	adds	r3, #7
 80046c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <prvHeapInit+0xac>)
 80046d4:	4413      	add	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046dc:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <prvHeapInit+0xb0>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <prvHeapInit+0xb0>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4413      	add	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046f0:	2208      	movs	r2, #8
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0307 	bic.w	r3, r3, #7
 80046fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <prvHeapInit+0xb4>)
 8004704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <prvHeapInit+0xb4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <prvHeapInit+0xb4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvHeapInit+0xb4>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4a0a      	ldr	r2, [pc, #40]	; (800475c <prvHeapInit+0xb8>)
 8004732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <prvHeapInit+0xbc>)
 800473a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <prvHeapInit+0xc0>)
 800473e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004742:	601a      	str	r2, [r3, #0]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	20000db0 	.word	0x20000db0
 8004754:	200049b0 	.word	0x200049b0
 8004758:	200049b8 	.word	0x200049b8
 800475c:	200049c0 	.word	0x200049c0
 8004760:	200049bc 	.word	0x200049bc
 8004764:	200049cc 	.word	0x200049cc

08004768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004770:	4b28      	ldr	r3, [pc, #160]	; (8004814 <prvInsertBlockIntoFreeList+0xac>)
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e002      	b.n	800477c <prvInsertBlockIntoFreeList+0x14>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d8f7      	bhi.n	8004776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4413      	add	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d108      	bne.n	80047aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	441a      	add	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d118      	bne.n	80047f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <prvInsertBlockIntoFreeList+0xb0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d00d      	beq.n	80047e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e008      	b.n	80047f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <prvInsertBlockIntoFreeList+0xb0>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e003      	b.n	80047f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d002      	beq.n	8004806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	200049b0 	.word	0x200049b0
 8004818:	200049b8 	.word	0x200049b8

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	4d0d      	ldr	r5, [pc, #52]	; (8004864 <__libc_init_array+0x38>)
 8004830:	4c0d      	ldr	r4, [pc, #52]	; (8004868 <__libc_init_array+0x3c>)
 8004832:	1b64      	subs	r4, r4, r5
 8004834:	10a4      	asrs	r4, r4, #2
 8004836:	2600      	movs	r6, #0
 8004838:	42a6      	cmp	r6, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	4d0b      	ldr	r5, [pc, #44]	; (800486c <__libc_init_array+0x40>)
 800483e:	4c0c      	ldr	r4, [pc, #48]	; (8004870 <__libc_init_array+0x44>)
 8004840:	f000 f826 	bl	8004890 <_init>
 8004844:	1b64      	subs	r4, r4, r5
 8004846:	10a4      	asrs	r4, r4, #2
 8004848:	2600      	movs	r6, #0
 800484a:	42a6      	cmp	r6, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	f855 3b04 	ldr.w	r3, [r5], #4
 8004854:	4798      	blx	r3
 8004856:	3601      	adds	r6, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	f855 3b04 	ldr.w	r3, [r5], #4
 800485e:	4798      	blx	r3
 8004860:	3601      	adds	r6, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	08004938 	.word	0x08004938
 8004868:	08004938 	.word	0x08004938
 800486c:	08004938 	.word	0x08004938
 8004870:	0800493c 	.word	0x0800493c

08004874 <memcpy>:
 8004874:	440a      	add	r2, r1
 8004876:	4291      	cmp	r1, r2
 8004878:	f100 33ff 	add.w	r3, r0, #4294967295
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	4770      	bx	lr
 8004880:	b510      	push	{r4, lr}
 8004882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800488a:	4291      	cmp	r1, r2
 800488c:	d1f9      	bne.n	8004882 <memcpy+0xe>
 800488e:	bd10      	pop	{r4, pc}

08004890 <_init>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr

0800489c <_fini>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr
